// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`eslint > configs > should match the snapshot for the browser preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
    "**/*.{ts,tsx,cts,mts}",
  ],
  "languageOptions": {
    "globals": {
      "AI": false,
      "AICreateMonitor": false,
      "AITextSession": false,
      "AbortController": false,
      "AbortSignal": false,
      "AbsoluteOrientationSensor": false,
      "AbstractRange": false,
      "Accelerometer": false,
      "AnalyserNode": false,
      "Animation": false,
      "AnimationEffect": false,
      "AnimationEvent": false,
      "AnimationPlaybackEvent": false,
      "AnimationTimeline": false,
      "AsyncDisposableStack": false,
      "Attr": false,
      "Audio": false,
      "AudioBuffer": false,
      "AudioBufferSourceNode": false,
      "AudioContext": false,
      "AudioData": false,
      "AudioDecoder": false,
      "AudioDestinationNode": false,
      "AudioEncoder": false,
      "AudioListener": false,
      "AudioNode": false,
      "AudioParam": false,
      "AudioParamMap": false,
      "AudioProcessingEvent": false,
      "AudioScheduledSourceNode": false,
      "AudioSinkInfo": false,
      "AudioWorklet": false,
      "AudioWorkletGlobalScope": false,
      "AudioWorkletNode": false,
      "AudioWorkletProcessor": false,
      "AuthenticatorAssertionResponse": false,
      "AuthenticatorAttestationResponse": false,
      "AuthenticatorResponse": false,
      "BackgroundFetchManager": false,
      "BackgroundFetchRecord": false,
      "BackgroundFetchRegistration": false,
      "BarProp": false,
      "BarcodeDetector": false,
      "BaseAudioContext": false,
      "BatteryManager": false,
      "BeforeUnloadEvent": false,
      "BiquadFilterNode": false,
      "Blob": false,
      "BlobEvent": false,
      "Bluetooth": false,
      "BluetoothCharacteristicProperties": false,
      "BluetoothDevice": false,
      "BluetoothRemoteGATTCharacteristic": false,
      "BluetoothRemoteGATTDescriptor": false,
      "BluetoothRemoteGATTServer": false,
      "BluetoothRemoteGATTService": false,
      "BluetoothUUID": false,
      "BroadcastChannel": false,
      "BrowserCaptureMediaStreamTrack": false,
      "ByteLengthQueuingStrategy": false,
      "CDATASection": false,
      "CSPViolationReportBody": false,
      "CSS": false,
      "CSSAnimation": false,
      "CSSConditionRule": false,
      "CSSContainerRule": false,
      "CSSCounterStyleRule": false,
      "CSSFontFaceRule": false,
      "CSSFontFeatureValuesRule": false,
      "CSSFontPaletteValuesRule": false,
      "CSSFunctionDeclarations": false,
      "CSSFunctionDescriptors": false,
      "CSSFunctionRule": false,
      "CSSGroupingRule": false,
      "CSSImageValue": false,
      "CSSImportRule": false,
      "CSSKeyframeRule": false,
      "CSSKeyframesRule": false,
      "CSSKeywordValue": false,
      "CSSLayerBlockRule": false,
      "CSSLayerStatementRule": false,
      "CSSMarginRule": false,
      "CSSMathClamp": false,
      "CSSMathInvert": false,
      "CSSMathMax": false,
      "CSSMathMin": false,
      "CSSMathNegate": false,
      "CSSMathProduct": false,
      "CSSMathSum": false,
      "CSSMathValue": false,
      "CSSMatrixComponent": false,
      "CSSMediaRule": false,
      "CSSNamespaceRule": false,
      "CSSNestedDeclarations": false,
      "CSSNumericArray": false,
      "CSSNumericValue": false,
      "CSSPageDescriptors": false,
      "CSSPageRule": false,
      "CSSPerspective": false,
      "CSSPositionTryDescriptors": false,
      "CSSPositionTryRule": false,
      "CSSPositionValue": false,
      "CSSPropertyRule": false,
      "CSSRotate": false,
      "CSSRule": false,
      "CSSRuleList": false,
      "CSSScale": false,
      "CSSScopeRule": false,
      "CSSSkew": false,
      "CSSSkewX": false,
      "CSSSkewY": false,
      "CSSStartingStyleRule": false,
      "CSSStyleDeclaration": false,
      "CSSStyleRule": false,
      "CSSStyleSheet": false,
      "CSSStyleValue": false,
      "CSSSupportsRule": false,
      "CSSTransformComponent": false,
      "CSSTransformValue": false,
      "CSSTransition": false,
      "CSSTranslate": false,
      "CSSUnitValue": false,
      "CSSUnparsedValue": false,
      "CSSVariableReferenceValue": false,
      "CSSViewTransitionRule": false,
      "Cache": false,
      "CacheStorage": false,
      "CanvasCaptureMediaStream": false,
      "CanvasCaptureMediaStreamTrack": false,
      "CanvasGradient": false,
      "CanvasPattern": false,
      "CanvasRenderingContext2D": false,
      "CaptureController": false,
      "CaretPosition": false,
      "ChannelMergerNode": false,
      "ChannelSplitterNode": false,
      "ChapterInformation": false,
      "CharacterBoundsUpdateEvent": false,
      "CharacterData": false,
      "Clipboard": false,
      "ClipboardChangeEvent": false,
      "ClipboardEvent": false,
      "ClipboardItem": false,
      "CloseEvent": false,
      "CloseWatcher": false,
      "CommandEvent": false,
      "Comment": false,
      "CompositionEvent": false,
      "CompressionStream": false,
      "ConstantSourceNode": false,
      "ContentVisibilityAutoStateChangeEvent": false,
      "ConvolverNode": false,
      "CookieChangeEvent": false,
      "CookieDeprecationLabel": false,
      "CookieStore": false,
      "CookieStoreManager": false,
      "CountQueuingStrategy": false,
      "CreateMonitor": false,
      "Credential": false,
      "CredentialsContainer": false,
      "CropTarget": false,
      "Crypto": false,
      "CryptoKey": false,
      "CustomElementRegistry": false,
      "CustomEvent": false,
      "CustomStateSet": false,
      "DOMError": false,
      "DOMException": false,
      "DOMImplementation": false,
      "DOMMatrix": false,
      "DOMMatrixReadOnly": false,
      "DOMParser": false,
      "DOMPoint": false,
      "DOMPointReadOnly": false,
      "DOMQuad": false,
      "DOMRect": false,
      "DOMRectList": false,
      "DOMRectReadOnly": false,
      "DOMStringList": false,
      "DOMStringMap": false,
      "DOMTokenList": false,
      "DataTransfer": false,
      "DataTransferItem": false,
      "DataTransferItemList": false,
      "DecompressionStream": false,
      "DelayNode": false,
      "DelegatedInkTrailPresenter": false,
      "DeviceMotionEvent": false,
      "DeviceMotionEventAcceleration": false,
      "DeviceMotionEventRotationRate": false,
      "DeviceOrientationEvent": false,
      "DevicePosture": false,
      "DisposableStack": false,
      "Document": false,
      "DocumentFragment": false,
      "DocumentPictureInPicture": false,
      "DocumentPictureInPictureEvent": false,
      "DocumentTimeline": false,
      "DocumentType": false,
      "DragEvent": false,
      "DynamicsCompressorNode": false,
      "EditContext": false,
      "Element": false,
      "ElementInternals": false,
      "EncodedAudioChunk": false,
      "EncodedVideoChunk": false,
      "ErrorEvent": false,
      "Event": false,
      "EventCounts": false,
      "EventSource": false,
      "EventTarget": false,
      "External": false,
      "EyeDropper": false,
      "FeaturePolicy": false,
      "FederatedCredential": false,
      "Fence": false,
      "FencedFrameConfig": false,
      "FetchLaterResult": false,
      "File": false,
      "FileList": false,
      "FileReader": false,
      "FileSystem": false,
      "FileSystemDirectoryEntry": false,
      "FileSystemDirectoryHandle": false,
      "FileSystemDirectoryReader": false,
      "FileSystemEntry": false,
      "FileSystemFileEntry": false,
      "FileSystemFileHandle": false,
      "FileSystemHandle": false,
      "FileSystemObserver": false,
      "FileSystemWritableFileStream": false,
      "FocusEvent": false,
      "FontData": false,
      "FontFace": false,
      "FontFaceSet": false,
      "FontFaceSetLoadEvent": false,
      "FormData": false,
      "FormDataEvent": false,
      "FragmentDirective": false,
      "GPU": false,
      "GPUAdapter": false,
      "GPUAdapterInfo": false,
      "GPUBindGroup": false,
      "GPUBindGroupLayout": false,
      "GPUBuffer": false,
      "GPUBufferUsage": false,
      "GPUCanvasContext": false,
      "GPUColorWrite": false,
      "GPUCommandBuffer": false,
      "GPUCommandEncoder": false,
      "GPUCompilationInfo": false,
      "GPUCompilationMessage": false,
      "GPUComputePassEncoder": false,
      "GPUComputePipeline": false,
      "GPUDevice": false,
      "GPUDeviceLostInfo": false,
      "GPUError": false,
      "GPUExternalTexture": false,
      "GPUInternalError": false,
      "GPUMapMode": false,
      "GPUOutOfMemoryError": false,
      "GPUPipelineError": false,
      "GPUPipelineLayout": false,
      "GPUQuerySet": false,
      "GPUQueue": false,
      "GPURenderBundle": false,
      "GPURenderBundleEncoder": false,
      "GPURenderPassEncoder": false,
      "GPURenderPipeline": false,
      "GPUSampler": false,
      "GPUShaderModule": false,
      "GPUShaderStage": false,
      "GPUSupportedFeatures": false,
      "GPUSupportedLimits": false,
      "GPUTexture": false,
      "GPUTextureUsage": false,
      "GPUTextureView": false,
      "GPUUncapturedErrorEvent": false,
      "GPUValidationError": false,
      "GainNode": false,
      "Gamepad": false,
      "GamepadAxisMoveEvent": false,
      "GamepadButton": false,
      "GamepadButtonEvent": false,
      "GamepadEvent": false,
      "GamepadHapticActuator": false,
      "GamepadPose": false,
      "Geolocation": false,
      "GeolocationCoordinates": false,
      "GeolocationPosition": false,
      "GeolocationPositionError": false,
      "GravitySensor": false,
      "Gyroscope": false,
      "HID": false,
      "HIDConnectionEvent": false,
      "HIDDevice": false,
      "HIDInputReportEvent": false,
      "HTMLAllCollection": false,
      "HTMLAnchorElement": false,
      "HTMLAreaElement": false,
      "HTMLAudioElement": false,
      "HTMLBRElement": false,
      "HTMLBaseElement": false,
      "HTMLBodyElement": false,
      "HTMLButtonElement": false,
      "HTMLCanvasElement": false,
      "HTMLCollection": false,
      "HTMLDListElement": false,
      "HTMLDataElement": false,
      "HTMLDataListElement": false,
      "HTMLDetailsElement": false,
      "HTMLDialogElement": false,
      "HTMLDirectoryElement": false,
      "HTMLDivElement": false,
      "HTMLDocument": false,
      "HTMLElement": false,
      "HTMLEmbedElement": false,
      "HTMLFencedFrameElement": false,
      "HTMLFieldSetElement": false,
      "HTMLFontElement": false,
      "HTMLFormControlsCollection": false,
      "HTMLFormElement": false,
      "HTMLFrameElement": false,
      "HTMLFrameSetElement": false,
      "HTMLHRElement": false,
      "HTMLHeadElement": false,
      "HTMLHeadingElement": false,
      "HTMLHtmlElement": false,
      "HTMLIFrameElement": false,
      "HTMLImageElement": false,
      "HTMLInputElement": false,
      "HTMLLIElement": false,
      "HTMLLabelElement": false,
      "HTMLLegendElement": false,
      "HTMLLinkElement": false,
      "HTMLMapElement": false,
      "HTMLMarqueeElement": false,
      "HTMLMediaElement": false,
      "HTMLMenuElement": false,
      "HTMLMetaElement": false,
      "HTMLMeterElement": false,
      "HTMLModElement": false,
      "HTMLOListElement": false,
      "HTMLObjectElement": false,
      "HTMLOptGroupElement": false,
      "HTMLOptionElement": false,
      "HTMLOptionsCollection": false,
      "HTMLOutputElement": false,
      "HTMLParagraphElement": false,
      "HTMLParamElement": false,
      "HTMLPictureElement": false,
      "HTMLPreElement": false,
      "HTMLProgressElement": false,
      "HTMLQuoteElement": false,
      "HTMLScriptElement": false,
      "HTMLSelectElement": false,
      "HTMLSelectedContentElement": false,
      "HTMLSlotElement": false,
      "HTMLSourceElement": false,
      "HTMLSpanElement": false,
      "HTMLStyleElement": false,
      "HTMLTableCaptionElement": false,
      "HTMLTableCellElement": false,
      "HTMLTableColElement": false,
      "HTMLTableElement": false,
      "HTMLTableRowElement": false,
      "HTMLTableSectionElement": false,
      "HTMLTemplateElement": false,
      "HTMLTextAreaElement": false,
      "HTMLTimeElement": false,
      "HTMLTitleElement": false,
      "HTMLTrackElement": false,
      "HTMLUListElement": false,
      "HTMLUnknownElement": false,
      "HTMLVideoElement": false,
      "HashChangeEvent": false,
      "Headers": false,
      "Highlight": false,
      "HighlightRegistry": false,
      "History": false,
      "IDBCursor": false,
      "IDBCursorWithValue": false,
      "IDBDatabase": false,
      "IDBFactory": false,
      "IDBIndex": false,
      "IDBKeyRange": false,
      "IDBObjectStore": false,
      "IDBOpenDBRequest": false,
      "IDBRequest": false,
      "IDBTransaction": false,
      "IDBVersionChangeEvent": false,
      "IIRFilterNode": false,
      "IdentityCredential": false,
      "IdentityCredentialError": false,
      "IdentityProvider": false,
      "IdleDeadline": false,
      "IdleDetector": false,
      "Image": false,
      "ImageBitmap": false,
      "ImageBitmapRenderingContext": false,
      "ImageCapture": false,
      "ImageData": false,
      "ImageDecoder": false,
      "ImageTrack": false,
      "ImageTrackList": false,
      "Ink": false,
      "InputDeviceCapabilities": false,
      "InputDeviceInfo": false,
      "InputEvent": false,
      "IntegrityViolationReportBody": false,
      "IntersectionObserver": false,
      "IntersectionObserverEntry": false,
      "Keyboard": false,
      "KeyboardEvent": false,
      "KeyboardLayoutMap": false,
      "KeyframeEffect": false,
      "LanguageDetector": false,
      "LargestContentfulPaint": false,
      "LaunchParams": false,
      "LaunchQueue": false,
      "LayoutShift": false,
      "LayoutShiftAttribution": false,
      "LinearAccelerationSensor": false,
      "Location": false,
      "Lock": false,
      "LockManager": false,
      "MIDIAccess": false,
      "MIDIConnectionEvent": false,
      "MIDIInput": false,
      "MIDIInputMap": false,
      "MIDIMessageEvent": false,
      "MIDIOutput": false,
      "MIDIOutputMap": false,
      "MIDIPort": false,
      "MathMLElement": false,
      "MediaCapabilities": false,
      "MediaCapabilitiesInfo": false,
      "MediaDeviceInfo": false,
      "MediaDevices": false,
      "MediaElementAudioSourceNode": false,
      "MediaEncryptedEvent": false,
      "MediaError": false,
      "MediaKeyError": false,
      "MediaKeyMessageEvent": false,
      "MediaKeySession": false,
      "MediaKeyStatusMap": false,
      "MediaKeySystemAccess": false,
      "MediaKeys": false,
      "MediaList": false,
      "MediaMetadata": false,
      "MediaQueryList": false,
      "MediaQueryListEvent": false,
      "MediaRecorder": false,
      "MediaRecorderErrorEvent": false,
      "MediaSession": false,
      "MediaSource": false,
      "MediaSourceHandle": false,
      "MediaStream": false,
      "MediaStreamAudioDestinationNode": false,
      "MediaStreamAudioSourceNode": false,
      "MediaStreamEvent": false,
      "MediaStreamTrack": false,
      "MediaStreamTrackAudioSourceNode": false,
      "MediaStreamTrackAudioStats": false,
      "MediaStreamTrackEvent": false,
      "MediaStreamTrackGenerator": false,
      "MediaStreamTrackProcessor": false,
      "MediaStreamTrackVideoStats": false,
      "MessageChannel": false,
      "MessageEvent": false,
      "MessagePort": false,
      "MimeType": false,
      "MimeTypeArray": false,
      "ModelGenericSession": false,
      "ModelManager": false,
      "MouseEvent": false,
      "MutationEvent": false,
      "MutationObserver": false,
      "MutationRecord": false,
      "NamedNodeMap": false,
      "NavigateEvent": false,
      "Navigation": false,
      "NavigationActivation": false,
      "NavigationCurrentEntryChangeEvent": false,
      "NavigationDestination": false,
      "NavigationHistoryEntry": false,
      "NavigationPreloadManager": false,
      "NavigationTransition": false,
      "Navigator": false,
      "NavigatorLogin": false,
      "NavigatorManagedData": false,
      "NavigatorUAData": false,
      "NetworkInformation": false,
      "Node": false,
      "NodeFilter": false,
      "NodeIterator": false,
      "NodeList": false,
      "NotRestoredReasonDetails": false,
      "NotRestoredReasons": false,
      "Notification": false,
      "NotifyPaintEvent": false,
      "OTPCredential": false,
      "Observable": false,
      "OfflineAudioCompletionEvent": false,
      "OfflineAudioContext": false,
      "OffscreenCanvas": false,
      "OffscreenCanvasRenderingContext2D": false,
      "Option": false,
      "OrientationSensor": false,
      "OscillatorNode": false,
      "OverconstrainedError": false,
      "PERSISTENT": false,
      "PageRevealEvent": false,
      "PageSwapEvent": false,
      "PageTransitionEvent": false,
      "PannerNode": false,
      "PasswordCredential": false,
      "Path2D": false,
      "PaymentAddress": false,
      "PaymentManager": false,
      "PaymentMethodChangeEvent": false,
      "PaymentRequest": false,
      "PaymentRequestUpdateEvent": false,
      "PaymentResponse": false,
      "Performance": false,
      "PerformanceElementTiming": false,
      "PerformanceEntry": false,
      "PerformanceEventTiming": false,
      "PerformanceLongAnimationFrameTiming": false,
      "PerformanceLongTaskTiming": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceNavigation": false,
      "PerformanceNavigationTiming": false,
      "PerformanceObserver": false,
      "PerformanceObserverEntryList": false,
      "PerformancePaintTiming": false,
      "PerformanceResourceTiming": false,
      "PerformanceScriptTiming": false,
      "PerformanceServerTiming": false,
      "PerformanceTiming": false,
      "PeriodicSyncManager": false,
      "PeriodicWave": false,
      "PermissionStatus": false,
      "Permissions": false,
      "PictureInPictureEvent": false,
      "PictureInPictureWindow": false,
      "Plugin": false,
      "PluginArray": false,
      "PointerEvent": false,
      "PopStateEvent": false,
      "Presentation": false,
      "PresentationAvailability": false,
      "PresentationConnection": false,
      "PresentationConnectionAvailableEvent": false,
      "PresentationConnectionCloseEvent": false,
      "PresentationConnectionList": false,
      "PresentationReceiver": false,
      "PresentationRequest": false,
      "PressureObserver": false,
      "PressureRecord": false,
      "ProcessingInstruction": false,
      "Profiler": false,
      "ProgressEvent": false,
      "PromiseRejectionEvent": false,
      "ProtectedAudience": false,
      "PublicKeyCredential": false,
      "PushManager": false,
      "PushSubscription": false,
      "PushSubscriptionOptions": false,
      "QuotaExceededError": false,
      "RTCCertificate": false,
      "RTCDTMFSender": false,
      "RTCDTMFToneChangeEvent": false,
      "RTCDataChannel": false,
      "RTCDataChannelEvent": false,
      "RTCDtlsTransport": false,
      "RTCEncodedAudioFrame": false,
      "RTCEncodedVideoFrame": false,
      "RTCError": false,
      "RTCErrorEvent": false,
      "RTCIceCandidate": false,
      "RTCIceTransport": false,
      "RTCPeerConnection": false,
      "RTCPeerConnectionIceErrorEvent": false,
      "RTCPeerConnectionIceEvent": false,
      "RTCRtpReceiver": false,
      "RTCRtpScriptTransform": false,
      "RTCRtpSender": false,
      "RTCRtpTransceiver": false,
      "RTCSctpTransport": false,
      "RTCSessionDescription": false,
      "RTCStatsReport": false,
      "RTCTrackEvent": false,
      "RadioNodeList": false,
      "Range": false,
      "ReadableByteStreamController": false,
      "ReadableStream": false,
      "ReadableStreamBYOBReader": false,
      "ReadableStreamBYOBRequest": false,
      "ReadableStreamDefaultController": false,
      "ReadableStreamDefaultReader": false,
      "RelativeOrientationSensor": false,
      "RemotePlayback": false,
      "ReportBody": false,
      "ReportingObserver": false,
      "Request": false,
      "ResizeObserver": false,
      "ResizeObserverEntry": false,
      "ResizeObserverSize": false,
      "Response": false,
      "RestrictionTarget": false,
      "SVGAElement": false,
      "SVGAngle": false,
      "SVGAnimateElement": false,
      "SVGAnimateMotionElement": false,
      "SVGAnimateTransformElement": false,
      "SVGAnimatedAngle": false,
      "SVGAnimatedBoolean": false,
      "SVGAnimatedEnumeration": false,
      "SVGAnimatedInteger": false,
      "SVGAnimatedLength": false,
      "SVGAnimatedLengthList": false,
      "SVGAnimatedNumber": false,
      "SVGAnimatedNumberList": false,
      "SVGAnimatedPreserveAspectRatio": false,
      "SVGAnimatedRect": false,
      "SVGAnimatedString": false,
      "SVGAnimatedTransformList": false,
      "SVGAnimationElement": false,
      "SVGCircleElement": false,
      "SVGClipPathElement": false,
      "SVGComponentTransferFunctionElement": false,
      "SVGDefsElement": false,
      "SVGDescElement": false,
      "SVGElement": false,
      "SVGEllipseElement": false,
      "SVGFEBlendElement": false,
      "SVGFEColorMatrixElement": false,
      "SVGFEComponentTransferElement": false,
      "SVGFECompositeElement": false,
      "SVGFEConvolveMatrixElement": false,
      "SVGFEDiffuseLightingElement": false,
      "SVGFEDisplacementMapElement": false,
      "SVGFEDistantLightElement": false,
      "SVGFEDropShadowElement": false,
      "SVGFEFloodElement": false,
      "SVGFEFuncAElement": false,
      "SVGFEFuncBElement": false,
      "SVGFEFuncGElement": false,
      "SVGFEFuncRElement": false,
      "SVGFEGaussianBlurElement": false,
      "SVGFEImageElement": false,
      "SVGFEMergeElement": false,
      "SVGFEMergeNodeElement": false,
      "SVGFEMorphologyElement": false,
      "SVGFEOffsetElement": false,
      "SVGFEPointLightElement": false,
      "SVGFESpecularLightingElement": false,
      "SVGFESpotLightElement": false,
      "SVGFETileElement": false,
      "SVGFETurbulenceElement": false,
      "SVGFilterElement": false,
      "SVGForeignObjectElement": false,
      "SVGGElement": false,
      "SVGGeometryElement": false,
      "SVGGradientElement": false,
      "SVGGraphicsElement": false,
      "SVGImageElement": false,
      "SVGLength": false,
      "SVGLengthList": false,
      "SVGLineElement": false,
      "SVGLinearGradientElement": false,
      "SVGMPathElement": false,
      "SVGMarkerElement": false,
      "SVGMaskElement": false,
      "SVGMatrix": false,
      "SVGMetadataElement": false,
      "SVGNumber": false,
      "SVGNumberList": false,
      "SVGPathElement": false,
      "SVGPatternElement": false,
      "SVGPoint": false,
      "SVGPointList": false,
      "SVGPolygonElement": false,
      "SVGPolylineElement": false,
      "SVGPreserveAspectRatio": false,
      "SVGRadialGradientElement": false,
      "SVGRect": false,
      "SVGRectElement": false,
      "SVGSVGElement": false,
      "SVGScriptElement": false,
      "SVGSetElement": false,
      "SVGStopElement": false,
      "SVGStringList": false,
      "SVGStyleElement": false,
      "SVGSwitchElement": false,
      "SVGSymbolElement": false,
      "SVGTSpanElement": false,
      "SVGTextContentElement": false,
      "SVGTextElement": false,
      "SVGTextPathElement": false,
      "SVGTextPositioningElement": false,
      "SVGTitleElement": false,
      "SVGTransform": false,
      "SVGTransformList": false,
      "SVGUnitTypes": false,
      "SVGUseElement": false,
      "SVGViewElement": false,
      "Scheduler": false,
      "Scheduling": false,
      "Screen": false,
      "ScreenDetailed": false,
      "ScreenDetails": false,
      "ScreenOrientation": false,
      "ScriptProcessorNode": false,
      "ScrollTimeline": false,
      "SecurityPolicyViolationEvent": false,
      "Selection": false,
      "Sensor": false,
      "SensorErrorEvent": false,
      "Serial": false,
      "SerialPort": false,
      "ServiceWorker": false,
      "ServiceWorkerContainer": false,
      "ServiceWorkerRegistration": false,
      "ShadowRoot": false,
      "SharedStorage": false,
      "SharedStorageAppendMethod": false,
      "SharedStorageClearMethod": false,
      "SharedStorageDeleteMethod": false,
      "SharedStorageModifierMethod": false,
      "SharedStorageSetMethod": false,
      "SharedStorageWorklet": false,
      "SharedWorker": false,
      "SnapEvent": false,
      "SourceBuffer": false,
      "SourceBufferList": false,
      "SpeechGrammar": false,
      "SpeechGrammarList": false,
      "SpeechRecognition": false,
      "SpeechRecognitionErrorEvent": false,
      "SpeechRecognitionEvent": false,
      "SpeechSynthesis": false,
      "SpeechSynthesisErrorEvent": false,
      "SpeechSynthesisEvent": false,
      "SpeechSynthesisUtterance": false,
      "SpeechSynthesisVoice": false,
      "StaticRange": false,
      "StereoPannerNode": false,
      "Storage": false,
      "StorageBucket": false,
      "StorageBucketManager": false,
      "StorageEvent": false,
      "StorageManager": false,
      "StylePropertyMap": false,
      "StylePropertyMapReadOnly": false,
      "StyleSheet": false,
      "StyleSheetList": false,
      "SubmitEvent": false,
      "Subscriber": false,
      "SubtleCrypto": false,
      "Summarizer": false,
      "SuppressedError": false,
      "SyncManager": false,
      "TEMPORARY": false,
      "TaskAttributionTiming": false,
      "TaskController": false,
      "TaskPriorityChangeEvent": false,
      "TaskSignal": false,
      "Text": false,
      "TextDecoder": false,
      "TextDecoderStream": false,
      "TextEncoder": false,
      "TextEncoderStream": false,
      "TextEvent": false,
      "TextFormat": false,
      "TextFormatUpdateEvent": false,
      "TextMetrics": false,
      "TextTrack": false,
      "TextTrackCue": false,
      "TextTrackCueList": false,
      "TextTrackList": false,
      "TextUpdateEvent": false,
      "TimeEvent": false,
      "TimeRanges": false,
      "ToggleEvent": false,
      "Touch": false,
      "TouchEvent": false,
      "TouchList": false,
      "TrackEvent": false,
      "TransformStream": false,
      "TransformStreamDefaultController": false,
      "TransitionEvent": false,
      "Translator": false,
      "TreeWalker": false,
      "TrustedHTML": false,
      "TrustedScript": false,
      "TrustedScriptURL": false,
      "TrustedTypePolicy": false,
      "TrustedTypePolicyFactory": false,
      "UIEvent": false,
      "URL": false,
      "URLPattern": false,
      "URLSearchParams": false,
      "USB": false,
      "USBAlternateInterface": false,
      "USBConfiguration": false,
      "USBConnectionEvent": false,
      "USBDevice": false,
      "USBEndpoint": false,
      "USBInTransferResult": false,
      "USBInterface": false,
      "USBIsochronousInTransferPacket": false,
      "USBIsochronousInTransferResult": false,
      "USBIsochronousOutTransferPacket": false,
      "USBIsochronousOutTransferResult": false,
      "USBOutTransferResult": false,
      "UserActivation": false,
      "VTTCue": false,
      "VTTRegion": false,
      "ValidityState": false,
      "VideoColorSpace": false,
      "VideoDecoder": false,
      "VideoEncoder": false,
      "VideoFrame": false,
      "VideoPlaybackQuality": false,
      "ViewTimeline": false,
      "ViewTransition": false,
      "ViewTransitionTypeSet": false,
      "Viewport": false,
      "VirtualKeyboard": false,
      "VirtualKeyboardGeometryChangeEvent": false,
      "VisibilityStateEntry": false,
      "VisualViewport": false,
      "WGSLLanguageFeatures": false,
      "WakeLock": false,
      "WakeLockSentinel": false,
      "WaveShaperNode": false,
      "WebAssembly": false,
      "WebGL2RenderingContext": false,
      "WebGLActiveInfo": false,
      "WebGLBuffer": false,
      "WebGLContextEvent": false,
      "WebGLFramebuffer": false,
      "WebGLObject": false,
      "WebGLProgram": false,
      "WebGLQuery": false,
      "WebGLRenderbuffer": false,
      "WebGLRenderingContext": false,
      "WebGLSampler": false,
      "WebGLShader": false,
      "WebGLShaderPrecisionFormat": false,
      "WebGLSync": false,
      "WebGLTexture": false,
      "WebGLTransformFeedback": false,
      "WebGLUniformLocation": false,
      "WebGLVertexArrayObject": false,
      "WebSocket": false,
      "WebSocketError": false,
      "WebSocketStream": false,
      "WebTransport": false,
      "WebTransportBidirectionalStream": false,
      "WebTransportDatagramDuplexStream": false,
      "WebTransportError": false,
      "WebTransportReceiveStream": false,
      "WebTransportSendStream": false,
      "WheelEvent": false,
      "Window": false,
      "WindowControlsOverlay": false,
      "WindowControlsOverlayGeometryChangeEvent": false,
      "Worker": false,
      "Worklet": false,
      "WorkletGlobalScope": false,
      "WritableStream": false,
      "WritableStreamDefaultController": false,
      "WritableStreamDefaultWriter": false,
      "XMLDocument": false,
      "XMLHttpRequest": false,
      "XMLHttpRequestEventTarget": false,
      "XMLHttpRequestUpload": false,
      "XMLSerializer": false,
      "XPathEvaluator": false,
      "XPathExpression": false,
      "XPathResult": false,
      "XRAnchor": false,
      "XRAnchorSet": false,
      "XRBoundedReferenceSpace": false,
      "XRCPUDepthInformation": false,
      "XRCamera": false,
      "XRDOMOverlayState": false,
      "XRDepthInformation": false,
      "XRFrame": false,
      "XRHand": false,
      "XRHitTestResult": false,
      "XRHitTestSource": false,
      "XRInputSource": false,
      "XRInputSourceArray": false,
      "XRInputSourceEvent": false,
      "XRInputSourcesChangeEvent": false,
      "XRJointPose": false,
      "XRJointSpace": false,
      "XRLayer": false,
      "XRLightEstimate": false,
      "XRLightProbe": false,
      "XRPose": false,
      "XRRay": false,
      "XRReferenceSpace": false,
      "XRReferenceSpaceEvent": false,
      "XRRenderState": false,
      "XRRigidTransform": false,
      "XRSession": false,
      "XRSessionEvent": false,
      "XRSpace": false,
      "XRSystem": false,
      "XRTransientInputHitTestResult": false,
      "XRTransientInputHitTestSource": false,
      "XRView": false,
      "XRViewerPose": false,
      "XRViewport": false,
      "XRWebGLBinding": false,
      "XRWebGLDepthInformation": false,
      "XRWebGLLayer": false,
      "XSLTProcessor": false,
      "addEventListener": false,
      "ai": false,
      "alert": false,
      "atob": false,
      "blur": false,
      "btoa": false,
      "caches": false,
      "cancelAnimationFrame": false,
      "cancelIdleCallback": false,
      "clearInterval": false,
      "clearTimeout": false,
      "clientInformation": false,
      "close": false,
      "closed": false,
      "confirm": false,
      "console": false,
      "cookieStore": false,
      "createImageBitmap": false,
      "credentialless": false,
      "crossOriginIsolated": false,
      "crypto": false,
      "currentFrame": false,
      "currentTime": false,
      "customElements": false,
      "devicePixelRatio": false,
      "dispatchEvent": false,
      "document": false,
      "documentPictureInPicture": false,
      "event": false,
      "external": false,
      "fence": false,
      "fetch": false,
      "fetchLater": false,
      "find": false,
      "focus": false,
      "frameElement": false,
      "frames": false,
      "getComputedStyle": false,
      "getScreenDetails": false,
      "getSelection": false,
      "history": false,
      "indexedDB": false,
      "innerHeight": false,
      "innerWidth": false,
      "isSecureContext": false,
      "launchQueue": false,
      "length": false,
      "localStorage": false,
      "location": true,
      "locationbar": false,
      "matchMedia": false,
      "menubar": false,
      "model": false,
      "moveBy": false,
      "moveTo": false,
      "name": false,
      "navigation": false,
      "navigator": false,
      "offscreenBuffering": false,
      "onabort": true,
      "onafterprint": true,
      "onanimationcancel": true,
      "onanimationend": true,
      "onanimationiteration": true,
      "onanimationstart": true,
      "onappinstalled": true,
      "onauxclick": true,
      "onbeforeinput": true,
      "onbeforeinstallprompt": true,
      "onbeforematch": true,
      "onbeforeprint": true,
      "onbeforetoggle": true,
      "onbeforeunload": true,
      "onbeforexrselect": true,
      "onblur": true,
      "oncancel": true,
      "oncanplay": true,
      "oncanplaythrough": true,
      "onchange": true,
      "onclick": true,
      "onclose": true,
      "oncommand": true,
      "oncontentvisibilityautostatechange": true,
      "oncontextlost": true,
      "oncontextmenu": true,
      "oncontextrestored": true,
      "oncopy": true,
      "oncuechange": true,
      "oncut": true,
      "ondblclick": true,
      "ondevicemotion": true,
      "ondeviceorientation": true,
      "ondeviceorientationabsolute": true,
      "ondrag": true,
      "ondragend": true,
      "ondragenter": true,
      "ondragleave": true,
      "ondragover": true,
      "ondragstart": true,
      "ondrop": true,
      "ondurationchange": true,
      "onemptied": true,
      "onended": true,
      "onerror": true,
      "onfocus": true,
      "onformdata": true,
      "ongamepadconnected": true,
      "ongamepaddisconnected": true,
      "ongotpointercapture": true,
      "onhashchange": true,
      "oninput": true,
      "oninvalid": true,
      "onkeydown": true,
      "onkeypress": true,
      "onkeyup": true,
      "onlanguagechange": true,
      "onload": true,
      "onloadeddata": true,
      "onloadedmetadata": true,
      "onloadstart": true,
      "onlostpointercapture": true,
      "onmessage": true,
      "onmessageerror": true,
      "onmousedown": true,
      "onmouseenter": true,
      "onmouseleave": true,
      "onmousemove": true,
      "onmouseout": true,
      "onmouseover": true,
      "onmouseup": true,
      "onmousewheel": true,
      "onoffline": true,
      "ononline": true,
      "onpagehide": true,
      "onpagereveal": true,
      "onpageshow": true,
      "onpageswap": true,
      "onpaste": true,
      "onpause": true,
      "onplay": true,
      "onplaying": true,
      "onpointercancel": true,
      "onpointerdown": true,
      "onpointerenter": true,
      "onpointerleave": true,
      "onpointermove": true,
      "onpointerout": true,
      "onpointerover": true,
      "onpointerrawupdate": true,
      "onpointerup": true,
      "onpopstate": true,
      "onprogress": true,
      "onratechange": true,
      "onrejectionhandled": true,
      "onreset": true,
      "onresize": true,
      "onscroll": true,
      "onscrollend": true,
      "onscrollsnapchange": true,
      "onscrollsnapchanging": true,
      "onsearch": true,
      "onsecuritypolicyviolation": true,
      "onseeked": true,
      "onseeking": true,
      "onselect": true,
      "onselectionchange": true,
      "onselectstart": true,
      "onslotchange": true,
      "onstalled": true,
      "onstorage": true,
      "onsubmit": true,
      "onsuspend": true,
      "ontimeupdate": true,
      "ontoggle": true,
      "ontransitioncancel": true,
      "ontransitionend": true,
      "ontransitionrun": true,
      "ontransitionstart": true,
      "onunhandledrejection": true,
      "onunload": true,
      "onvolumechange": true,
      "onwaiting": true,
      "onwheel": true,
      "open": false,
      "opener": false,
      "origin": false,
      "originAgentCluster": false,
      "outerHeight": false,
      "outerWidth": false,
      "pageXOffset": false,
      "pageYOffset": false,
      "parent": false,
      "performance": false,
      "personalbar": false,
      "postMessage": false,
      "print": false,
      "prompt": false,
      "queryLocalFonts": false,
      "queueMicrotask": false,
      "registerProcessor": false,
      "removeEventListener": false,
      "reportError": false,
      "requestAnimationFrame": false,
      "requestIdleCallback": false,
      "resizeBy": false,
      "resizeTo": false,
      "sampleRate": false,
      "scheduler": false,
      "screen": false,
      "screenLeft": false,
      "screenTop": false,
      "screenX": false,
      "screenY": false,
      "scroll": false,
      "scrollBy": false,
      "scrollTo": false,
      "scrollX": false,
      "scrollY": false,
      "scrollbars": false,
      "self": false,
      "sessionStorage": false,
      "setInterval": false,
      "setTimeout": false,
      "sharedStorage": false,
      "showDirectoryPicker": false,
      "showOpenFilePicker": false,
      "showSaveFilePicker": false,
      "speechSynthesis": false,
      "status": false,
      "statusbar": false,
      "stop": false,
      "structuredClone": false,
      "styleMedia": false,
      "toolbar": false,
      "top": false,
      "trustedTypes": false,
      "viewport": false,
      "visualViewport": false,
      "when": false,
      "window": false,
    },
  },
  "name": "foundry/browser",
  "plugins": {
    "compat": {
      "config": {
        "flat/recommended": {
          "languageOptions": {
            "globals": {
              "AI": false,
              "AITextSession": false,
              "AbortController": false,
              "AbortSignal": false,
              "AbsoluteOrientationSensor": false,
              "AbstractRange": false,
              "Accelerometer": false,
              "AnalyserNode": false,
              "Animation": false,
              "AnimationEffect": false,
              "AnimationEvent": false,
              "AnimationPlaybackEvent": false,
              "AnimationTimeline": false,
              "Attr": false,
              "Audio": false,
              "AudioBuffer": false,
              "AudioBufferSourceNode": false,
              "AudioContext": false,
              "AudioData": false,
              "AudioDecoder": false,
              "AudioDestinationNode": false,
              "AudioEncoder": false,
              "AudioListener": false,
              "AudioNode": false,
              "AudioParam": false,
              "AudioParamMap": false,
              "AudioProcessingEvent": false,
              "AudioScheduledSourceNode": false,
              "AudioSinkInfo": false,
              "AudioWorklet": false,
              "AudioWorkletGlobalScope": false,
              "AudioWorkletNode": false,
              "AudioWorkletProcessor": false,
              "AuthenticatorAssertionResponse": false,
              "AuthenticatorAttestationResponse": false,
              "AuthenticatorResponse": false,
              "BackgroundFetchManager": false,
              "BackgroundFetchRecord": false,
              "BackgroundFetchRegistration": false,
              "BarProp": false,
              "BarcodeDetector": false,
              "BaseAudioContext": false,
              "BatteryManager": false,
              "BeforeUnloadEvent": false,
              "BiquadFilterNode": false,
              "Blob": false,
              "BlobEvent": false,
              "Bluetooth": false,
              "BluetoothCharacteristicProperties": false,
              "BluetoothDevice": false,
              "BluetoothRemoteGATTCharacteristic": false,
              "BluetoothRemoteGATTDescriptor": false,
              "BluetoothRemoteGATTServer": false,
              "BluetoothRemoteGATTService": false,
              "BluetoothUUID": false,
              "BroadcastChannel": false,
              "BrowserCaptureMediaStreamTrack": false,
              "ByteLengthQueuingStrategy": false,
              "CDATASection": false,
              "CSS": false,
              "CSSAnimation": false,
              "CSSConditionRule": false,
              "CSSContainerRule": false,
              "CSSCounterStyleRule": false,
              "CSSFontFaceRule": false,
              "CSSFontFeatureValuesRule": false,
              "CSSFontPaletteValuesRule": false,
              "CSSGroupingRule": false,
              "CSSImageValue": false,
              "CSSImportRule": false,
              "CSSKeyframeRule": false,
              "CSSKeyframesRule": false,
              "CSSKeywordValue": false,
              "CSSLayerBlockRule": false,
              "CSSLayerStatementRule": false,
              "CSSMarginRule": false,
              "CSSMathClamp": false,
              "CSSMathInvert": false,
              "CSSMathMax": false,
              "CSSMathMin": false,
              "CSSMathNegate": false,
              "CSSMathProduct": false,
              "CSSMathSum": false,
              "CSSMathValue": false,
              "CSSMatrixComponent": false,
              "CSSMediaRule": false,
              "CSSNamespaceRule": false,
              "CSSNestedDeclarations": false,
              "CSSNumericArray": false,
              "CSSNumericValue": false,
              "CSSPageDescriptors": false,
              "CSSPageRule": false,
              "CSSPerspective": false,
              "CSSPositionTryDescriptors": false,
              "CSSPositionTryRule": false,
              "CSSPositionValue": false,
              "CSSPropertyRule": false,
              "CSSRotate": false,
              "CSSRule": false,
              "CSSRuleList": false,
              "CSSScale": false,
              "CSSScopeRule": false,
              "CSSSkew": false,
              "CSSSkewX": false,
              "CSSSkewY": false,
              "CSSStartingStyleRule": false,
              "CSSStyleDeclaration": false,
              "CSSStyleRule": false,
              "CSSStyleSheet": false,
              "CSSStyleValue": false,
              "CSSSupportsRule": false,
              "CSSTransformComponent": false,
              "CSSTransformValue": false,
              "CSSTransition": false,
              "CSSTranslate": false,
              "CSSUnitValue": false,
              "CSSUnparsedValue": false,
              "CSSVariableReferenceValue": false,
              "CSSViewTransitionRule": false,
              "Cache": false,
              "CacheStorage": false,
              "CanvasCaptureMediaStream": false,
              "CanvasCaptureMediaStreamTrack": false,
              "CanvasGradient": false,
              "CanvasPattern": false,
              "CanvasRenderingContext2D": false,
              "CaptureController": false,
              "CaretPosition": false,
              "ChannelMergerNode": false,
              "ChannelSplitterNode": false,
              "ChapterInformation": false,
              "CharacterBoundsUpdateEvent": false,
              "CharacterData": false,
              "Clipboard": false,
              "ClipboardEvent": false,
              "ClipboardItem": false,
              "CloseEvent": false,
              "CloseWatcher": false,
              "Comment": false,
              "CompositionEvent": false,
              "CompressionStream": false,
              "ConstantSourceNode": false,
              "ContentVisibilityAutoStateChangeEvent": false,
              "ConvolverNode": false,
              "CookieChangeEvent": false,
              "CookieDeprecationLabel": false,
              "CookieStore": false,
              "CookieStoreManager": false,
              "CountQueuingStrategy": false,
              "Credential": false,
              "CredentialsContainer": false,
              "CropTarget": false,
              "Crypto": false,
              "CryptoKey": false,
              "CustomElementRegistry": false,
              "CustomEvent": false,
              "CustomStateSet": false,
              "DOMError": false,
              "DOMException": false,
              "DOMImplementation": false,
              "DOMMatrix": false,
              "DOMMatrixReadOnly": false,
              "DOMParser": false,
              "DOMPoint": false,
              "DOMPointReadOnly": false,
              "DOMQuad": false,
              "DOMRect": false,
              "DOMRectList": false,
              "DOMRectReadOnly": false,
              "DOMStringList": false,
              "DOMStringMap": false,
              "DOMTokenList": false,
              "DataTransfer": false,
              "DataTransferItem": false,
              "DataTransferItemList": false,
              "DecompressionStream": false,
              "DelayNode": false,
              "DelegatedInkTrailPresenter": false,
              "DeviceMotionEvent": false,
              "DeviceMotionEventAcceleration": false,
              "DeviceMotionEventRotationRate": false,
              "DeviceOrientationEvent": false,
              "Document": false,
              "DocumentFragment": false,
              "DocumentPictureInPicture": false,
              "DocumentPictureInPictureEvent": false,
              "DocumentTimeline": false,
              "DocumentType": false,
              "DragEvent": false,
              "DynamicsCompressorNode": false,
              "EditContext": false,
              "Element": false,
              "ElementInternals": false,
              "EncodedAudioChunk": false,
              "EncodedVideoChunk": false,
              "ErrorEvent": false,
              "Event": false,
              "EventCounts": false,
              "EventSource": false,
              "EventTarget": false,
              "External": false,
              "EyeDropper": false,
              "FeaturePolicy": false,
              "FederatedCredential": false,
              "Fence": false,
              "FencedFrameConfig": false,
              "FetchLaterResult": false,
              "File": false,
              "FileList": false,
              "FileReader": false,
              "FileSystem": false,
              "FileSystemDirectoryEntry": false,
              "FileSystemDirectoryHandle": false,
              "FileSystemDirectoryReader": false,
              "FileSystemEntry": false,
              "FileSystemFileEntry": false,
              "FileSystemFileHandle": false,
              "FileSystemHandle": false,
              "FileSystemWritableFileStream": false,
              "Float16Array": false,
              "FocusEvent": false,
              "FontData": false,
              "FontFace": false,
              "FontFaceSet": false,
              "FontFaceSetLoadEvent": false,
              "FormData": false,
              "FormDataEvent": false,
              "FragmentDirective": false,
              "GPU": false,
              "GPUAdapter": false,
              "GPUAdapterInfo": false,
              "GPUBindGroup": false,
              "GPUBindGroupLayout": false,
              "GPUBuffer": false,
              "GPUBufferUsage": false,
              "GPUCanvasContext": false,
              "GPUColorWrite": false,
              "GPUCommandBuffer": false,
              "GPUCommandEncoder": false,
              "GPUCompilationInfo": false,
              "GPUCompilationMessage": false,
              "GPUComputePassEncoder": false,
              "GPUComputePipeline": false,
              "GPUDevice": false,
              "GPUDeviceLostInfo": false,
              "GPUError": false,
              "GPUExternalTexture": false,
              "GPUInternalError": false,
              "GPUMapMode": false,
              "GPUOutOfMemoryError": false,
              "GPUPipelineError": false,
              "GPUPipelineLayout": false,
              "GPUQuerySet": false,
              "GPUQueue": false,
              "GPURenderBundle": false,
              "GPURenderBundleEncoder": false,
              "GPURenderPassEncoder": false,
              "GPURenderPipeline": false,
              "GPUSampler": false,
              "GPUShaderModule": false,
              "GPUShaderStage": false,
              "GPUSupportedFeatures": false,
              "GPUSupportedLimits": false,
              "GPUTexture": false,
              "GPUTextureUsage": false,
              "GPUTextureView": false,
              "GPUUncapturedErrorEvent": false,
              "GPUValidationError": false,
              "GainNode": false,
              "Gamepad": false,
              "GamepadAxisMoveEvent": false,
              "GamepadButton": false,
              "GamepadButtonEvent": false,
              "GamepadEvent": false,
              "GamepadHapticActuator": false,
              "GamepadPose": false,
              "Geolocation": false,
              "GeolocationCoordinates": false,
              "GeolocationPosition": false,
              "GeolocationPositionError": false,
              "GravitySensor": false,
              "Gyroscope": false,
              "HID": false,
              "HIDConnectionEvent": false,
              "HIDDevice": false,
              "HIDInputReportEvent": false,
              "HTMLAllCollection": false,
              "HTMLAnchorElement": false,
              "HTMLAreaElement": false,
              "HTMLAudioElement": false,
              "HTMLBRElement": false,
              "HTMLBaseElement": false,
              "HTMLBodyElement": false,
              "HTMLButtonElement": false,
              "HTMLCanvasElement": false,
              "HTMLCollection": false,
              "HTMLDListElement": false,
              "HTMLDataElement": false,
              "HTMLDataListElement": false,
              "HTMLDetailsElement": false,
              "HTMLDialogElement": false,
              "HTMLDirectoryElement": false,
              "HTMLDivElement": false,
              "HTMLDocument": false,
              "HTMLElement": false,
              "HTMLEmbedElement": false,
              "HTMLFencedFrameElement": false,
              "HTMLFieldSetElement": false,
              "HTMLFontElement": false,
              "HTMLFormControlsCollection": false,
              "HTMLFormElement": false,
              "HTMLFrameElement": false,
              "HTMLFrameSetElement": false,
              "HTMLHRElement": false,
              "HTMLHeadElement": false,
              "HTMLHeadingElement": false,
              "HTMLHtmlElement": false,
              "HTMLIFrameElement": false,
              "HTMLImageElement": false,
              "HTMLInputElement": false,
              "HTMLLIElement": false,
              "HTMLLabelElement": false,
              "HTMLLegendElement": false,
              "HTMLLinkElement": false,
              "HTMLMapElement": false,
              "HTMLMarqueeElement": false,
              "HTMLMediaElement": false,
              "HTMLMenuElement": false,
              "HTMLMetaElement": false,
              "HTMLMeterElement": false,
              "HTMLModElement": false,
              "HTMLOListElement": false,
              "HTMLObjectElement": false,
              "HTMLOptGroupElement": false,
              "HTMLOptionElement": false,
              "HTMLOptionsCollection": false,
              "HTMLOutputElement": false,
              "HTMLParagraphElement": false,
              "HTMLParamElement": false,
              "HTMLPictureElement": false,
              "HTMLPreElement": false,
              "HTMLProgressElement": false,
              "HTMLQuoteElement": false,
              "HTMLScriptElement": false,
              "HTMLSelectElement": false,
              "HTMLSlotElement": false,
              "HTMLSourceElement": false,
              "HTMLSpanElement": false,
              "HTMLStyleElement": false,
              "HTMLTableCaptionElement": false,
              "HTMLTableCellElement": false,
              "HTMLTableColElement": false,
              "HTMLTableElement": false,
              "HTMLTableRowElement": false,
              "HTMLTableSectionElement": false,
              "HTMLTemplateElement": false,
              "HTMLTextAreaElement": false,
              "HTMLTimeElement": false,
              "HTMLTitleElement": false,
              "HTMLTrackElement": false,
              "HTMLUListElement": false,
              "HTMLUnknownElement": false,
              "HTMLVideoElement": false,
              "HashChangeEvent": false,
              "Headers": false,
              "Highlight": false,
              "HighlightRegistry": false,
              "History": false,
              "IDBCursor": false,
              "IDBCursorWithValue": false,
              "IDBDatabase": false,
              "IDBFactory": false,
              "IDBIndex": false,
              "IDBKeyRange": false,
              "IDBObjectStore": false,
              "IDBOpenDBRequest": false,
              "IDBRequest": false,
              "IDBTransaction": false,
              "IDBVersionChangeEvent": false,
              "IIRFilterNode": false,
              "IdentityCredential": false,
              "IdentityCredentialError": false,
              "IdentityProvider": false,
              "IdleDeadline": false,
              "IdleDetector": false,
              "Image": false,
              "ImageBitmap": false,
              "ImageBitmapRenderingContext": false,
              "ImageCapture": false,
              "ImageData": false,
              "ImageDecoder": false,
              "ImageTrack": false,
              "ImageTrackList": false,
              "Ink": false,
              "InputDeviceCapabilities": false,
              "InputDeviceInfo": false,
              "InputEvent": false,
              "IntersectionObserver": false,
              "IntersectionObserverEntry": false,
              "Keyboard": false,
              "KeyboardEvent": false,
              "KeyboardLayoutMap": false,
              "KeyframeEffect": false,
              "LargestContentfulPaint": false,
              "LaunchParams": false,
              "LaunchQueue": false,
              "LayoutShift": false,
              "LayoutShiftAttribution": false,
              "LinearAccelerationSensor": false,
              "Location": false,
              "Lock": false,
              "LockManager": false,
              "MIDIAccess": false,
              "MIDIConnectionEvent": false,
              "MIDIInput": false,
              "MIDIInputMap": false,
              "MIDIMessageEvent": false,
              "MIDIOutput": false,
              "MIDIOutputMap": false,
              "MIDIPort": false,
              "MathMLElement": false,
              "MediaCapabilities": false,
              "MediaCapabilitiesInfo": false,
              "MediaDeviceInfo": false,
              "MediaDevices": false,
              "MediaElementAudioSourceNode": false,
              "MediaEncryptedEvent": false,
              "MediaError": false,
              "MediaKeyError": false,
              "MediaKeyMessageEvent": false,
              "MediaKeySession": false,
              "MediaKeyStatusMap": false,
              "MediaKeySystemAccess": false,
              "MediaKeys": false,
              "MediaList": false,
              "MediaMetadata": false,
              "MediaQueryList": false,
              "MediaQueryListEvent": false,
              "MediaRecorder": false,
              "MediaRecorderErrorEvent": false,
              "MediaSession": false,
              "MediaSource": false,
              "MediaSourceHandle": false,
              "MediaStream": false,
              "MediaStreamAudioDestinationNode": false,
              "MediaStreamAudioSourceNode": false,
              "MediaStreamEvent": false,
              "MediaStreamTrack": false,
              "MediaStreamTrackAudioSourceNode": false,
              "MediaStreamTrackAudioStats": false,
              "MediaStreamTrackEvent": false,
              "MediaStreamTrackGenerator": false,
              "MediaStreamTrackProcessor": false,
              "MediaStreamTrackVideoStats": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "MimeType": false,
              "MimeTypeArray": false,
              "ModelGenericSession": false,
              "ModelManager": false,
              "MouseEvent": false,
              "MutationEvent": false,
              "MutationObserver": false,
              "MutationRecord": false,
              "NamedNodeMap": false,
              "NavigateEvent": false,
              "Navigation": false,
              "NavigationActivation": false,
              "NavigationCurrentEntryChangeEvent": false,
              "NavigationDestination": false,
              "NavigationHistoryEntry": false,
              "NavigationPreloadManager": false,
              "NavigationTransition": false,
              "Navigator": false,
              "NavigatorLogin": false,
              "NavigatorManagedData": false,
              "NavigatorUAData": false,
              "NetworkInformation": false,
              "Node": false,
              "NodeFilter": false,
              "NodeIterator": false,
              "NodeList": false,
              "NotRestoredReasonDetails": false,
              "NotRestoredReasons": false,
              "Notification": false,
              "NotifyPaintEvent": false,
              "OTPCredential": false,
              "OfflineAudioCompletionEvent": false,
              "OfflineAudioContext": false,
              "OffscreenCanvas": false,
              "OffscreenCanvasRenderingContext2D": false,
              "Option": false,
              "OrientationSensor": false,
              "OscillatorNode": false,
              "OverconstrainedError": false,
              "PERSISTENT": false,
              "PageRevealEvent": false,
              "PageSwapEvent": false,
              "PageTransitionEvent": false,
              "PannerNode": false,
              "PasswordCredential": false,
              "Path2D": false,
              "PaymentAddress": false,
              "PaymentManager": false,
              "PaymentMethodChangeEvent": false,
              "PaymentRequest": false,
              "PaymentRequestUpdateEvent": false,
              "PaymentResponse": false,
              "Performance": false,
              "PerformanceElementTiming": false,
              "PerformanceEntry": false,
              "PerformanceEventTiming": false,
              "PerformanceLongAnimationFrameTiming": false,
              "PerformanceLongTaskTiming": false,
              "PerformanceMark": false,
              "PerformanceMeasure": false,
              "PerformanceNavigation": false,
              "PerformanceNavigationTiming": false,
              "PerformanceObserver": false,
              "PerformanceObserverEntryList": false,
              "PerformancePaintTiming": false,
              "PerformanceResourceTiming": false,
              "PerformanceScriptTiming": false,
              "PerformanceServerTiming": false,
              "PerformanceTiming": false,
              "PeriodicSyncManager": false,
              "PeriodicWave": false,
              "PermissionStatus": false,
              "Permissions": false,
              "PictureInPictureEvent": false,
              "PictureInPictureWindow": false,
              "Plugin": false,
              "PluginArray": false,
              "PointerEvent": false,
              "PopStateEvent": false,
              "Presentation": false,
              "PresentationAvailability": false,
              "PresentationConnection": false,
              "PresentationConnectionAvailableEvent": false,
              "PresentationConnectionCloseEvent": false,
              "PresentationConnectionList": false,
              "PresentationReceiver": false,
              "PresentationRequest": false,
              "PressureObserver": false,
              "PressureRecord": false,
              "ProcessingInstruction": false,
              "Profiler": false,
              "ProgressEvent": false,
              "PromiseRejectionEvent": false,
              "ProtectedAudience": false,
              "PublicKeyCredential": false,
              "PushManager": false,
              "PushSubscription": false,
              "PushSubscriptionOptions": false,
              "RTCCertificate": false,
              "RTCDTMFSender": false,
              "RTCDTMFToneChangeEvent": false,
              "RTCDataChannel": false,
              "RTCDataChannelEvent": false,
              "RTCDtlsTransport": false,
              "RTCEncodedAudioFrame": false,
              "RTCEncodedVideoFrame": false,
              "RTCError": false,
              "RTCErrorEvent": false,
              "RTCIceCandidate": false,
              "RTCIceTransport": false,
              "RTCPeerConnection": false,
              "RTCPeerConnectionIceErrorEvent": false,
              "RTCPeerConnectionIceEvent": false,
              "RTCRtpReceiver": false,
              "RTCRtpScriptTransform": false,
              "RTCRtpSender": false,
              "RTCRtpTransceiver": false,
              "RTCSctpTransport": false,
              "RTCSessionDescription": false,
              "RTCStatsReport": false,
              "RTCTrackEvent": false,
              "RadioNodeList": false,
              "Range": false,
              "ReadableByteStreamController": false,
              "ReadableStream": false,
              "ReadableStreamBYOBReader": false,
              "ReadableStreamBYOBRequest": false,
              "ReadableStreamDefaultController": false,
              "ReadableStreamDefaultReader": false,
              "RelativeOrientationSensor": false,
              "RemotePlayback": false,
              "ReportingObserver": false,
              "Request": false,
              "ResizeObserver": false,
              "ResizeObserverEntry": false,
              "ResizeObserverSize": false,
              "Response": false,
              "SVGAElement": false,
              "SVGAngle": false,
              "SVGAnimateElement": false,
              "SVGAnimateMotionElement": false,
              "SVGAnimateTransformElement": false,
              "SVGAnimatedAngle": false,
              "SVGAnimatedBoolean": false,
              "SVGAnimatedEnumeration": false,
              "SVGAnimatedInteger": false,
              "SVGAnimatedLength": false,
              "SVGAnimatedLengthList": false,
              "SVGAnimatedNumber": false,
              "SVGAnimatedNumberList": false,
              "SVGAnimatedPreserveAspectRatio": false,
              "SVGAnimatedRect": false,
              "SVGAnimatedString": false,
              "SVGAnimatedTransformList": false,
              "SVGAnimationElement": false,
              "SVGCircleElement": false,
              "SVGClipPathElement": false,
              "SVGComponentTransferFunctionElement": false,
              "SVGDefsElement": false,
              "SVGDescElement": false,
              "SVGElement": false,
              "SVGEllipseElement": false,
              "SVGFEBlendElement": false,
              "SVGFEColorMatrixElement": false,
              "SVGFEComponentTransferElement": false,
              "SVGFECompositeElement": false,
              "SVGFEConvolveMatrixElement": false,
              "SVGFEDiffuseLightingElement": false,
              "SVGFEDisplacementMapElement": false,
              "SVGFEDistantLightElement": false,
              "SVGFEDropShadowElement": false,
              "SVGFEFloodElement": false,
              "SVGFEFuncAElement": false,
              "SVGFEFuncBElement": false,
              "SVGFEFuncGElement": false,
              "SVGFEFuncRElement": false,
              "SVGFEGaussianBlurElement": false,
              "SVGFEImageElement": false,
              "SVGFEMergeElement": false,
              "SVGFEMergeNodeElement": false,
              "SVGFEMorphologyElement": false,
              "SVGFEOffsetElement": false,
              "SVGFEPointLightElement": false,
              "SVGFESpecularLightingElement": false,
              "SVGFESpotLightElement": false,
              "SVGFETileElement": false,
              "SVGFETurbulenceElement": false,
              "SVGFilterElement": false,
              "SVGForeignObjectElement": false,
              "SVGGElement": false,
              "SVGGeometryElement": false,
              "SVGGradientElement": false,
              "SVGGraphicsElement": false,
              "SVGImageElement": false,
              "SVGLength": false,
              "SVGLengthList": false,
              "SVGLineElement": false,
              "SVGLinearGradientElement": false,
              "SVGMPathElement": false,
              "SVGMarkerElement": false,
              "SVGMaskElement": false,
              "SVGMatrix": false,
              "SVGMetadataElement": false,
              "SVGNumber": false,
              "SVGNumberList": false,
              "SVGPathElement": false,
              "SVGPatternElement": false,
              "SVGPoint": false,
              "SVGPointList": false,
              "SVGPolygonElement": false,
              "SVGPolylineElement": false,
              "SVGPreserveAspectRatio": false,
              "SVGRadialGradientElement": false,
              "SVGRect": false,
              "SVGRectElement": false,
              "SVGSVGElement": false,
              "SVGScriptElement": false,
              "SVGSetElement": false,
              "SVGStopElement": false,
              "SVGStringList": false,
              "SVGStyleElement": false,
              "SVGSwitchElement": false,
              "SVGSymbolElement": false,
              "SVGTSpanElement": false,
              "SVGTextContentElement": false,
              "SVGTextElement": false,
              "SVGTextPathElement": false,
              "SVGTextPositioningElement": false,
              "SVGTitleElement": false,
              "SVGTransform": false,
              "SVGTransformList": false,
              "SVGUnitTypes": false,
              "SVGUseElement": false,
              "SVGViewElement": false,
              "Scheduler": false,
              "Scheduling": false,
              "Screen": false,
              "ScreenDetailed": false,
              "ScreenDetails": false,
              "ScreenOrientation": false,
              "ScriptProcessorNode": false,
              "ScrollTimeline": false,
              "SecurityPolicyViolationEvent": false,
              "Selection": false,
              "Sensor": false,
              "SensorErrorEvent": false,
              "Serial": false,
              "SerialPort": false,
              "ServiceWorker": false,
              "ServiceWorkerContainer": false,
              "ServiceWorkerRegistration": false,
              "ShadowRoot": false,
              "SharedStorage": false,
              "SharedStorageWorklet": false,
              "SharedWorker": false,
              "SnapEvent": false,
              "SourceBuffer": false,
              "SourceBufferList": false,
              "SpeechSynthesis": false,
              "SpeechSynthesisErrorEvent": false,
              "SpeechSynthesisEvent": false,
              "SpeechSynthesisUtterance": false,
              "SpeechSynthesisVoice": false,
              "StaticRange": false,
              "StereoPannerNode": false,
              "Storage": false,
              "StorageBucket": false,
              "StorageBucketManager": false,
              "StorageEvent": false,
              "StorageManager": false,
              "StylePropertyMap": false,
              "StylePropertyMapReadOnly": false,
              "StyleSheet": false,
              "StyleSheetList": false,
              "SubmitEvent": false,
              "SubtleCrypto": false,
              "SyncManager": false,
              "TEMPORARY": false,
              "TaskAttributionTiming": false,
              "TaskController": false,
              "TaskPriorityChangeEvent": false,
              "TaskSignal": false,
              "Text": false,
              "TextDecoder": false,
              "TextDecoderStream": false,
              "TextEncoder": false,
              "TextEncoderStream": false,
              "TextEvent": false,
              "TextFormat": false,
              "TextFormatUpdateEvent": false,
              "TextMetrics": false,
              "TextTrack": false,
              "TextTrackCue": false,
              "TextTrackCueList": false,
              "TextTrackList": false,
              "TextUpdateEvent": false,
              "TimeEvent": false,
              "TimeRanges": false,
              "ToggleEvent": false,
              "Touch": false,
              "TouchEvent": false,
              "TouchList": false,
              "TrackEvent": false,
              "TransformStream": false,
              "TransformStreamDefaultController": false,
              "TransitionEvent": false,
              "TreeWalker": false,
              "TrustedHTML": false,
              "TrustedScript": false,
              "TrustedScriptURL": false,
              "TrustedTypePolicy": false,
              "TrustedTypePolicyFactory": false,
              "UIEvent": false,
              "URL": false,
              "URLPattern": false,
              "URLSearchParams": false,
              "USB": false,
              "USBAlternateInterface": false,
              "USBConfiguration": false,
              "USBConnectionEvent": false,
              "USBDevice": false,
              "USBEndpoint": false,
              "USBInTransferResult": false,
              "USBInterface": false,
              "USBIsochronousInTransferPacket": false,
              "USBIsochronousInTransferResult": false,
              "USBIsochronousOutTransferPacket": false,
              "USBIsochronousOutTransferResult": false,
              "USBOutTransferResult": false,
              "UserActivation": false,
              "VTTCue": false,
              "VTTRegion": false,
              "ValidityState": false,
              "VideoColorSpace": false,
              "VideoDecoder": false,
              "VideoEncoder": false,
              "VideoFrame": false,
              "VideoPlaybackQuality": false,
              "ViewTimeline": false,
              "ViewTransition": false,
              "ViewTransitionTypeSet": false,
              "VirtualKeyboard": false,
              "VirtualKeyboardGeometryChangeEvent": false,
              "VisibilityStateEntry": false,
              "VisualViewport": false,
              "WGSLLanguageFeatures": false,
              "WakeLock": false,
              "WakeLockSentinel": false,
              "WaveShaperNode": false,
              "WebAssembly": false,
              "WebGL2RenderingContext": false,
              "WebGLActiveInfo": false,
              "WebGLBuffer": false,
              "WebGLContextEvent": false,
              "WebGLFramebuffer": false,
              "WebGLObject": false,
              "WebGLProgram": false,
              "WebGLQuery": false,
              "WebGLRenderbuffer": false,
              "WebGLRenderingContext": false,
              "WebGLSampler": false,
              "WebGLShader": false,
              "WebGLShaderPrecisionFormat": false,
              "WebGLSync": false,
              "WebGLTexture": false,
              "WebGLTransformFeedback": false,
              "WebGLUniformLocation": false,
              "WebGLVertexArrayObject": false,
              "WebSocket": false,
              "WebSocketError": false,
              "WebSocketStream": false,
              "WebTransport": false,
              "WebTransportBidirectionalStream": false,
              "WebTransportDatagramDuplexStream": false,
              "WebTransportError": false,
              "WebTransportReceiveStream": false,
              "WebTransportSendStream": false,
              "WheelEvent": false,
              "Window": false,
              "WindowControlsOverlay": false,
              "WindowControlsOverlayGeometryChangeEvent": false,
              "Worker": false,
              "Worklet": false,
              "WorkletGlobalScope": false,
              "WritableStream": false,
              "WritableStreamDefaultController": false,
              "WritableStreamDefaultWriter": false,
              "XMLDocument": false,
              "XMLHttpRequest": false,
              "XMLHttpRequestEventTarget": false,
              "XMLHttpRequestUpload": false,
              "XMLSerializer": false,
              "XPathEvaluator": false,
              "XPathExpression": false,
              "XPathResult": false,
              "XRAnchor": false,
              "XRAnchorSet": false,
              "XRBoundedReferenceSpace": false,
              "XRCPUDepthInformation": false,
              "XRCamera": false,
              "XRDOMOverlayState": false,
              "XRDepthInformation": false,
              "XRFrame": false,
              "XRHand": false,
              "XRHitTestResult": false,
              "XRHitTestSource": false,
              "XRInputSource": false,
              "XRInputSourceArray": false,
              "XRInputSourceEvent": false,
              "XRInputSourcesChangeEvent": false,
              "XRJointPose": false,
              "XRJointSpace": false,
              "XRLayer": false,
              "XRLightEstimate": false,
              "XRLightProbe": false,
              "XRPose": false,
              "XRRay": false,
              "XRReferenceSpace": false,
              "XRReferenceSpaceEvent": false,
              "XRRenderState": false,
              "XRRigidTransform": false,
              "XRSession": false,
              "XRSessionEvent": false,
              "XRSpace": false,
              "XRSystem": false,
              "XRTransientInputHitTestResult": false,
              "XRTransientInputHitTestSource": false,
              "XRView": false,
              "XRViewerPose": false,
              "XRViewport": false,
              "XRWebGLBinding": false,
              "XRWebGLDepthInformation": false,
              "XRWebGLLayer": false,
              "XSLTProcessor": false,
              "addEventListener": false,
              "ai": false,
              "alert": false,
              "atob": false,
              "blur": false,
              "btoa": false,
              "caches": false,
              "cancelAnimationFrame": false,
              "cancelIdleCallback": false,
              "clearInterval": false,
              "clearTimeout": false,
              "clientInformation": false,
              "close": false,
              "closed": false,
              "confirm": false,
              "console": false,
              "cookieStore": false,
              "createImageBitmap": false,
              "credentialless": false,
              "crossOriginIsolated": false,
              "crypto": false,
              "currentFrame": false,
              "currentTime": false,
              "customElements": false,
              "devicePixelRatio": false,
              "dispatchEvent": false,
              "document": false,
              "documentPictureInPicture": false,
              "event": false,
              "external": false,
              "fence": false,
              "fetch": false,
              "fetchLater": false,
              "find": false,
              "focus": false,
              "frameElement": false,
              "frames": false,
              "getComputedStyle": false,
              "getScreenDetails": false,
              "getSelection": false,
              "history": false,
              "indexedDB": false,
              "innerHeight": false,
              "innerWidth": false,
              "isSecureContext": false,
              "launchQueue": false,
              "length": false,
              "localStorage": false,
              "location": true,
              "locationbar": false,
              "matchMedia": false,
              "menubar": false,
              "model": false,
              "moveBy": false,
              "moveTo": false,
              "name": false,
              "navigation": false,
              "navigator": false,
              "offscreenBuffering": false,
              "onabort": true,
              "onafterprint": true,
              "onanimationcancel": true,
              "onanimationend": true,
              "onanimationiteration": true,
              "onanimationstart": true,
              "onappinstalled": true,
              "onauxclick": true,
              "onbeforeinput": true,
              "onbeforeinstallprompt": true,
              "onbeforematch": true,
              "onbeforeprint": true,
              "onbeforetoggle": true,
              "onbeforeunload": true,
              "onbeforexrselect": true,
              "onblur": true,
              "oncancel": true,
              "oncanplay": true,
              "oncanplaythrough": true,
              "onchange": true,
              "onclick": true,
              "onclose": true,
              "oncontentvisibilityautostatechange": true,
              "oncontextlost": true,
              "oncontextmenu": true,
              "oncontextrestored": true,
              "oncopy": true,
              "oncuechange": true,
              "oncut": true,
              "ondblclick": true,
              "ondevicemotion": true,
              "ondeviceorientation": true,
              "ondeviceorientationabsolute": true,
              "ondrag": true,
              "ondragend": true,
              "ondragenter": true,
              "ondragleave": true,
              "ondragover": true,
              "ondragstart": true,
              "ondrop": true,
              "ondurationchange": true,
              "onemptied": true,
              "onended": true,
              "onerror": true,
              "onfocus": true,
              "onformdata": true,
              "ongamepadconnected": true,
              "ongamepaddisconnected": true,
              "ongotpointercapture": true,
              "onhashchange": true,
              "oninput": true,
              "oninvalid": true,
              "onkeydown": true,
              "onkeypress": true,
              "onkeyup": true,
              "onlanguagechange": true,
              "onload": true,
              "onloadeddata": true,
              "onloadedmetadata": true,
              "onloadstart": true,
              "onlostpointercapture": true,
              "onmessage": true,
              "onmessageerror": true,
              "onmousedown": true,
              "onmouseenter": true,
              "onmouseleave": true,
              "onmousemove": true,
              "onmouseout": true,
              "onmouseover": true,
              "onmouseup": true,
              "onmousewheel": true,
              "onoffline": true,
              "ononline": true,
              "onpagehide": true,
              "onpagereveal": true,
              "onpageshow": true,
              "onpageswap": true,
              "onpaste": true,
              "onpause": true,
              "onplay": true,
              "onplaying": true,
              "onpointercancel": true,
              "onpointerdown": true,
              "onpointerenter": true,
              "onpointerleave": true,
              "onpointermove": true,
              "onpointerout": true,
              "onpointerover": true,
              "onpointerrawupdate": true,
              "onpointerup": true,
              "onpopstate": true,
              "onprogress": true,
              "onratechange": true,
              "onrejectionhandled": true,
              "onreset": true,
              "onresize": true,
              "onscroll": true,
              "onscrollend": true,
              "onscrollsnapchange": true,
              "onscrollsnapchanging": true,
              "onsearch": true,
              "onsecuritypolicyviolation": true,
              "onseeked": true,
              "onseeking": true,
              "onselect": true,
              "onselectionchange": true,
              "onselectstart": true,
              "onslotchange": true,
              "onstalled": true,
              "onstorage": true,
              "onsubmit": true,
              "onsuspend": true,
              "ontimeupdate": true,
              "ontoggle": true,
              "ontransitioncancel": true,
              "ontransitionend": true,
              "ontransitionrun": true,
              "ontransitionstart": true,
              "onunhandledrejection": true,
              "onunload": true,
              "onvolumechange": true,
              "onwaiting": true,
              "onwheel": true,
              "open": false,
              "opener": false,
              "origin": false,
              "originAgentCluster": false,
              "outerHeight": false,
              "outerWidth": false,
              "pageXOffset": false,
              "pageYOffset": false,
              "parent": false,
              "performance": false,
              "personalbar": false,
              "postMessage": false,
              "print": false,
              "prompt": false,
              "queryLocalFonts": false,
              "queueMicrotask": false,
              "registerProcessor": false,
              "removeEventListener": false,
              "reportError": false,
              "requestAnimationFrame": false,
              "requestIdleCallback": false,
              "resizeBy": false,
              "resizeTo": false,
              "sampleRate": false,
              "scheduler": false,
              "screen": false,
              "screenLeft": false,
              "screenTop": false,
              "screenX": false,
              "screenY": false,
              "scroll": false,
              "scrollBy": false,
              "scrollTo": false,
              "scrollX": false,
              "scrollY": false,
              "scrollbars": false,
              "self": false,
              "sessionStorage": false,
              "setInterval": false,
              "setTimeout": false,
              "sharedStorage": false,
              "showDirectoryPicker": false,
              "showOpenFilePicker": false,
              "showSaveFilePicker": false,
              "speechSynthesis": false,
              "status": false,
              "statusbar": false,
              "stop": false,
              "structuredClone": false,
              "styleMedia": false,
              "toolbar": false,
              "top": false,
              "trustedTypes": false,
              "visualViewport": false,
              "window": false,
            },
          },
          "name": "compat/flat/recommended",
          "plugins": {
            "compat": {
              "configs": [Circular],
              "meta": {
                "name": "eslint-plugin-compat",
                "version": "6.0.2",
              },
              "rules": {
                "compat": {
                  "create": [Function],
                  "meta": {
                    "docs": {
                      "category": "Compatibility",
                      "description": "Ensure cross-browser API compatibility",
                      "recommended": true,
                      "url": "https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md",
                    },
                    "schema": [
                      {
                        "type": "string",
                      },
                    ],
                    "type": "problem",
                  },
                },
              },
            },
          },
          "rules": {
            "compat/compat": "error",
          },
        },
        "recommended": {
          "env": {
            "browser": true,
          },
          "plugins": [
            "compat",
          ],
          "rules": {
            "compat/compat": "error",
          },
        },
      },
      "configs": {
        "flat/recommended": {
          "languageOptions": {
            "globals": {
              "AI": false,
              "AITextSession": false,
              "AbortController": false,
              "AbortSignal": false,
              "AbsoluteOrientationSensor": false,
              "AbstractRange": false,
              "Accelerometer": false,
              "AnalyserNode": false,
              "Animation": false,
              "AnimationEffect": false,
              "AnimationEvent": false,
              "AnimationPlaybackEvent": false,
              "AnimationTimeline": false,
              "Attr": false,
              "Audio": false,
              "AudioBuffer": false,
              "AudioBufferSourceNode": false,
              "AudioContext": false,
              "AudioData": false,
              "AudioDecoder": false,
              "AudioDestinationNode": false,
              "AudioEncoder": false,
              "AudioListener": false,
              "AudioNode": false,
              "AudioParam": false,
              "AudioParamMap": false,
              "AudioProcessingEvent": false,
              "AudioScheduledSourceNode": false,
              "AudioSinkInfo": false,
              "AudioWorklet": false,
              "AudioWorkletGlobalScope": false,
              "AudioWorkletNode": false,
              "AudioWorkletProcessor": false,
              "AuthenticatorAssertionResponse": false,
              "AuthenticatorAttestationResponse": false,
              "AuthenticatorResponse": false,
              "BackgroundFetchManager": false,
              "BackgroundFetchRecord": false,
              "BackgroundFetchRegistration": false,
              "BarProp": false,
              "BarcodeDetector": false,
              "BaseAudioContext": false,
              "BatteryManager": false,
              "BeforeUnloadEvent": false,
              "BiquadFilterNode": false,
              "Blob": false,
              "BlobEvent": false,
              "Bluetooth": false,
              "BluetoothCharacteristicProperties": false,
              "BluetoothDevice": false,
              "BluetoothRemoteGATTCharacteristic": false,
              "BluetoothRemoteGATTDescriptor": false,
              "BluetoothRemoteGATTServer": false,
              "BluetoothRemoteGATTService": false,
              "BluetoothUUID": false,
              "BroadcastChannel": false,
              "BrowserCaptureMediaStreamTrack": false,
              "ByteLengthQueuingStrategy": false,
              "CDATASection": false,
              "CSS": false,
              "CSSAnimation": false,
              "CSSConditionRule": false,
              "CSSContainerRule": false,
              "CSSCounterStyleRule": false,
              "CSSFontFaceRule": false,
              "CSSFontFeatureValuesRule": false,
              "CSSFontPaletteValuesRule": false,
              "CSSGroupingRule": false,
              "CSSImageValue": false,
              "CSSImportRule": false,
              "CSSKeyframeRule": false,
              "CSSKeyframesRule": false,
              "CSSKeywordValue": false,
              "CSSLayerBlockRule": false,
              "CSSLayerStatementRule": false,
              "CSSMarginRule": false,
              "CSSMathClamp": false,
              "CSSMathInvert": false,
              "CSSMathMax": false,
              "CSSMathMin": false,
              "CSSMathNegate": false,
              "CSSMathProduct": false,
              "CSSMathSum": false,
              "CSSMathValue": false,
              "CSSMatrixComponent": false,
              "CSSMediaRule": false,
              "CSSNamespaceRule": false,
              "CSSNestedDeclarations": false,
              "CSSNumericArray": false,
              "CSSNumericValue": false,
              "CSSPageDescriptors": false,
              "CSSPageRule": false,
              "CSSPerspective": false,
              "CSSPositionTryDescriptors": false,
              "CSSPositionTryRule": false,
              "CSSPositionValue": false,
              "CSSPropertyRule": false,
              "CSSRotate": false,
              "CSSRule": false,
              "CSSRuleList": false,
              "CSSScale": false,
              "CSSScopeRule": false,
              "CSSSkew": false,
              "CSSSkewX": false,
              "CSSSkewY": false,
              "CSSStartingStyleRule": false,
              "CSSStyleDeclaration": false,
              "CSSStyleRule": false,
              "CSSStyleSheet": false,
              "CSSStyleValue": false,
              "CSSSupportsRule": false,
              "CSSTransformComponent": false,
              "CSSTransformValue": false,
              "CSSTransition": false,
              "CSSTranslate": false,
              "CSSUnitValue": false,
              "CSSUnparsedValue": false,
              "CSSVariableReferenceValue": false,
              "CSSViewTransitionRule": false,
              "Cache": false,
              "CacheStorage": false,
              "CanvasCaptureMediaStream": false,
              "CanvasCaptureMediaStreamTrack": false,
              "CanvasGradient": false,
              "CanvasPattern": false,
              "CanvasRenderingContext2D": false,
              "CaptureController": false,
              "CaretPosition": false,
              "ChannelMergerNode": false,
              "ChannelSplitterNode": false,
              "ChapterInformation": false,
              "CharacterBoundsUpdateEvent": false,
              "CharacterData": false,
              "Clipboard": false,
              "ClipboardEvent": false,
              "ClipboardItem": false,
              "CloseEvent": false,
              "CloseWatcher": false,
              "Comment": false,
              "CompositionEvent": false,
              "CompressionStream": false,
              "ConstantSourceNode": false,
              "ContentVisibilityAutoStateChangeEvent": false,
              "ConvolverNode": false,
              "CookieChangeEvent": false,
              "CookieDeprecationLabel": false,
              "CookieStore": false,
              "CookieStoreManager": false,
              "CountQueuingStrategy": false,
              "Credential": false,
              "CredentialsContainer": false,
              "CropTarget": false,
              "Crypto": false,
              "CryptoKey": false,
              "CustomElementRegistry": false,
              "CustomEvent": false,
              "CustomStateSet": false,
              "DOMError": false,
              "DOMException": false,
              "DOMImplementation": false,
              "DOMMatrix": false,
              "DOMMatrixReadOnly": false,
              "DOMParser": false,
              "DOMPoint": false,
              "DOMPointReadOnly": false,
              "DOMQuad": false,
              "DOMRect": false,
              "DOMRectList": false,
              "DOMRectReadOnly": false,
              "DOMStringList": false,
              "DOMStringMap": false,
              "DOMTokenList": false,
              "DataTransfer": false,
              "DataTransferItem": false,
              "DataTransferItemList": false,
              "DecompressionStream": false,
              "DelayNode": false,
              "DelegatedInkTrailPresenter": false,
              "DeviceMotionEvent": false,
              "DeviceMotionEventAcceleration": false,
              "DeviceMotionEventRotationRate": false,
              "DeviceOrientationEvent": false,
              "Document": false,
              "DocumentFragment": false,
              "DocumentPictureInPicture": false,
              "DocumentPictureInPictureEvent": false,
              "DocumentTimeline": false,
              "DocumentType": false,
              "DragEvent": false,
              "DynamicsCompressorNode": false,
              "EditContext": false,
              "Element": false,
              "ElementInternals": false,
              "EncodedAudioChunk": false,
              "EncodedVideoChunk": false,
              "ErrorEvent": false,
              "Event": false,
              "EventCounts": false,
              "EventSource": false,
              "EventTarget": false,
              "External": false,
              "EyeDropper": false,
              "FeaturePolicy": false,
              "FederatedCredential": false,
              "Fence": false,
              "FencedFrameConfig": false,
              "FetchLaterResult": false,
              "File": false,
              "FileList": false,
              "FileReader": false,
              "FileSystem": false,
              "FileSystemDirectoryEntry": false,
              "FileSystemDirectoryHandle": false,
              "FileSystemDirectoryReader": false,
              "FileSystemEntry": false,
              "FileSystemFileEntry": false,
              "FileSystemFileHandle": false,
              "FileSystemHandle": false,
              "FileSystemWritableFileStream": false,
              "Float16Array": false,
              "FocusEvent": false,
              "FontData": false,
              "FontFace": false,
              "FontFaceSet": false,
              "FontFaceSetLoadEvent": false,
              "FormData": false,
              "FormDataEvent": false,
              "FragmentDirective": false,
              "GPU": false,
              "GPUAdapter": false,
              "GPUAdapterInfo": false,
              "GPUBindGroup": false,
              "GPUBindGroupLayout": false,
              "GPUBuffer": false,
              "GPUBufferUsage": false,
              "GPUCanvasContext": false,
              "GPUColorWrite": false,
              "GPUCommandBuffer": false,
              "GPUCommandEncoder": false,
              "GPUCompilationInfo": false,
              "GPUCompilationMessage": false,
              "GPUComputePassEncoder": false,
              "GPUComputePipeline": false,
              "GPUDevice": false,
              "GPUDeviceLostInfo": false,
              "GPUError": false,
              "GPUExternalTexture": false,
              "GPUInternalError": false,
              "GPUMapMode": false,
              "GPUOutOfMemoryError": false,
              "GPUPipelineError": false,
              "GPUPipelineLayout": false,
              "GPUQuerySet": false,
              "GPUQueue": false,
              "GPURenderBundle": false,
              "GPURenderBundleEncoder": false,
              "GPURenderPassEncoder": false,
              "GPURenderPipeline": false,
              "GPUSampler": false,
              "GPUShaderModule": false,
              "GPUShaderStage": false,
              "GPUSupportedFeatures": false,
              "GPUSupportedLimits": false,
              "GPUTexture": false,
              "GPUTextureUsage": false,
              "GPUTextureView": false,
              "GPUUncapturedErrorEvent": false,
              "GPUValidationError": false,
              "GainNode": false,
              "Gamepad": false,
              "GamepadAxisMoveEvent": false,
              "GamepadButton": false,
              "GamepadButtonEvent": false,
              "GamepadEvent": false,
              "GamepadHapticActuator": false,
              "GamepadPose": false,
              "Geolocation": false,
              "GeolocationCoordinates": false,
              "GeolocationPosition": false,
              "GeolocationPositionError": false,
              "GravitySensor": false,
              "Gyroscope": false,
              "HID": false,
              "HIDConnectionEvent": false,
              "HIDDevice": false,
              "HIDInputReportEvent": false,
              "HTMLAllCollection": false,
              "HTMLAnchorElement": false,
              "HTMLAreaElement": false,
              "HTMLAudioElement": false,
              "HTMLBRElement": false,
              "HTMLBaseElement": false,
              "HTMLBodyElement": false,
              "HTMLButtonElement": false,
              "HTMLCanvasElement": false,
              "HTMLCollection": false,
              "HTMLDListElement": false,
              "HTMLDataElement": false,
              "HTMLDataListElement": false,
              "HTMLDetailsElement": false,
              "HTMLDialogElement": false,
              "HTMLDirectoryElement": false,
              "HTMLDivElement": false,
              "HTMLDocument": false,
              "HTMLElement": false,
              "HTMLEmbedElement": false,
              "HTMLFencedFrameElement": false,
              "HTMLFieldSetElement": false,
              "HTMLFontElement": false,
              "HTMLFormControlsCollection": false,
              "HTMLFormElement": false,
              "HTMLFrameElement": false,
              "HTMLFrameSetElement": false,
              "HTMLHRElement": false,
              "HTMLHeadElement": false,
              "HTMLHeadingElement": false,
              "HTMLHtmlElement": false,
              "HTMLIFrameElement": false,
              "HTMLImageElement": false,
              "HTMLInputElement": false,
              "HTMLLIElement": false,
              "HTMLLabelElement": false,
              "HTMLLegendElement": false,
              "HTMLLinkElement": false,
              "HTMLMapElement": false,
              "HTMLMarqueeElement": false,
              "HTMLMediaElement": false,
              "HTMLMenuElement": false,
              "HTMLMetaElement": false,
              "HTMLMeterElement": false,
              "HTMLModElement": false,
              "HTMLOListElement": false,
              "HTMLObjectElement": false,
              "HTMLOptGroupElement": false,
              "HTMLOptionElement": false,
              "HTMLOptionsCollection": false,
              "HTMLOutputElement": false,
              "HTMLParagraphElement": false,
              "HTMLParamElement": false,
              "HTMLPictureElement": false,
              "HTMLPreElement": false,
              "HTMLProgressElement": false,
              "HTMLQuoteElement": false,
              "HTMLScriptElement": false,
              "HTMLSelectElement": false,
              "HTMLSlotElement": false,
              "HTMLSourceElement": false,
              "HTMLSpanElement": false,
              "HTMLStyleElement": false,
              "HTMLTableCaptionElement": false,
              "HTMLTableCellElement": false,
              "HTMLTableColElement": false,
              "HTMLTableElement": false,
              "HTMLTableRowElement": false,
              "HTMLTableSectionElement": false,
              "HTMLTemplateElement": false,
              "HTMLTextAreaElement": false,
              "HTMLTimeElement": false,
              "HTMLTitleElement": false,
              "HTMLTrackElement": false,
              "HTMLUListElement": false,
              "HTMLUnknownElement": false,
              "HTMLVideoElement": false,
              "HashChangeEvent": false,
              "Headers": false,
              "Highlight": false,
              "HighlightRegistry": false,
              "History": false,
              "IDBCursor": false,
              "IDBCursorWithValue": false,
              "IDBDatabase": false,
              "IDBFactory": false,
              "IDBIndex": false,
              "IDBKeyRange": false,
              "IDBObjectStore": false,
              "IDBOpenDBRequest": false,
              "IDBRequest": false,
              "IDBTransaction": false,
              "IDBVersionChangeEvent": false,
              "IIRFilterNode": false,
              "IdentityCredential": false,
              "IdentityCredentialError": false,
              "IdentityProvider": false,
              "IdleDeadline": false,
              "IdleDetector": false,
              "Image": false,
              "ImageBitmap": false,
              "ImageBitmapRenderingContext": false,
              "ImageCapture": false,
              "ImageData": false,
              "ImageDecoder": false,
              "ImageTrack": false,
              "ImageTrackList": false,
              "Ink": false,
              "InputDeviceCapabilities": false,
              "InputDeviceInfo": false,
              "InputEvent": false,
              "IntersectionObserver": false,
              "IntersectionObserverEntry": false,
              "Keyboard": false,
              "KeyboardEvent": false,
              "KeyboardLayoutMap": false,
              "KeyframeEffect": false,
              "LargestContentfulPaint": false,
              "LaunchParams": false,
              "LaunchQueue": false,
              "LayoutShift": false,
              "LayoutShiftAttribution": false,
              "LinearAccelerationSensor": false,
              "Location": false,
              "Lock": false,
              "LockManager": false,
              "MIDIAccess": false,
              "MIDIConnectionEvent": false,
              "MIDIInput": false,
              "MIDIInputMap": false,
              "MIDIMessageEvent": false,
              "MIDIOutput": false,
              "MIDIOutputMap": false,
              "MIDIPort": false,
              "MathMLElement": false,
              "MediaCapabilities": false,
              "MediaCapabilitiesInfo": false,
              "MediaDeviceInfo": false,
              "MediaDevices": false,
              "MediaElementAudioSourceNode": false,
              "MediaEncryptedEvent": false,
              "MediaError": false,
              "MediaKeyError": false,
              "MediaKeyMessageEvent": false,
              "MediaKeySession": false,
              "MediaKeyStatusMap": false,
              "MediaKeySystemAccess": false,
              "MediaKeys": false,
              "MediaList": false,
              "MediaMetadata": false,
              "MediaQueryList": false,
              "MediaQueryListEvent": false,
              "MediaRecorder": false,
              "MediaRecorderErrorEvent": false,
              "MediaSession": false,
              "MediaSource": false,
              "MediaSourceHandle": false,
              "MediaStream": false,
              "MediaStreamAudioDestinationNode": false,
              "MediaStreamAudioSourceNode": false,
              "MediaStreamEvent": false,
              "MediaStreamTrack": false,
              "MediaStreamTrackAudioSourceNode": false,
              "MediaStreamTrackAudioStats": false,
              "MediaStreamTrackEvent": false,
              "MediaStreamTrackGenerator": false,
              "MediaStreamTrackProcessor": false,
              "MediaStreamTrackVideoStats": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "MimeType": false,
              "MimeTypeArray": false,
              "ModelGenericSession": false,
              "ModelManager": false,
              "MouseEvent": false,
              "MutationEvent": false,
              "MutationObserver": false,
              "MutationRecord": false,
              "NamedNodeMap": false,
              "NavigateEvent": false,
              "Navigation": false,
              "NavigationActivation": false,
              "NavigationCurrentEntryChangeEvent": false,
              "NavigationDestination": false,
              "NavigationHistoryEntry": false,
              "NavigationPreloadManager": false,
              "NavigationTransition": false,
              "Navigator": false,
              "NavigatorLogin": false,
              "NavigatorManagedData": false,
              "NavigatorUAData": false,
              "NetworkInformation": false,
              "Node": false,
              "NodeFilter": false,
              "NodeIterator": false,
              "NodeList": false,
              "NotRestoredReasonDetails": false,
              "NotRestoredReasons": false,
              "Notification": false,
              "NotifyPaintEvent": false,
              "OTPCredential": false,
              "OfflineAudioCompletionEvent": false,
              "OfflineAudioContext": false,
              "OffscreenCanvas": false,
              "OffscreenCanvasRenderingContext2D": false,
              "Option": false,
              "OrientationSensor": false,
              "OscillatorNode": false,
              "OverconstrainedError": false,
              "PERSISTENT": false,
              "PageRevealEvent": false,
              "PageSwapEvent": false,
              "PageTransitionEvent": false,
              "PannerNode": false,
              "PasswordCredential": false,
              "Path2D": false,
              "PaymentAddress": false,
              "PaymentManager": false,
              "PaymentMethodChangeEvent": false,
              "PaymentRequest": false,
              "PaymentRequestUpdateEvent": false,
              "PaymentResponse": false,
              "Performance": false,
              "PerformanceElementTiming": false,
              "PerformanceEntry": false,
              "PerformanceEventTiming": false,
              "PerformanceLongAnimationFrameTiming": false,
              "PerformanceLongTaskTiming": false,
              "PerformanceMark": false,
              "PerformanceMeasure": false,
              "PerformanceNavigation": false,
              "PerformanceNavigationTiming": false,
              "PerformanceObserver": false,
              "PerformanceObserverEntryList": false,
              "PerformancePaintTiming": false,
              "PerformanceResourceTiming": false,
              "PerformanceScriptTiming": false,
              "PerformanceServerTiming": false,
              "PerformanceTiming": false,
              "PeriodicSyncManager": false,
              "PeriodicWave": false,
              "PermissionStatus": false,
              "Permissions": false,
              "PictureInPictureEvent": false,
              "PictureInPictureWindow": false,
              "Plugin": false,
              "PluginArray": false,
              "PointerEvent": false,
              "PopStateEvent": false,
              "Presentation": false,
              "PresentationAvailability": false,
              "PresentationConnection": false,
              "PresentationConnectionAvailableEvent": false,
              "PresentationConnectionCloseEvent": false,
              "PresentationConnectionList": false,
              "PresentationReceiver": false,
              "PresentationRequest": false,
              "PressureObserver": false,
              "PressureRecord": false,
              "ProcessingInstruction": false,
              "Profiler": false,
              "ProgressEvent": false,
              "PromiseRejectionEvent": false,
              "ProtectedAudience": false,
              "PublicKeyCredential": false,
              "PushManager": false,
              "PushSubscription": false,
              "PushSubscriptionOptions": false,
              "RTCCertificate": false,
              "RTCDTMFSender": false,
              "RTCDTMFToneChangeEvent": false,
              "RTCDataChannel": false,
              "RTCDataChannelEvent": false,
              "RTCDtlsTransport": false,
              "RTCEncodedAudioFrame": false,
              "RTCEncodedVideoFrame": false,
              "RTCError": false,
              "RTCErrorEvent": false,
              "RTCIceCandidate": false,
              "RTCIceTransport": false,
              "RTCPeerConnection": false,
              "RTCPeerConnectionIceErrorEvent": false,
              "RTCPeerConnectionIceEvent": false,
              "RTCRtpReceiver": false,
              "RTCRtpScriptTransform": false,
              "RTCRtpSender": false,
              "RTCRtpTransceiver": false,
              "RTCSctpTransport": false,
              "RTCSessionDescription": false,
              "RTCStatsReport": false,
              "RTCTrackEvent": false,
              "RadioNodeList": false,
              "Range": false,
              "ReadableByteStreamController": false,
              "ReadableStream": false,
              "ReadableStreamBYOBReader": false,
              "ReadableStreamBYOBRequest": false,
              "ReadableStreamDefaultController": false,
              "ReadableStreamDefaultReader": false,
              "RelativeOrientationSensor": false,
              "RemotePlayback": false,
              "ReportingObserver": false,
              "Request": false,
              "ResizeObserver": false,
              "ResizeObserverEntry": false,
              "ResizeObserverSize": false,
              "Response": false,
              "SVGAElement": false,
              "SVGAngle": false,
              "SVGAnimateElement": false,
              "SVGAnimateMotionElement": false,
              "SVGAnimateTransformElement": false,
              "SVGAnimatedAngle": false,
              "SVGAnimatedBoolean": false,
              "SVGAnimatedEnumeration": false,
              "SVGAnimatedInteger": false,
              "SVGAnimatedLength": false,
              "SVGAnimatedLengthList": false,
              "SVGAnimatedNumber": false,
              "SVGAnimatedNumberList": false,
              "SVGAnimatedPreserveAspectRatio": false,
              "SVGAnimatedRect": false,
              "SVGAnimatedString": false,
              "SVGAnimatedTransformList": false,
              "SVGAnimationElement": false,
              "SVGCircleElement": false,
              "SVGClipPathElement": false,
              "SVGComponentTransferFunctionElement": false,
              "SVGDefsElement": false,
              "SVGDescElement": false,
              "SVGElement": false,
              "SVGEllipseElement": false,
              "SVGFEBlendElement": false,
              "SVGFEColorMatrixElement": false,
              "SVGFEComponentTransferElement": false,
              "SVGFECompositeElement": false,
              "SVGFEConvolveMatrixElement": false,
              "SVGFEDiffuseLightingElement": false,
              "SVGFEDisplacementMapElement": false,
              "SVGFEDistantLightElement": false,
              "SVGFEDropShadowElement": false,
              "SVGFEFloodElement": false,
              "SVGFEFuncAElement": false,
              "SVGFEFuncBElement": false,
              "SVGFEFuncGElement": false,
              "SVGFEFuncRElement": false,
              "SVGFEGaussianBlurElement": false,
              "SVGFEImageElement": false,
              "SVGFEMergeElement": false,
              "SVGFEMergeNodeElement": false,
              "SVGFEMorphologyElement": false,
              "SVGFEOffsetElement": false,
              "SVGFEPointLightElement": false,
              "SVGFESpecularLightingElement": false,
              "SVGFESpotLightElement": false,
              "SVGFETileElement": false,
              "SVGFETurbulenceElement": false,
              "SVGFilterElement": false,
              "SVGForeignObjectElement": false,
              "SVGGElement": false,
              "SVGGeometryElement": false,
              "SVGGradientElement": false,
              "SVGGraphicsElement": false,
              "SVGImageElement": false,
              "SVGLength": false,
              "SVGLengthList": false,
              "SVGLineElement": false,
              "SVGLinearGradientElement": false,
              "SVGMPathElement": false,
              "SVGMarkerElement": false,
              "SVGMaskElement": false,
              "SVGMatrix": false,
              "SVGMetadataElement": false,
              "SVGNumber": false,
              "SVGNumberList": false,
              "SVGPathElement": false,
              "SVGPatternElement": false,
              "SVGPoint": false,
              "SVGPointList": false,
              "SVGPolygonElement": false,
              "SVGPolylineElement": false,
              "SVGPreserveAspectRatio": false,
              "SVGRadialGradientElement": false,
              "SVGRect": false,
              "SVGRectElement": false,
              "SVGSVGElement": false,
              "SVGScriptElement": false,
              "SVGSetElement": false,
              "SVGStopElement": false,
              "SVGStringList": false,
              "SVGStyleElement": false,
              "SVGSwitchElement": false,
              "SVGSymbolElement": false,
              "SVGTSpanElement": false,
              "SVGTextContentElement": false,
              "SVGTextElement": false,
              "SVGTextPathElement": false,
              "SVGTextPositioningElement": false,
              "SVGTitleElement": false,
              "SVGTransform": false,
              "SVGTransformList": false,
              "SVGUnitTypes": false,
              "SVGUseElement": false,
              "SVGViewElement": false,
              "Scheduler": false,
              "Scheduling": false,
              "Screen": false,
              "ScreenDetailed": false,
              "ScreenDetails": false,
              "ScreenOrientation": false,
              "ScriptProcessorNode": false,
              "ScrollTimeline": false,
              "SecurityPolicyViolationEvent": false,
              "Selection": false,
              "Sensor": false,
              "SensorErrorEvent": false,
              "Serial": false,
              "SerialPort": false,
              "ServiceWorker": false,
              "ServiceWorkerContainer": false,
              "ServiceWorkerRegistration": false,
              "ShadowRoot": false,
              "SharedStorage": false,
              "SharedStorageWorklet": false,
              "SharedWorker": false,
              "SnapEvent": false,
              "SourceBuffer": false,
              "SourceBufferList": false,
              "SpeechSynthesis": false,
              "SpeechSynthesisErrorEvent": false,
              "SpeechSynthesisEvent": false,
              "SpeechSynthesisUtterance": false,
              "SpeechSynthesisVoice": false,
              "StaticRange": false,
              "StereoPannerNode": false,
              "Storage": false,
              "StorageBucket": false,
              "StorageBucketManager": false,
              "StorageEvent": false,
              "StorageManager": false,
              "StylePropertyMap": false,
              "StylePropertyMapReadOnly": false,
              "StyleSheet": false,
              "StyleSheetList": false,
              "SubmitEvent": false,
              "SubtleCrypto": false,
              "SyncManager": false,
              "TEMPORARY": false,
              "TaskAttributionTiming": false,
              "TaskController": false,
              "TaskPriorityChangeEvent": false,
              "TaskSignal": false,
              "Text": false,
              "TextDecoder": false,
              "TextDecoderStream": false,
              "TextEncoder": false,
              "TextEncoderStream": false,
              "TextEvent": false,
              "TextFormat": false,
              "TextFormatUpdateEvent": false,
              "TextMetrics": false,
              "TextTrack": false,
              "TextTrackCue": false,
              "TextTrackCueList": false,
              "TextTrackList": false,
              "TextUpdateEvent": false,
              "TimeEvent": false,
              "TimeRanges": false,
              "ToggleEvent": false,
              "Touch": false,
              "TouchEvent": false,
              "TouchList": false,
              "TrackEvent": false,
              "TransformStream": false,
              "TransformStreamDefaultController": false,
              "TransitionEvent": false,
              "TreeWalker": false,
              "TrustedHTML": false,
              "TrustedScript": false,
              "TrustedScriptURL": false,
              "TrustedTypePolicy": false,
              "TrustedTypePolicyFactory": false,
              "UIEvent": false,
              "URL": false,
              "URLPattern": false,
              "URLSearchParams": false,
              "USB": false,
              "USBAlternateInterface": false,
              "USBConfiguration": false,
              "USBConnectionEvent": false,
              "USBDevice": false,
              "USBEndpoint": false,
              "USBInTransferResult": false,
              "USBInterface": false,
              "USBIsochronousInTransferPacket": false,
              "USBIsochronousInTransferResult": false,
              "USBIsochronousOutTransferPacket": false,
              "USBIsochronousOutTransferResult": false,
              "USBOutTransferResult": false,
              "UserActivation": false,
              "VTTCue": false,
              "VTTRegion": false,
              "ValidityState": false,
              "VideoColorSpace": false,
              "VideoDecoder": false,
              "VideoEncoder": false,
              "VideoFrame": false,
              "VideoPlaybackQuality": false,
              "ViewTimeline": false,
              "ViewTransition": false,
              "ViewTransitionTypeSet": false,
              "VirtualKeyboard": false,
              "VirtualKeyboardGeometryChangeEvent": false,
              "VisibilityStateEntry": false,
              "VisualViewport": false,
              "WGSLLanguageFeatures": false,
              "WakeLock": false,
              "WakeLockSentinel": false,
              "WaveShaperNode": false,
              "WebAssembly": false,
              "WebGL2RenderingContext": false,
              "WebGLActiveInfo": false,
              "WebGLBuffer": false,
              "WebGLContextEvent": false,
              "WebGLFramebuffer": false,
              "WebGLObject": false,
              "WebGLProgram": false,
              "WebGLQuery": false,
              "WebGLRenderbuffer": false,
              "WebGLRenderingContext": false,
              "WebGLSampler": false,
              "WebGLShader": false,
              "WebGLShaderPrecisionFormat": false,
              "WebGLSync": false,
              "WebGLTexture": false,
              "WebGLTransformFeedback": false,
              "WebGLUniformLocation": false,
              "WebGLVertexArrayObject": false,
              "WebSocket": false,
              "WebSocketError": false,
              "WebSocketStream": false,
              "WebTransport": false,
              "WebTransportBidirectionalStream": false,
              "WebTransportDatagramDuplexStream": false,
              "WebTransportError": false,
              "WebTransportReceiveStream": false,
              "WebTransportSendStream": false,
              "WheelEvent": false,
              "Window": false,
              "WindowControlsOverlay": false,
              "WindowControlsOverlayGeometryChangeEvent": false,
              "Worker": false,
              "Worklet": false,
              "WorkletGlobalScope": false,
              "WritableStream": false,
              "WritableStreamDefaultController": false,
              "WritableStreamDefaultWriter": false,
              "XMLDocument": false,
              "XMLHttpRequest": false,
              "XMLHttpRequestEventTarget": false,
              "XMLHttpRequestUpload": false,
              "XMLSerializer": false,
              "XPathEvaluator": false,
              "XPathExpression": false,
              "XPathResult": false,
              "XRAnchor": false,
              "XRAnchorSet": false,
              "XRBoundedReferenceSpace": false,
              "XRCPUDepthInformation": false,
              "XRCamera": false,
              "XRDOMOverlayState": false,
              "XRDepthInformation": false,
              "XRFrame": false,
              "XRHand": false,
              "XRHitTestResult": false,
              "XRHitTestSource": false,
              "XRInputSource": false,
              "XRInputSourceArray": false,
              "XRInputSourceEvent": false,
              "XRInputSourcesChangeEvent": false,
              "XRJointPose": false,
              "XRJointSpace": false,
              "XRLayer": false,
              "XRLightEstimate": false,
              "XRLightProbe": false,
              "XRPose": false,
              "XRRay": false,
              "XRReferenceSpace": false,
              "XRReferenceSpaceEvent": false,
              "XRRenderState": false,
              "XRRigidTransform": false,
              "XRSession": false,
              "XRSessionEvent": false,
              "XRSpace": false,
              "XRSystem": false,
              "XRTransientInputHitTestResult": false,
              "XRTransientInputHitTestSource": false,
              "XRView": false,
              "XRViewerPose": false,
              "XRViewport": false,
              "XRWebGLBinding": false,
              "XRWebGLDepthInformation": false,
              "XRWebGLLayer": false,
              "XSLTProcessor": false,
              "addEventListener": false,
              "ai": false,
              "alert": false,
              "atob": false,
              "blur": false,
              "btoa": false,
              "caches": false,
              "cancelAnimationFrame": false,
              "cancelIdleCallback": false,
              "clearInterval": false,
              "clearTimeout": false,
              "clientInformation": false,
              "close": false,
              "closed": false,
              "confirm": false,
              "console": false,
              "cookieStore": false,
              "createImageBitmap": false,
              "credentialless": false,
              "crossOriginIsolated": false,
              "crypto": false,
              "currentFrame": false,
              "currentTime": false,
              "customElements": false,
              "devicePixelRatio": false,
              "dispatchEvent": false,
              "document": false,
              "documentPictureInPicture": false,
              "event": false,
              "external": false,
              "fence": false,
              "fetch": false,
              "fetchLater": false,
              "find": false,
              "focus": false,
              "frameElement": false,
              "frames": false,
              "getComputedStyle": false,
              "getScreenDetails": false,
              "getSelection": false,
              "history": false,
              "indexedDB": false,
              "innerHeight": false,
              "innerWidth": false,
              "isSecureContext": false,
              "launchQueue": false,
              "length": false,
              "localStorage": false,
              "location": true,
              "locationbar": false,
              "matchMedia": false,
              "menubar": false,
              "model": false,
              "moveBy": false,
              "moveTo": false,
              "name": false,
              "navigation": false,
              "navigator": false,
              "offscreenBuffering": false,
              "onabort": true,
              "onafterprint": true,
              "onanimationcancel": true,
              "onanimationend": true,
              "onanimationiteration": true,
              "onanimationstart": true,
              "onappinstalled": true,
              "onauxclick": true,
              "onbeforeinput": true,
              "onbeforeinstallprompt": true,
              "onbeforematch": true,
              "onbeforeprint": true,
              "onbeforetoggle": true,
              "onbeforeunload": true,
              "onbeforexrselect": true,
              "onblur": true,
              "oncancel": true,
              "oncanplay": true,
              "oncanplaythrough": true,
              "onchange": true,
              "onclick": true,
              "onclose": true,
              "oncontentvisibilityautostatechange": true,
              "oncontextlost": true,
              "oncontextmenu": true,
              "oncontextrestored": true,
              "oncopy": true,
              "oncuechange": true,
              "oncut": true,
              "ondblclick": true,
              "ondevicemotion": true,
              "ondeviceorientation": true,
              "ondeviceorientationabsolute": true,
              "ondrag": true,
              "ondragend": true,
              "ondragenter": true,
              "ondragleave": true,
              "ondragover": true,
              "ondragstart": true,
              "ondrop": true,
              "ondurationchange": true,
              "onemptied": true,
              "onended": true,
              "onerror": true,
              "onfocus": true,
              "onformdata": true,
              "ongamepadconnected": true,
              "ongamepaddisconnected": true,
              "ongotpointercapture": true,
              "onhashchange": true,
              "oninput": true,
              "oninvalid": true,
              "onkeydown": true,
              "onkeypress": true,
              "onkeyup": true,
              "onlanguagechange": true,
              "onload": true,
              "onloadeddata": true,
              "onloadedmetadata": true,
              "onloadstart": true,
              "onlostpointercapture": true,
              "onmessage": true,
              "onmessageerror": true,
              "onmousedown": true,
              "onmouseenter": true,
              "onmouseleave": true,
              "onmousemove": true,
              "onmouseout": true,
              "onmouseover": true,
              "onmouseup": true,
              "onmousewheel": true,
              "onoffline": true,
              "ononline": true,
              "onpagehide": true,
              "onpagereveal": true,
              "onpageshow": true,
              "onpageswap": true,
              "onpaste": true,
              "onpause": true,
              "onplay": true,
              "onplaying": true,
              "onpointercancel": true,
              "onpointerdown": true,
              "onpointerenter": true,
              "onpointerleave": true,
              "onpointermove": true,
              "onpointerout": true,
              "onpointerover": true,
              "onpointerrawupdate": true,
              "onpointerup": true,
              "onpopstate": true,
              "onprogress": true,
              "onratechange": true,
              "onrejectionhandled": true,
              "onreset": true,
              "onresize": true,
              "onscroll": true,
              "onscrollend": true,
              "onscrollsnapchange": true,
              "onscrollsnapchanging": true,
              "onsearch": true,
              "onsecuritypolicyviolation": true,
              "onseeked": true,
              "onseeking": true,
              "onselect": true,
              "onselectionchange": true,
              "onselectstart": true,
              "onslotchange": true,
              "onstalled": true,
              "onstorage": true,
              "onsubmit": true,
              "onsuspend": true,
              "ontimeupdate": true,
              "ontoggle": true,
              "ontransitioncancel": true,
              "ontransitionend": true,
              "ontransitionrun": true,
              "ontransitionstart": true,
              "onunhandledrejection": true,
              "onunload": true,
              "onvolumechange": true,
              "onwaiting": true,
              "onwheel": true,
              "open": false,
              "opener": false,
              "origin": false,
              "originAgentCluster": false,
              "outerHeight": false,
              "outerWidth": false,
              "pageXOffset": false,
              "pageYOffset": false,
              "parent": false,
              "performance": false,
              "personalbar": false,
              "postMessage": false,
              "print": false,
              "prompt": false,
              "queryLocalFonts": false,
              "queueMicrotask": false,
              "registerProcessor": false,
              "removeEventListener": false,
              "reportError": false,
              "requestAnimationFrame": false,
              "requestIdleCallback": false,
              "resizeBy": false,
              "resizeTo": false,
              "sampleRate": false,
              "scheduler": false,
              "screen": false,
              "screenLeft": false,
              "screenTop": false,
              "screenX": false,
              "screenY": false,
              "scroll": false,
              "scrollBy": false,
              "scrollTo": false,
              "scrollX": false,
              "scrollY": false,
              "scrollbars": false,
              "self": false,
              "sessionStorage": false,
              "setInterval": false,
              "setTimeout": false,
              "sharedStorage": false,
              "showDirectoryPicker": false,
              "showOpenFilePicker": false,
              "showSaveFilePicker": false,
              "speechSynthesis": false,
              "status": false,
              "statusbar": false,
              "stop": false,
              "structuredClone": false,
              "styleMedia": false,
              "toolbar": false,
              "top": false,
              "trustedTypes": false,
              "visualViewport": false,
              "window": false,
            },
          },
          "name": "compat/flat/recommended",
          "plugins": {
            "compat": {
              "configs": [Circular],
              "meta": {
                "name": "eslint-plugin-compat",
                "version": "6.0.2",
              },
              "rules": {
                "compat": {
                  "create": [Function],
                  "meta": {
                    "docs": {
                      "category": "Compatibility",
                      "description": "Ensure cross-browser API compatibility",
                      "recommended": true,
                      "url": "https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md",
                    },
                    "schema": [
                      {
                        "type": "string",
                      },
                    ],
                    "type": "problem",
                  },
                },
              },
            },
          },
          "rules": {
            "compat/compat": "error",
          },
        },
        "recommended": {
          "env": {
            "browser": true,
          },
          "plugins": [
            "compat",
          ],
          "rules": {
            "compat/compat": "error",
          },
        },
      },
      "meta": {
        "name": "eslint-plugin-compat",
        "version": "6.0.2",
      },
      "rules": {
        "compat": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Compatibility",
              "description": "Ensure cross-browser API compatibility",
              "recommended": true,
              "url": "https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md",
            },
            "schema": [
              {
                "type": "string",
              },
            ],
            "type": "problem",
          },
        },
      },
    },
  },
  "rules": {
    "compat/compat": "error",
  },
  "settings": {
    "lintAllEsApis": true,
    "polyfills": [
      "document.body",
    ],
  },
}
`;

exports[`eslint > configs > should match the snapshot for the ignores preset 1`] = `
{
  "ignores": [
    "**/node_modules/**",
    "**/dist/**",
    "**/.astro/**",
    "**/.next/**",
    "**/next-env.d.ts",
    "**/build/**",
    "**/storybook-static/**",
    "**/public/**",
    "**/vendor/**",
    "**/__reports__/**",
    "**/__coverage__/**",
    "**/*.snap",
    "**/*.css",
  ],
}
`;

exports[`eslint > configs > should match the snapshot for the javascript preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
  ],
  "languageOptions": {
    "parserOptions": {
      "ecmaFeatures": {
        "impliedStrict": true,
      },
    },
  },
  "name": "foundry/javascript",
  "plugins": {
    "import-x": {
      "cjsRequire": [Function],
      "configs": {
        "electron": {
          "settings": {
            "import-x/core-modules": [
              "electron",
            ],
          },
        },
        "errors": {
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/default": 2,
            "import-x/export": 2,
            "import-x/named": 2,
            "import-x/namespace": 2,
            "import-x/no-unresolved": 2,
          },
        },
        "flat/electron": {
          "name": "import-x/electron",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/core-modules": [
              "electron",
            ],
          },
        },
        "flat/errors": {
          "name": "import-x/errors",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": 2,
            "import-x/export": 2,
            "import-x/named": 2,
            "import-x/namespace": 2,
            "import-x/no-unresolved": 2,
          },
        },
        "flat/react": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
          },
          "name": "import-x/react",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/extensions": [
              ".js",
              ".jsx",
              ".mjs",
              ".cjs",
            ],
          },
        },
        "flat/react-native": {
          "name": "import-x/react-native",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/resolver": {
              "node": {
                "extensions": [
                  ".js",
                  ".web.js",
                  ".ios.js",
                  ".android.js",
                ],
              },
            },
          },
        },
        "flat/recommended": {
          "name": "import-x/recommended",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": "error",
            "import-x/export": "error",
            "import-x/named": "error",
            "import-x/namespace": "error",
            "import-x/no-duplicates": "warn",
            "import-x/no-named-as-default": "warn",
            "import-x/no-named-as-default-member": "warn",
            "import-x/no-unresolved": "error",
          },
        },
        "flat/stage-0": {
          "name": "import-x/stage-0",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-deprecated": 1,
          },
        },
        "flat/typescript": {
          "name": "import-x/typescript",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/named": "off",
          },
          "settings": {
            "import-x/extensions": [
              ".ts",
              ".tsx",
              ".cts",
              ".mts",
              ".js",
              ".jsx",
              ".cjs",
              ".mjs",
            ],
            "import-x/external-module-folders": [
              "node_modules",
              "node_modules/@types",
            ],
            "import-x/parsers": {
              "@typescript-eslint/parser": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
              ],
            },
            "import-x/resolver": {
              "typescript": true,
            },
          },
        },
        "flat/warnings": {
          "name": "import-x/warnings",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-duplicates": 1,
            "import-x/no-named-as-default": 1,
            "import-x/no-named-as-default-member": 1,
            "import-x/no-rename-default": 1,
          },
        },
        "react": {
          "parserOptions": {
            "ecmaFeatures": {
              "jsx": true,
            },
          },
          "settings": {
            "import-x/extensions": [
              ".js",
              ".jsx",
            ],
          },
        },
        "react-native": {
          "settings": {
            "import-x/resolver": {
              "node": {
                "extensions": [
                  ".js",
                  ".web.js",
                  ".ios.js",
                  ".android.js",
                ],
              },
            },
          },
        },
        "recommended": {
          "parserOptions": {
            "ecmaVersion": 2018,
            "sourceType": "module",
          },
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/default": "error",
            "import-x/export": "error",
            "import-x/named": "error",
            "import-x/namespace": "error",
            "import-x/no-duplicates": "warn",
            "import-x/no-named-as-default": "warn",
            "import-x/no-named-as-default-member": "warn",
            "import-x/no-unresolved": "error",
          },
        },
        "stage-0": {
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/no-deprecated": 1,
          },
        },
        "typescript": {
          "rules": {
            "import-x/named": "off",
          },
          "settings": {
            "import-x/extensions": [
              ".ts",
              ".tsx",
              ".cts",
              ".mts",
              ".js",
              ".jsx",
              ".cjs",
              ".mjs",
            ],
            "import-x/external-module-folders": [
              "node_modules",
              "node_modules/@types",
            ],
            "import-x/parsers": {
              "@typescript-eslint/parser": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
              ],
            },
            "import-x/resolver": {
              "typescript": true,
            },
          },
        },
        "warnings": {
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/no-duplicates": 1,
            "import-x/no-named-as-default": 1,
            "import-x/no-named-as-default-member": 1,
            "import-x/no-rename-default": 1,
          },
        },
      },
      "createNodeResolver": [Function],
      "flatConfigs": {
        "electron": {
          "name": "import-x/electron",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/core-modules": [
              "electron",
            ],
          },
        },
        "errors": {
          "name": "import-x/errors",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": 2,
            "import-x/export": 2,
            "import-x/named": 2,
            "import-x/namespace": 2,
            "import-x/no-unresolved": 2,
          },
        },
        "react": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
          },
          "name": "import-x/react",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/extensions": [
              ".js",
              ".jsx",
              ".mjs",
              ".cjs",
            ],
          },
        },
        "react-native": {
          "name": "import-x/react-native",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/resolver": {
              "node": {
                "extensions": [
                  ".js",
                  ".web.js",
                  ".ios.js",
                  ".android.js",
                ],
              },
            },
          },
        },
        "recommended": {
          "name": "import-x/recommended",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": "error",
            "import-x/export": "error",
            "import-x/named": "error",
            "import-x/namespace": "error",
            "import-x/no-duplicates": "warn",
            "import-x/no-named-as-default": "warn",
            "import-x/no-named-as-default-member": "warn",
            "import-x/no-unresolved": "error",
          },
        },
        "stage-0": {
          "name": "import-x/stage-0",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-deprecated": 1,
          },
        },
        "typescript": {
          "name": "import-x/typescript",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/named": "off",
          },
          "settings": {
            "import-x/extensions": [
              ".ts",
              ".tsx",
              ".cts",
              ".mts",
              ".js",
              ".jsx",
              ".cjs",
              ".mjs",
            ],
            "import-x/external-module-folders": [
              "node_modules",
              "node_modules/@types",
            ],
            "import-x/parsers": {
              "@typescript-eslint/parser": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
              ],
            },
            "import-x/resolver": {
              "typescript": true,
            },
          },
        },
        "warnings": {
          "name": "import-x/warnings",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-duplicates": 1,
            "import-x/no-named-as-default": 1,
            "import-x/no-named-as-default-member": 1,
            "import-x/no-rename-default": 1,
          },
        },
      },
      "importXResolverCompat": [Function],
      "meta": {
        "name": "eslint-plugin-import-x",
        "version": "4.16.1",
      },
      "rules": {
        "consistent-type-specifier-style": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce or ban the use of inline type-only markers for named imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/consistent-type-specifier-style.md",
            },
            "fixable": "code",
            "messages": {
              "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
              "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
            },
            "schema": [
              {
                "default": "prefer-top-level",
                "enum": [
                  "prefer-top-level",
                  "prefer-inline",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure a default export is present, given a default import.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/default.md",
            },
            "messages": {
              "noDefaultExport": "No default export found in imported module "{{module}}".",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "dynamic-import-chunkname": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/dynamic-import-chunkname.md",
            },
            "hasSuggestions": true,
            "messages": {
              "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
              "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
              "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
              "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
              "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
              "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
              "webpackRemoveChunkName": "Remove webpackChunkName",
              "webpackRemoveEagerMode": "Remove webpackMode",
            },
            "schema": [
              {
                "properties": {
                  "allowEmpty": {
                    "type": "boolean",
                  },
                  "importFunctions": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "webpackChunknameFormat": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid any invalid exports, i.e. re-export of the same name.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/export.md",
            },
            "messages": {
              "multiDefault": "Multiple default exports.",
              "multiNamed": "Multiple exports of name '{{name}}'.",
              "noNamed": "No named exports found in module '{{module}}'.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "exports-last": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Ensure all exports appear after other statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/exports-last.md",
            },
            "messages": {
              "end": "Export statements should appear at the end of the file",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "extensions": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Ensure consistent use of file extension within the import path.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/extensions.md",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "addMissing": "Add "{{extension}}" file extension from "{{importPath}}" into "{{fixedImportPath}}"",
              "missing": "Missing file extension for "{{importPath}}"",
              "missingKnown": "Missing file extension "{{extension}}" for "{{importPath}}"",
              "removeUnexpected": "Remove unexpected "{{extension}}" file extension from "{{importPath}}" into "{{fixedImportPath}}"",
              "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
            },
            "schema": {
              "anyOf": [
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "always",
                        "ignorePackages",
                        "never",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "always",
                        "ignorePackages",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "properties": {
                        "checkTypeImports": {
                          "type": "boolean",
                        },
                        "fix": {
                          "type": "boolean",
                        },
                        "ignorePackages": {
                          "type": "boolean",
                        },
                        "pathGroupOverrides": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "action": {
                                "enum": [
                                  "enforce",
                                  "ignore",
                                ],
                                "type": "string",
                              },
                              "pattern": {
                                "type": "string",
                              },
                              "patternOptions": {
                                "type": "object",
                              },
                            },
                            "required": [
                              "pattern",
                              "action",
                            ],
                            "type": "object",
                          },
                          "type": "array",
                        },
                        "pattern": {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "ignorePackages",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "properties": {
                        "checkTypeImports": {
                          "type": "boolean",
                        },
                        "fix": {
                          "type": "boolean",
                        },
                        "ignorePackages": {
                          "type": "boolean",
                        },
                        "pathGroupOverrides": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "action": {
                                "enum": [
                                  "enforce",
                                  "ignore",
                                ],
                                "type": "string",
                              },
                              "pattern": {
                                "type": "string",
                              },
                              "patternOptions": {
                                "type": "object",
                              },
                            },
                            "required": [
                              "pattern",
                              "action",
                            ],
                            "type": "object",
                          },
                          "type": "array",
                        },
                        "pattern": {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "ignorePackages",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "always",
                        "ignorePackages",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "patternProperties": {
                        ".*": {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "patternProperties": {
                        ".*": {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
              ],
            },
            "type": "suggestion",
          },
        },
        "first": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Ensure all imports appear before other statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/first.md",
            },
            "fixable": "code",
            "messages": {
              "absolute": "Absolute imports should come before relative imports.",
              "order": "Import in body of module; reorder to top.",
            },
            "schema": [
              {
                "enum": [
                  "absolute-first",
                  "disable-absolute-first",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "group-exports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Prefer named exports to be grouped together in a single export declaration.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/group-exports.md",
            },
            "messages": {
              "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to \`module.exports\`",
              "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "imports-first": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "deprecated": {
              "deprecatedSince": "2.0.0",
              "message": "Replaced by \`import-x/first\`.",
              "replacedBy": [
                {
                  "message": "Replaced by \`import-x/first\`.",
                  "rule": {
                    "name": "first",
                    "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/first.md",
                  },
                },
              ],
              "url": "https://github.com/import-js/eslint-plugin-import/blob/main/CHANGELOG.md#changed-24",
            },
            "docs": {
              "category": "Style guide",
              "description": "Replaced by \`import-x/first\`.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/imports-first.md",
            },
            "fixable": "code",
            "messages": {
              "absolute": "Absolute imports should come before relative imports.",
              "order": "Import in body of module; reorder to top.",
            },
            "schema": [
              {
                "enum": [
                  "absolute-first",
                  "disable-absolute-first",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "max-dependencies": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce the maximum number of dependencies a module can have.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/max-dependencies.md",
            },
            "messages": {
              "max": "Maximum number of dependencies ({{max}}) exceeded.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreTypeImports": {
                    "type": "boolean",
                  },
                  "max": {
                    "type": "number",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "named": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure named imports correspond to a named export in the remote file.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/named.md",
            },
            "messages": {
              "notFound": "{{name}} not found in '{{path}}'",
              "notFoundDeep": "{{name}} not found via {{deepPath}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "commonjs": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "namespace": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowComputed": false,
            },
          ],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/namespace.md",
            },
            "messages": {
              "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
              "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
              "noNamesFound": "No exported names found in module '{{module}}'.",
              "notFoundInNamespace": "'{{name}}' not found in imported namespace '{{namepath}}'.",
              "notFoundInNamespaceDeep": "'{{name}}' not found in deeply imported namespace '{{namepath}}'.",
              "topLevelNames": "Only destructure top-level names.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowComputed": {
                    "default": false,
                    "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "newline-after-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce a newline after import statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/newline-after-import.md",
            },
            "fixable": "whitespace",
            "messages": {
              "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "considerComments": {
                    "type": "boolean",
                  },
                  "count": {
                    "minimum": 1,
                    "type": "integer",
                  },
                  "exactCount": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "layout",
          },
        },
        "no-absolute-path": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid import of modules using absolute paths.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-absolute-path.md",
            },
            "fixable": "code",
            "messages": {
              "absolute": "Do not import modules using an absolute path",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-amd": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid AMD \`require\` and \`define\` calls.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-amd.md",
            },
            "messages": {
              "amd": "Expected imports instead of AMD {{type}}().",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-anonymous-default-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid anonymous values as default exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-anonymous-default-export.md",
            },
            "messages": {
              "anonymous": "Unexpected default export of anonymous {{type}}",
              "assign": "Assign {{type}} to a variable before exporting as module default",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAnonymousClass": {
                    "description": "If \`false\`, will report default export of an anonymous class",
                    "type": "boolean",
                  },
                  "allowAnonymousFunction": {
                    "description": "If \`false\`, will report default export of an anonymous function",
                    "type": "boolean",
                  },
                  "allowArray": {
                    "description": "If \`false\`, will report default export of an array",
                    "type": "boolean",
                  },
                  "allowArrowFunction": {
                    "description": "If \`false\`, will report default export of an arrow function",
                    "type": "boolean",
                  },
                  "allowCallExpression": {
                    "description": "If \`false\`, will report default export of a function call",
                    "type": "boolean",
                  },
                  "allowLiteral": {
                    "description": "If \`false\`, will report default export of a literal",
                    "type": "boolean",
                  },
                  "allowNew": {
                    "description": "If \`false\`, will report default export of a class instantiation",
                    "type": "boolean",
                  },
                  "allowObject": {
                    "description": "If \`false\`, will report default export of an object expression",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-commonjs": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-commonjs.md",
            },
            "messages": {
              "export": "Expected "export" or "export default"",
              "import": "Expected "import" instead of "require()"",
            },
            "schema": {
              "anyOf": [
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "allow-primitive-modules",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowConditionalRequire": {
                          "type": "boolean",
                        },
                        "allowPrimitiveModules": {
                          "type": "boolean",
                        },
                        "allowRequire": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
              ],
            },
            "type": "suggestion",
          },
        },
        "no-cycle": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid a module from importing a module with a dependency path back to itself.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-cycle.md",
            },
            "messages": {
              "cycle": "Dependency cycle detected",
              "cycleSource": "Dependency cycle via "{{source}}"",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowUnsafeDynamicCyclicDependency": {
                    "default": false,
                    "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                    "type": "boolean",
                  },
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreExternal": {
                    "default": false,
                    "description": "ignore external modules",
                    "type": "boolean",
                  },
                  "maxDepth": {
                    "anyOf": [
                      {
                        "description": "maximum dependency depth to traverse",
                        "minimum": 1,
                        "type": "integer",
                      },
                      {
                        "enum": [
                          "∞",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-default-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid default exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-default-export.md",
            },
            "messages": {
              "noAliasDefault": "Do not alias \`{{local}}\` as \`default\`. Just export \`{{local}}\` itself instead.",
              "preferNamed": "Prefer named exports.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-deprecated": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-deprecated.md",
            },
            "messages": {
              "deprecated": "Deprecated: consider to find an alternative.",
              "deprecatedDesc": "Deprecated: {{description}}",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-duplicates": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid repeated import of the same module in multiple places.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-duplicates.md",
            },
            "fixable": "code",
            "messages": {
              "duplicate": "'{{module}}' imported multiple times.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "considerQueryString": {
                    "type": "boolean",
                  },
                  "prefer-inline": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-dynamic-require": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid \`require()\` calls with expressions.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-dynamic-require.md",
            },
            "messages": {
              "import": "Calls to import() should use string literals",
              "require": "Calls to require() should use string literals",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "esmodule": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-empty-named-blocks": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid empty named import blocks.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-empty-named-blocks.md",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "emptyImport": "Remove empty import block",
              "emptyNamed": "Unexpected empty named import block",
              "unused": "Remove unused import",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-extraneous-dependencies": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid the use of extraneous packages.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-extraneous-dependencies.md",
            },
            "messages": {
              "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
              "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i {{packageName}}' to add it",
              "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
              "pkgNotFound": "The package.json file could not be found.",
              "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "bundledDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "devDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "includeInternal": {
                    "type": [
                      "boolean",
                    ],
                  },
                  "includeTypes": {
                    "type": [
                      "boolean",
                    ],
                  },
                  "optionalDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "packageDir": {
                    "type": [
                      "string",
                      "array",
                    ],
                  },
                  "peerDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "whitelist": {
                    "type": [
                      "array",
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-import-module-exports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid import statements with CommonJS module.exports.",
              "recommended": true,
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-import-module-exports.md",
            },
            "fixable": "code",
            "messages": {
              "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "exceptions": {
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-internal-modules": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid importing the submodules of other modules.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-internal-modules.md",
            },
            "messages": {
              "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
            },
            "schema": [
              {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "forbid": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "no-mutable-exports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-mutable-exports.md",
            },
            "messages": {
              "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-named-as-default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid use of exported name as identifier of default export.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-as-default.md",
            },
            "messages": {
              "default": "Using exported name '{{name}}' as identifier for default export.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-named-as-default-member": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid use of exported name as property of default export.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-as-default-member.md",
            },
            "messages": {
              "member": "Caution: \`{{objectName}}\` also has a named export \`{{propName}}\`. Check if you meant to write \`import {{{propName}}} from '{{sourcePath}}'\` instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-named-default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid named default exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-default.md",
            },
            "messages": {
              "default": "Use default import syntax to import '{{importName}}'.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-named-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid named exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-export.md",
            },
            "messages": {
              "noAllowed": "Named exports are not allowed.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-namespace": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-namespace.md",
            },
            "fixable": "code",
            "messages": {
              "noNamespace": "Unexpected namespace import.",
            },
            "schema": [
              {
                "properties": {
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-nodejs-modules": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid Node.js builtin modules.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-nodejs-modules.md",
            },
            "messages": {
              "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-relative-packages": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid importing packages through relative paths.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-relative-packages.md",
            },
            "fixable": "code",
            "messages": {
              "noAllowed": "Relative import from another package is not allowed. Use \`{{properImport}}\` instead of \`{{importPath}}\`",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-relative-parent-imports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid importing modules from parent directories.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-relative-parent-imports.md",
            },
            "messages": {
              "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move \`{{filename}}\` to same directory as \`{{depPath}}\` or consider making \`{{depPath}}\` a package.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-rename-default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid importing a default export by a different name.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-rename-default.md",
            },
            "messages": {
              "renameDefault": "Caution: \`{{importBasename}}\` has a default export \`{{defaultExportName}}\`. This {{requiresOrImports}} \`{{defaultExportName}}\` as \`{{importName}}\`. Check if you meant to write \`{{suggestion}}\` instead.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "commonjs": {
                    "default": false,
                    "type": "boolean",
                  },
                  "preventRenamingBindings": {
                    "default": true,
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-restricted-paths": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Enforce which files can be imported in a given folder.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-restricted-paths.md",
            },
            "messages": {
              "glob": "Restricted path exceptions must be glob patterns when \`from\` contains glob patterns",
              "mixedGlob": "Restricted path \`from\` must contain either only glob patterns or none",
              "path": "Restricted path exceptions must be descendants of the configured \`from\` path for that zone.",
              "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "basePath": {
                    "type": "string",
                  },
                  "zones": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "except": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "from": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                        "message": {
                          "type": "string",
                        },
                        "target": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-self-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid a module from importing itself.",
              "recommended": true,
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-self-import.md",
            },
            "messages": {
              "self": "Module imports itself.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unassigned-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid unassigned imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unassigned-import.md",
            },
            "messages": {
              "unassigned": "Imported module should be assigned",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "devDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "optionalDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "peerDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unresolved": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure imports point to a file/module that can be resolved.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unresolved.md",
            },
            "messages": {
              "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
              "unresolved": "Unable to resolve path to module '{{module}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "caseSensitive": {
                    "default": true,
                    "type": "boolean",
                  },
                  "caseSensitiveStrict": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unused-modules": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid modules without exports, or exports without matching import in another module.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unused-modules.md",
            },
            "messages": {
              "notFound": "No exports found",
              "unused": "exported declaration '{{value}}' not used within other modules",
            },
            "schema": [
              {
                "anyOf": [
                  {
                    "properties": {
                      "src": {
                        "minItems": 1,
                        "type": "array",
                      },
                      "unusedExports": {
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    },
                    "required": [
                      "unusedExports",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "missingExports": {
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    },
                    "required": [
                      "missingExports",
                    ],
                    "type": "object",
                  },
                ],
                "properties": {
                  "ignoreExports": {
                    "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreUnusedTypeExports": {
                    "description": "ignore type exports without any usage",
                    "type": "boolean",
                  },
                  "missingExports": {
                    "description": "report modules without any exports",
                    "type": "boolean",
                  },
                  "src": {
                    "description": "files/paths to be analyzed (only for unused exports)",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "unusedExports": {
                    "description": "report exports without any usage",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-useless-path-segments": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid unnecessary path segments in import and require statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-useless-path-segments.md",
            },
            "fixable": "code",
            "messages": {
              "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "commonjs": {
                    "type": "boolean",
                  },
                  "noUselessIndex": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-webpack-loader-syntax": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid webpack loader syntax in imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-webpack-loader-syntax.md",
            },
            "messages": {
              "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "order": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce a convention in module import order.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/order.md",
            },
            "fixable": "code",
            "messages": {
              "error": "{{error}}",
              "noLineBetweenGroups": "There should be no empty line between import groups",
              "noLineBetweenSingleLineImport": "There should be no empty lines between this single-line import and the single-line import that follows it",
              "noLineWithinGroup": "There should be no empty line within import group",
              "oneLineBetweenGroups": "There should be at least one empty line between import groups",
              "oneLineBetweenTheMultiLineImport": "There should be at least one empty line between this import and the multi-line import that follows it",
              "oneLineBetweenThisMultiLineImport": "There should be at least one empty line between this multi-line import and the import that follows it",
              "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "dependencies": {
                  "consolidateIslands": {
                    "anyOf": [
                      {
                        "properties": {
                          "newlines-between": {
                            "enum": [
                              "always-and-inside-groups",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "newlines-between",
                        ],
                        "type": "object",
                      },
                      {
                        "properties": {
                          "newlines-between-types": {
                            "enum": [
                              "always-and-inside-groups",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "newlines-between-types",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "newlines-between-types": {
                    "properties": {
                      "sortTypesGroup": {
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    },
                    "required": [
                      "sortTypesGroup",
                    ],
                    "type": "object",
                  },
                },
                "properties": {
                  "alphabetize": {
                    "additionalProperties": false,
                    "properties": {
                      "caseInsensitive": {
                        "default": false,
                        "type": "boolean",
                      },
                      "order": {
                        "default": "ignore",
                        "enum": [
                          "ignore",
                          "asc",
                          "desc",
                        ],
                        "type": "string",
                      },
                      "orderImportKind": {
                        "default": "ignore",
                        "enum": [
                          "ignore",
                          "asc",
                          "desc",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                  "consolidateIslands": {
                    "enum": [
                      "inside-groups",
                      "never",
                    ],
                    "type": "string",
                  },
                  "distinctGroup": {
                    "default": true,
                    "type": "boolean",
                  },
                  "groups": {
                    "type": "array",
                  },
                  "named": {
                    "default": false,
                    "oneOf": [
                      {
                        "type": "boolean",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "cjsExports": {
                            "type": "boolean",
                          },
                          "enabled": {
                            "type": "boolean",
                          },
                          "export": {
                            "type": "boolean",
                          },
                          "import": {
                            "type": "boolean",
                          },
                          "require": {
                            "type": "boolean",
                          },
                          "types": {
                            "enum": [
                              "mixed",
                              "types-first",
                              "types-last",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  "newlines-between": {
                    "enum": [
                      "ignore",
                      "always",
                      "always-and-inside-groups",
                      "never",
                    ],
                    "type": "string",
                  },
                  "newlines-between-types": {
                    "enum": [
                      "ignore",
                      "always",
                      "always-and-inside-groups",
                      "never",
                    ],
                    "type": "string",
                  },
                  "pathGroups": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "group": {
                          "enum": [
                            "builtin",
                            "external",
                            "internal",
                            "unknown",
                            "parent",
                            "sibling",
                            "index",
                            "object",
                            "type",
                          ],
                          "type": "string",
                        },
                        "pattern": {
                          "type": "string",
                        },
                        "patternOptions": {
                          "type": "object",
                        },
                        "position": {
                          "enum": [
                            "after",
                            "before",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "pattern",
                        "group",
                      ],
                      "type": "object",
                    },
                    "type": "array",
                  },
                  "pathGroupsExcludedImportTypes": {
                    "type": "array",
                  },
                  "sortTypesGroup": {
                    "default": false,
                    "type": "boolean",
                  },
                  "warnOnUnassignedImports": {
                    "default": false,
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-default-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Prefer a default export if module exports a single name or multiple names.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/prefer-default-export.md",
            },
            "messages": {
              "any": "Prefer default export to be present on every file that has export.",
              "single": "Prefer default export on a file with single export.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "target": {
                    "default": "single",
                    "enum": [
                      "single",
                      "any",
                    ],
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-namespace-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce using namespace imports for specific modules, like \`react\`/\`react-dom\`, etc.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/prefer-namespace-import.md",
            },
            "fixable": "code",
            "messages": {
              "preferNamespaceImport": "Prefer importing {{specifier}} as 'import * as {{specifier}} from "{{source}}"';",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "patterns": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "unambiguous": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/unambiguous.md",
            },
            "messages": {
              "module": "This module could be parsed as a valid script.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
      },
    },
  },
  "rules": {
    "array-callback-return": "off",
    "arrow-body-style": [
      "error",
      "as-needed",
      {
        "requireReturnForObjectLiteral": false,
      },
    ],
    "block-scoped-var": "error",
    "camelcase": [
      "error",
      {
        "ignoreDestructuring": false,
        "properties": "never",
      },
    ],
    "class-methods-use-this": [
      "error",
      {
        "exceptMethods": [],
      },
    ],
    "consistent-return": "error",
    "constructor-super": "off",
    "curly": "off",
    "default-case": "off",
    "default-case-last": "off",
    "default-param-last": "off",
    "dot-notation": "off",
    "eqeqeq": "off",
    "for-direction": "off",
    "func-style": [
      "error",
      "declaration",
      {
        "allowArrowFunctions": true,
        "allowTypeAnnotation": true,
      },
    ],
    "getter-return": "off",
    "grouped-accessor-pairs": "off",
    "guard-for-in": "off",
    "import-x/default": "error",
    "import-x/export": "error",
    "import-x/extensions": "off",
    "import-x/first": "error",
    "import-x/named": "error",
    "import-x/namespace": "error",
    "import-x/newline-after-import": "error",
    "import-x/no-absolute-path": "error",
    "import-x/no-amd": "error",
    "import-x/no-deprecated": "warn",
    "import-x/no-duplicates": "error",
    "import-x/no-dynamic-require": "error",
    "import-x/no-empty-named-blocks": "error",
    "import-x/no-import-module-exports": [
      "error",
      {
        "exceptions": [],
      },
    ],
    "import-x/no-mutable-exports": "error",
    "import-x/no-named-as-default": "error",
    "import-x/no-named-as-default-member": "error",
    "import-x/no-named-default": "error",
    "import-x/no-relative-packages": "error",
    "import-x/no-self-import": "error",
    "import-x/no-unresolved": [
      "error",
      {
        "caseSensitive": true,
        "commonjs": true,
      },
    ],
    "import-x/no-useless-path-segments": [
      "error",
      {
        "commonjs": true,
      },
    ],
    "import-x/no-webpack-loader-syntax": "error",
    "import-x/order": "off",
    "import-x/prefer-default-export": "off",
    "max-classes-per-file": [
      "error",
      1,
    ],
    "new-cap": [
      "error",
      {
        "capIsNew": false,
        "capIsNewExceptions": [
          "Immutable.Map",
          "Immutable.Set",
          "Immutable.List",
        ],
        "newIsCap": true,
        "newIsCapExceptions": [],
      },
    ],
    "no-alert": "off",
    "no-array-constructor": "off",
    "no-async-promise-executor": "off",
    "no-await-in-loop": "error",
    "no-bitwise": "off",
    "no-caller": "error",
    "no-case-declarations": "off",
    "no-class-assign": "off",
    "no-compare-neg-zero": "off",
    "no-cond-assign": "off",
    "no-console": "off",
    "no-const-assign": "off",
    "no-constant-binary-expression": "error",
    "no-constant-condition": "off",
    "no-constructor-return": "off",
    "no-continue": "error",
    "no-control-regex": "off",
    "no-debugger": "off",
    "no-delete-var": "error",
    "no-dupe-args": "off",
    "no-dupe-class-members": "off",
    "no-dupe-else-if": "off",
    "no-dupe-keys": "off",
    "no-duplicate-case": "off",
    "no-else-return": "off",
    "no-empty": "off",
    "no-empty-character-class": "off",
    "no-empty-function": "off",
    "no-empty-pattern": "off",
    "no-empty-static-block": "off",
    "no-eval": "off",
    "no-ex-assign": "off",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "off",
    "no-extra-label": "off",
    "no-fallthrough": "off",
    "no-func-assign": "off",
    "no-global-assign": "off",
    "no-implicit-coercion": "off",
    "no-implied-eval": "error",
    "no-import-assign": "off",
    "no-inner-declarations": "off",
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "off",
    "no-iterator": "error",
    "no-label-var": "off",
    "no-labels": "off",
    "no-lone-blocks": "off",
    "no-lonely-if": "off",
    "no-loop-func": "error",
    "no-loss-of-precision": "off",
    "no-misleading-character-class": "off",
    "no-multi-assign": "error",
    "no-multi-str": "error",
    "no-negated-condition": "off",
    "no-nested-ternary": "off",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-native-nonconstructor": "off",
    "no-new-object": "error",
    "no-new-symbol": "off",
    "no-new-wrappers": "off",
    "no-nonoctal-decimal-escape": "off",
    "no-obj-calls": "off",
    "no-object-constructor": "error",
    "no-octal": "error",
    "no-octal-escape": "off",
    "no-param-reassign": "off",
    "no-plusplus": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "off",
    "no-redeclare": "off",
    "no-regex-spaces": "off",
    "no-restricted-exports": [
      "error",
      {
        "restrictedNamedExports": [
          "default",
          "then",
        ],
      },
    ],
    "no-restricted-globals": "off",
    "no-restricted-imports": "off",
    "no-restricted-properties": [
      "error",
      {
        "message": "Please use \`Object.defineProperty\` instead.",
        "property": "__defineGetter__",
      },
      {
        "message": "Please use \`Object.defineProperty\` instead.",
        "property": "__defineSetter__",
      },
    ],
    "no-restricted-syntax": [
      "error",
      {
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
        "selector": "ForInStatement",
      },
      {
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
        "selector": "LabeledStatement",
      },
      {
        "message": "\`with\` is disallowed in strict mode because it makes code impossible to predict and optimize.",
        "selector": "WithStatement",
      },
    ],
    "no-return-assign": [
      "error",
      "always",
    ],
    "no-script-url": "error",
    "no-self-assign": "off",
    "no-self-compare": "off",
    "no-sequences": "off",
    "no-setter-return": "off",
    "no-shadow": "error",
    "no-shadow-restricted-names": "off",
    "no-sparse-array": "off",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "off",
    "no-this-before-super": "off",
    "no-throw-literal": "off",
    "no-undef": "off",
    "no-undef-init": "off",
    "no-underscore-dangle": [
      "error",
      {
        "allow": [],
        "allowAfterSuper": false,
        "allowAfterThis": false,
        "enforceInMethodNames": true,
      },
    ],
    "no-unexpected-multiline": "error",
    "no-unneeded-ternary": "off",
    "no-unreachable": "off",
    "no-unreachable-loop": [
      "error",
      {
        "ignore": [],
      },
    ],
    "no-unsafe-finally": "off",
    "no-unsafe-negation": "off",
    "no-unsafe-optional-chaining": "off",
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": false,
        "allowTaggedTemplates": false,
        "allowTernary": false,
      },
    ],
    "no-unused-labels": "off",
    "no-unused-private-class-members": "off",
    "no-unused-vars": "off",
    "no-use-before-define": "off",
    "no-useless-backreference": "off",
    "no-useless-catch": "off",
    "no-useless-computed-key": "off",
    "no-useless-concat": "off",
    "no-useless-constructor": "off",
    "no-useless-escape": "off",
    "no-useless-rename": "off",
    "no-useless-return": "error",
    "no-var": "off",
    "no-void": "off",
    "no-with": "off",
    "object-shorthand": "off",
    "one-var": "off",
    "operator-assignment": "off",
    "prefer-arrow-callback": "off",
    "prefer-const": "off",
    "prefer-destructuring": [
      "error",
      {
        "AssignmentExpression": {
          "array": true,
          "object": false,
        },
        "VariableDeclarator": {
          "array": false,
          "object": true,
        },
      },
      {
        "enforceForRenamedProperties": false,
      },
    ],
    "prefer-exponentiation-operator": "off",
    "prefer-named-capture-group": "warn",
    "prefer-numeric-literals": "off",
    "prefer-object-has-own": "off",
    "prefer-object-spread": "off",
    "prefer-promise-reject-errors": [
      "error",
      {
        "allowEmptyReject": true,
      },
    ],
    "prefer-regex-literals": "off",
    "prefer-rest-params": "off",
    "prefer-spread": "error",
    "prefer-template": "off",
    "radix": "error",
    "require-await": "off",
    "require-yield": "off",
    "strict": [
      "error",
      "never",
    ],
    "symbol-description": "off",
    "unicode-bom": [
      "error",
      "never",
    ],
    "use-isnan": "off",
    "valid-typeof": "off",
    "vars-on-top": "error",
    "yoda": "off",
  },
  "settings": {
    "import-x/extensions": [
      ".js",
      ".jsx",
      ".cjs",
      ".mjs",
      ".ts",
      ".tsx",
      ".cts",
      ".mts",
    ],
    "import-x/ignore": [
      "node_modules",
      "\\.(coffee|scss|css|less|hbs|svg|json)$",
    ],
    "import-x/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx",
        ".cts",
        ".mts",
      ],
    },
    "import-x/resolver-next": [
      {
        "interfaceVersion": 3,
        "name": "eslint-import-resolver-oxc",
        "resolve": [Function],
      },
    ],
  },
}
`;

exports[`eslint > configs > should match the snapshot for the next preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
    "**/*.{ts,tsx,cts,mts}",
  ],
  "languageOptions": {
    "globals": {
      "AI": false,
      "AICreateMonitor": false,
      "AITextSession": false,
      "AbortController": false,
      "AbortSignal": false,
      "AbsoluteOrientationSensor": false,
      "AbstractRange": false,
      "Accelerometer": false,
      "AnalyserNode": false,
      "Animation": false,
      "AnimationEffect": false,
      "AnimationEvent": false,
      "AnimationPlaybackEvent": false,
      "AnimationTimeline": false,
      "AsyncDisposableStack": false,
      "Attr": false,
      "Audio": false,
      "AudioBuffer": false,
      "AudioBufferSourceNode": false,
      "AudioContext": false,
      "AudioData": false,
      "AudioDecoder": false,
      "AudioDestinationNode": false,
      "AudioEncoder": false,
      "AudioListener": false,
      "AudioNode": false,
      "AudioParam": false,
      "AudioParamMap": false,
      "AudioProcessingEvent": false,
      "AudioScheduledSourceNode": false,
      "AudioSinkInfo": false,
      "AudioWorklet": false,
      "AudioWorkletGlobalScope": false,
      "AudioWorkletNode": false,
      "AudioWorkletProcessor": false,
      "AuthenticatorAssertionResponse": false,
      "AuthenticatorAttestationResponse": false,
      "AuthenticatorResponse": false,
      "BackgroundFetchManager": false,
      "BackgroundFetchRecord": false,
      "BackgroundFetchRegistration": false,
      "BarProp": false,
      "BarcodeDetector": false,
      "BaseAudioContext": false,
      "BatteryManager": false,
      "BeforeUnloadEvent": false,
      "BiquadFilterNode": false,
      "Blob": false,
      "BlobEvent": false,
      "Bluetooth": false,
      "BluetoothCharacteristicProperties": false,
      "BluetoothDevice": false,
      "BluetoothRemoteGATTCharacteristic": false,
      "BluetoothRemoteGATTDescriptor": false,
      "BluetoothRemoteGATTServer": false,
      "BluetoothRemoteGATTService": false,
      "BluetoothUUID": false,
      "BroadcastChannel": false,
      "BrowserCaptureMediaStreamTrack": false,
      "ByteLengthQueuingStrategy": false,
      "CDATASection": false,
      "CSPViolationReportBody": false,
      "CSS": false,
      "CSSAnimation": false,
      "CSSConditionRule": false,
      "CSSContainerRule": false,
      "CSSCounterStyleRule": false,
      "CSSFontFaceRule": false,
      "CSSFontFeatureValuesRule": false,
      "CSSFontPaletteValuesRule": false,
      "CSSFunctionDeclarations": false,
      "CSSFunctionDescriptors": false,
      "CSSFunctionRule": false,
      "CSSGroupingRule": false,
      "CSSImageValue": false,
      "CSSImportRule": false,
      "CSSKeyframeRule": false,
      "CSSKeyframesRule": false,
      "CSSKeywordValue": false,
      "CSSLayerBlockRule": false,
      "CSSLayerStatementRule": false,
      "CSSMarginRule": false,
      "CSSMathClamp": false,
      "CSSMathInvert": false,
      "CSSMathMax": false,
      "CSSMathMin": false,
      "CSSMathNegate": false,
      "CSSMathProduct": false,
      "CSSMathSum": false,
      "CSSMathValue": false,
      "CSSMatrixComponent": false,
      "CSSMediaRule": false,
      "CSSNamespaceRule": false,
      "CSSNestedDeclarations": false,
      "CSSNumericArray": false,
      "CSSNumericValue": false,
      "CSSPageDescriptors": false,
      "CSSPageRule": false,
      "CSSPerspective": false,
      "CSSPositionTryDescriptors": false,
      "CSSPositionTryRule": false,
      "CSSPositionValue": false,
      "CSSPropertyRule": false,
      "CSSRotate": false,
      "CSSRule": false,
      "CSSRuleList": false,
      "CSSScale": false,
      "CSSScopeRule": false,
      "CSSSkew": false,
      "CSSSkewX": false,
      "CSSSkewY": false,
      "CSSStartingStyleRule": false,
      "CSSStyleDeclaration": false,
      "CSSStyleRule": false,
      "CSSStyleSheet": false,
      "CSSStyleValue": false,
      "CSSSupportsRule": false,
      "CSSTransformComponent": false,
      "CSSTransformValue": false,
      "CSSTransition": false,
      "CSSTranslate": false,
      "CSSUnitValue": false,
      "CSSUnparsedValue": false,
      "CSSVariableReferenceValue": false,
      "CSSViewTransitionRule": false,
      "Cache": false,
      "CacheStorage": false,
      "CanvasCaptureMediaStream": false,
      "CanvasCaptureMediaStreamTrack": false,
      "CanvasGradient": false,
      "CanvasPattern": false,
      "CanvasRenderingContext2D": false,
      "CaptureController": false,
      "CaretPosition": false,
      "ChannelMergerNode": false,
      "ChannelSplitterNode": false,
      "ChapterInformation": false,
      "CharacterBoundsUpdateEvent": false,
      "CharacterData": false,
      "Clipboard": false,
      "ClipboardChangeEvent": false,
      "ClipboardEvent": false,
      "ClipboardItem": false,
      "CloseEvent": false,
      "CloseWatcher": false,
      "CommandEvent": false,
      "Comment": false,
      "CompositionEvent": false,
      "CompressionStream": false,
      "ConstantSourceNode": false,
      "ContentVisibilityAutoStateChangeEvent": false,
      "ConvolverNode": false,
      "CookieChangeEvent": false,
      "CookieDeprecationLabel": false,
      "CookieStore": false,
      "CookieStoreManager": false,
      "CountQueuingStrategy": false,
      "CreateMonitor": false,
      "Credential": false,
      "CredentialsContainer": false,
      "CropTarget": false,
      "Crypto": false,
      "CryptoKey": false,
      "CustomElementRegistry": false,
      "CustomEvent": false,
      "CustomStateSet": false,
      "DOMError": false,
      "DOMException": false,
      "DOMImplementation": false,
      "DOMMatrix": false,
      "DOMMatrixReadOnly": false,
      "DOMParser": false,
      "DOMPoint": false,
      "DOMPointReadOnly": false,
      "DOMQuad": false,
      "DOMRect": false,
      "DOMRectList": false,
      "DOMRectReadOnly": false,
      "DOMStringList": false,
      "DOMStringMap": false,
      "DOMTokenList": false,
      "DataTransfer": false,
      "DataTransferItem": false,
      "DataTransferItemList": false,
      "DecompressionStream": false,
      "DelayNode": false,
      "DelegatedInkTrailPresenter": false,
      "DeviceMotionEvent": false,
      "DeviceMotionEventAcceleration": false,
      "DeviceMotionEventRotationRate": false,
      "DeviceOrientationEvent": false,
      "DevicePosture": false,
      "DisposableStack": false,
      "Document": false,
      "DocumentFragment": false,
      "DocumentPictureInPicture": false,
      "DocumentPictureInPictureEvent": false,
      "DocumentTimeline": false,
      "DocumentType": false,
      "DragEvent": false,
      "DynamicsCompressorNode": false,
      "EditContext": false,
      "Element": false,
      "ElementInternals": false,
      "EncodedAudioChunk": false,
      "EncodedVideoChunk": false,
      "ErrorEvent": false,
      "Event": false,
      "EventCounts": false,
      "EventSource": false,
      "EventTarget": false,
      "External": false,
      "EyeDropper": false,
      "FeaturePolicy": false,
      "FederatedCredential": false,
      "Fence": false,
      "FencedFrameConfig": false,
      "FetchLaterResult": false,
      "File": false,
      "FileList": false,
      "FileReader": false,
      "FileSystem": false,
      "FileSystemDirectoryEntry": false,
      "FileSystemDirectoryHandle": false,
      "FileSystemDirectoryReader": false,
      "FileSystemEntry": false,
      "FileSystemFileEntry": false,
      "FileSystemFileHandle": false,
      "FileSystemHandle": false,
      "FileSystemObserver": false,
      "FileSystemWritableFileStream": false,
      "FocusEvent": false,
      "FontData": false,
      "FontFace": false,
      "FontFaceSet": false,
      "FontFaceSetLoadEvent": false,
      "FormData": false,
      "FormDataEvent": false,
      "FragmentDirective": false,
      "GPU": false,
      "GPUAdapter": false,
      "GPUAdapterInfo": false,
      "GPUBindGroup": false,
      "GPUBindGroupLayout": false,
      "GPUBuffer": false,
      "GPUBufferUsage": false,
      "GPUCanvasContext": false,
      "GPUColorWrite": false,
      "GPUCommandBuffer": false,
      "GPUCommandEncoder": false,
      "GPUCompilationInfo": false,
      "GPUCompilationMessage": false,
      "GPUComputePassEncoder": false,
      "GPUComputePipeline": false,
      "GPUDevice": false,
      "GPUDeviceLostInfo": false,
      "GPUError": false,
      "GPUExternalTexture": false,
      "GPUInternalError": false,
      "GPUMapMode": false,
      "GPUOutOfMemoryError": false,
      "GPUPipelineError": false,
      "GPUPipelineLayout": false,
      "GPUQuerySet": false,
      "GPUQueue": false,
      "GPURenderBundle": false,
      "GPURenderBundleEncoder": false,
      "GPURenderPassEncoder": false,
      "GPURenderPipeline": false,
      "GPUSampler": false,
      "GPUShaderModule": false,
      "GPUShaderStage": false,
      "GPUSupportedFeatures": false,
      "GPUSupportedLimits": false,
      "GPUTexture": false,
      "GPUTextureUsage": false,
      "GPUTextureView": false,
      "GPUUncapturedErrorEvent": false,
      "GPUValidationError": false,
      "GainNode": false,
      "Gamepad": false,
      "GamepadAxisMoveEvent": false,
      "GamepadButton": false,
      "GamepadButtonEvent": false,
      "GamepadEvent": false,
      "GamepadHapticActuator": false,
      "GamepadPose": false,
      "Geolocation": false,
      "GeolocationCoordinates": false,
      "GeolocationPosition": false,
      "GeolocationPositionError": false,
      "GravitySensor": false,
      "Gyroscope": false,
      "HID": false,
      "HIDConnectionEvent": false,
      "HIDDevice": false,
      "HIDInputReportEvent": false,
      "HTMLAllCollection": false,
      "HTMLAnchorElement": false,
      "HTMLAreaElement": false,
      "HTMLAudioElement": false,
      "HTMLBRElement": false,
      "HTMLBaseElement": false,
      "HTMLBodyElement": false,
      "HTMLButtonElement": false,
      "HTMLCanvasElement": false,
      "HTMLCollection": false,
      "HTMLDListElement": false,
      "HTMLDataElement": false,
      "HTMLDataListElement": false,
      "HTMLDetailsElement": false,
      "HTMLDialogElement": false,
      "HTMLDirectoryElement": false,
      "HTMLDivElement": false,
      "HTMLDocument": false,
      "HTMLElement": false,
      "HTMLEmbedElement": false,
      "HTMLFencedFrameElement": false,
      "HTMLFieldSetElement": false,
      "HTMLFontElement": false,
      "HTMLFormControlsCollection": false,
      "HTMLFormElement": false,
      "HTMLFrameElement": false,
      "HTMLFrameSetElement": false,
      "HTMLHRElement": false,
      "HTMLHeadElement": false,
      "HTMLHeadingElement": false,
      "HTMLHtmlElement": false,
      "HTMLIFrameElement": false,
      "HTMLImageElement": false,
      "HTMLInputElement": false,
      "HTMLLIElement": false,
      "HTMLLabelElement": false,
      "HTMLLegendElement": false,
      "HTMLLinkElement": false,
      "HTMLMapElement": false,
      "HTMLMarqueeElement": false,
      "HTMLMediaElement": false,
      "HTMLMenuElement": false,
      "HTMLMetaElement": false,
      "HTMLMeterElement": false,
      "HTMLModElement": false,
      "HTMLOListElement": false,
      "HTMLObjectElement": false,
      "HTMLOptGroupElement": false,
      "HTMLOptionElement": false,
      "HTMLOptionsCollection": false,
      "HTMLOutputElement": false,
      "HTMLParagraphElement": false,
      "HTMLParamElement": false,
      "HTMLPictureElement": false,
      "HTMLPreElement": false,
      "HTMLProgressElement": false,
      "HTMLQuoteElement": false,
      "HTMLScriptElement": false,
      "HTMLSelectElement": false,
      "HTMLSelectedContentElement": false,
      "HTMLSlotElement": false,
      "HTMLSourceElement": false,
      "HTMLSpanElement": false,
      "HTMLStyleElement": false,
      "HTMLTableCaptionElement": false,
      "HTMLTableCellElement": false,
      "HTMLTableColElement": false,
      "HTMLTableElement": false,
      "HTMLTableRowElement": false,
      "HTMLTableSectionElement": false,
      "HTMLTemplateElement": false,
      "HTMLTextAreaElement": false,
      "HTMLTimeElement": false,
      "HTMLTitleElement": false,
      "HTMLTrackElement": false,
      "HTMLUListElement": false,
      "HTMLUnknownElement": false,
      "HTMLVideoElement": false,
      "HashChangeEvent": false,
      "Headers": false,
      "Highlight": false,
      "HighlightRegistry": false,
      "History": false,
      "IDBCursor": false,
      "IDBCursorWithValue": false,
      "IDBDatabase": false,
      "IDBFactory": false,
      "IDBIndex": false,
      "IDBKeyRange": false,
      "IDBObjectStore": false,
      "IDBOpenDBRequest": false,
      "IDBRequest": false,
      "IDBTransaction": false,
      "IDBVersionChangeEvent": false,
      "IIRFilterNode": false,
      "IdentityCredential": false,
      "IdentityCredentialError": false,
      "IdentityProvider": false,
      "IdleDeadline": false,
      "IdleDetector": false,
      "Image": false,
      "ImageBitmap": false,
      "ImageBitmapRenderingContext": false,
      "ImageCapture": false,
      "ImageData": false,
      "ImageDecoder": false,
      "ImageTrack": false,
      "ImageTrackList": false,
      "Ink": false,
      "InputDeviceCapabilities": false,
      "InputDeviceInfo": false,
      "InputEvent": false,
      "IntegrityViolationReportBody": false,
      "IntersectionObserver": false,
      "IntersectionObserverEntry": false,
      "Keyboard": false,
      "KeyboardEvent": false,
      "KeyboardLayoutMap": false,
      "KeyframeEffect": false,
      "LanguageDetector": false,
      "LargestContentfulPaint": false,
      "LaunchParams": false,
      "LaunchQueue": false,
      "LayoutShift": false,
      "LayoutShiftAttribution": false,
      "LinearAccelerationSensor": false,
      "Location": false,
      "Lock": false,
      "LockManager": false,
      "MIDIAccess": false,
      "MIDIConnectionEvent": false,
      "MIDIInput": false,
      "MIDIInputMap": false,
      "MIDIMessageEvent": false,
      "MIDIOutput": false,
      "MIDIOutputMap": false,
      "MIDIPort": false,
      "MathMLElement": false,
      "MediaCapabilities": false,
      "MediaCapabilitiesInfo": false,
      "MediaDeviceInfo": false,
      "MediaDevices": false,
      "MediaElementAudioSourceNode": false,
      "MediaEncryptedEvent": false,
      "MediaError": false,
      "MediaKeyError": false,
      "MediaKeyMessageEvent": false,
      "MediaKeySession": false,
      "MediaKeyStatusMap": false,
      "MediaKeySystemAccess": false,
      "MediaKeys": false,
      "MediaList": false,
      "MediaMetadata": false,
      "MediaQueryList": false,
      "MediaQueryListEvent": false,
      "MediaRecorder": false,
      "MediaRecorderErrorEvent": false,
      "MediaSession": false,
      "MediaSource": false,
      "MediaSourceHandle": false,
      "MediaStream": false,
      "MediaStreamAudioDestinationNode": false,
      "MediaStreamAudioSourceNode": false,
      "MediaStreamEvent": false,
      "MediaStreamTrack": false,
      "MediaStreamTrackAudioSourceNode": false,
      "MediaStreamTrackAudioStats": false,
      "MediaStreamTrackEvent": false,
      "MediaStreamTrackGenerator": false,
      "MediaStreamTrackProcessor": false,
      "MediaStreamTrackVideoStats": false,
      "MessageChannel": false,
      "MessageEvent": false,
      "MessagePort": false,
      "MimeType": false,
      "MimeTypeArray": false,
      "ModelGenericSession": false,
      "ModelManager": false,
      "MouseEvent": false,
      "MutationEvent": false,
      "MutationObserver": false,
      "MutationRecord": false,
      "NamedNodeMap": false,
      "NavigateEvent": false,
      "Navigation": false,
      "NavigationActivation": false,
      "NavigationCurrentEntryChangeEvent": false,
      "NavigationDestination": false,
      "NavigationHistoryEntry": false,
      "NavigationPreloadManager": false,
      "NavigationTransition": false,
      "Navigator": false,
      "NavigatorLogin": false,
      "NavigatorManagedData": false,
      "NavigatorUAData": false,
      "NetworkInformation": false,
      "Node": false,
      "NodeFilter": false,
      "NodeIterator": false,
      "NodeList": false,
      "NotRestoredReasonDetails": false,
      "NotRestoredReasons": false,
      "Notification": false,
      "NotifyPaintEvent": false,
      "OTPCredential": false,
      "Observable": false,
      "OfflineAudioCompletionEvent": false,
      "OfflineAudioContext": false,
      "OffscreenCanvas": false,
      "OffscreenCanvasRenderingContext2D": false,
      "Option": false,
      "OrientationSensor": false,
      "OscillatorNode": false,
      "OverconstrainedError": false,
      "PERSISTENT": false,
      "PageRevealEvent": false,
      "PageSwapEvent": false,
      "PageTransitionEvent": false,
      "PannerNode": false,
      "PasswordCredential": false,
      "Path2D": false,
      "PaymentAddress": false,
      "PaymentManager": false,
      "PaymentMethodChangeEvent": false,
      "PaymentRequest": false,
      "PaymentRequestUpdateEvent": false,
      "PaymentResponse": false,
      "Performance": false,
      "PerformanceElementTiming": false,
      "PerformanceEntry": false,
      "PerformanceEventTiming": false,
      "PerformanceLongAnimationFrameTiming": false,
      "PerformanceLongTaskTiming": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceNavigation": false,
      "PerformanceNavigationTiming": false,
      "PerformanceObserver": false,
      "PerformanceObserverEntryList": false,
      "PerformancePaintTiming": false,
      "PerformanceResourceTiming": false,
      "PerformanceScriptTiming": false,
      "PerformanceServerTiming": false,
      "PerformanceTiming": false,
      "PeriodicSyncManager": false,
      "PeriodicWave": false,
      "PermissionStatus": false,
      "Permissions": false,
      "PictureInPictureEvent": false,
      "PictureInPictureWindow": false,
      "Plugin": false,
      "PluginArray": false,
      "PointerEvent": false,
      "PopStateEvent": false,
      "Presentation": false,
      "PresentationAvailability": false,
      "PresentationConnection": false,
      "PresentationConnectionAvailableEvent": false,
      "PresentationConnectionCloseEvent": false,
      "PresentationConnectionList": false,
      "PresentationReceiver": false,
      "PresentationRequest": false,
      "PressureObserver": false,
      "PressureRecord": false,
      "ProcessingInstruction": false,
      "Profiler": false,
      "ProgressEvent": false,
      "PromiseRejectionEvent": false,
      "ProtectedAudience": false,
      "PublicKeyCredential": false,
      "PushManager": false,
      "PushSubscription": false,
      "PushSubscriptionOptions": false,
      "QuotaExceededError": false,
      "RTCCertificate": false,
      "RTCDTMFSender": false,
      "RTCDTMFToneChangeEvent": false,
      "RTCDataChannel": false,
      "RTCDataChannelEvent": false,
      "RTCDtlsTransport": false,
      "RTCEncodedAudioFrame": false,
      "RTCEncodedVideoFrame": false,
      "RTCError": false,
      "RTCErrorEvent": false,
      "RTCIceCandidate": false,
      "RTCIceTransport": false,
      "RTCPeerConnection": false,
      "RTCPeerConnectionIceErrorEvent": false,
      "RTCPeerConnectionIceEvent": false,
      "RTCRtpReceiver": false,
      "RTCRtpScriptTransform": false,
      "RTCRtpSender": false,
      "RTCRtpTransceiver": false,
      "RTCSctpTransport": false,
      "RTCSessionDescription": false,
      "RTCStatsReport": false,
      "RTCTrackEvent": false,
      "RadioNodeList": false,
      "Range": false,
      "ReadableByteStreamController": false,
      "ReadableStream": false,
      "ReadableStreamBYOBReader": false,
      "ReadableStreamBYOBRequest": false,
      "ReadableStreamDefaultController": false,
      "ReadableStreamDefaultReader": false,
      "RelativeOrientationSensor": false,
      "RemotePlayback": false,
      "ReportBody": false,
      "ReportingObserver": false,
      "Request": false,
      "ResizeObserver": false,
      "ResizeObserverEntry": false,
      "ResizeObserverSize": false,
      "Response": false,
      "RestrictionTarget": false,
      "SVGAElement": false,
      "SVGAngle": false,
      "SVGAnimateElement": false,
      "SVGAnimateMotionElement": false,
      "SVGAnimateTransformElement": false,
      "SVGAnimatedAngle": false,
      "SVGAnimatedBoolean": false,
      "SVGAnimatedEnumeration": false,
      "SVGAnimatedInteger": false,
      "SVGAnimatedLength": false,
      "SVGAnimatedLengthList": false,
      "SVGAnimatedNumber": false,
      "SVGAnimatedNumberList": false,
      "SVGAnimatedPreserveAspectRatio": false,
      "SVGAnimatedRect": false,
      "SVGAnimatedString": false,
      "SVGAnimatedTransformList": false,
      "SVGAnimationElement": false,
      "SVGCircleElement": false,
      "SVGClipPathElement": false,
      "SVGComponentTransferFunctionElement": false,
      "SVGDefsElement": false,
      "SVGDescElement": false,
      "SVGElement": false,
      "SVGEllipseElement": false,
      "SVGFEBlendElement": false,
      "SVGFEColorMatrixElement": false,
      "SVGFEComponentTransferElement": false,
      "SVGFECompositeElement": false,
      "SVGFEConvolveMatrixElement": false,
      "SVGFEDiffuseLightingElement": false,
      "SVGFEDisplacementMapElement": false,
      "SVGFEDistantLightElement": false,
      "SVGFEDropShadowElement": false,
      "SVGFEFloodElement": false,
      "SVGFEFuncAElement": false,
      "SVGFEFuncBElement": false,
      "SVGFEFuncGElement": false,
      "SVGFEFuncRElement": false,
      "SVGFEGaussianBlurElement": false,
      "SVGFEImageElement": false,
      "SVGFEMergeElement": false,
      "SVGFEMergeNodeElement": false,
      "SVGFEMorphologyElement": false,
      "SVGFEOffsetElement": false,
      "SVGFEPointLightElement": false,
      "SVGFESpecularLightingElement": false,
      "SVGFESpotLightElement": false,
      "SVGFETileElement": false,
      "SVGFETurbulenceElement": false,
      "SVGFilterElement": false,
      "SVGForeignObjectElement": false,
      "SVGGElement": false,
      "SVGGeometryElement": false,
      "SVGGradientElement": false,
      "SVGGraphicsElement": false,
      "SVGImageElement": false,
      "SVGLength": false,
      "SVGLengthList": false,
      "SVGLineElement": false,
      "SVGLinearGradientElement": false,
      "SVGMPathElement": false,
      "SVGMarkerElement": false,
      "SVGMaskElement": false,
      "SVGMatrix": false,
      "SVGMetadataElement": false,
      "SVGNumber": false,
      "SVGNumberList": false,
      "SVGPathElement": false,
      "SVGPatternElement": false,
      "SVGPoint": false,
      "SVGPointList": false,
      "SVGPolygonElement": false,
      "SVGPolylineElement": false,
      "SVGPreserveAspectRatio": false,
      "SVGRadialGradientElement": false,
      "SVGRect": false,
      "SVGRectElement": false,
      "SVGSVGElement": false,
      "SVGScriptElement": false,
      "SVGSetElement": false,
      "SVGStopElement": false,
      "SVGStringList": false,
      "SVGStyleElement": false,
      "SVGSwitchElement": false,
      "SVGSymbolElement": false,
      "SVGTSpanElement": false,
      "SVGTextContentElement": false,
      "SVGTextElement": false,
      "SVGTextPathElement": false,
      "SVGTextPositioningElement": false,
      "SVGTitleElement": false,
      "SVGTransform": false,
      "SVGTransformList": false,
      "SVGUnitTypes": false,
      "SVGUseElement": false,
      "SVGViewElement": false,
      "Scheduler": false,
      "Scheduling": false,
      "Screen": false,
      "ScreenDetailed": false,
      "ScreenDetails": false,
      "ScreenOrientation": false,
      "ScriptProcessorNode": false,
      "ScrollTimeline": false,
      "SecurityPolicyViolationEvent": false,
      "Selection": false,
      "Sensor": false,
      "SensorErrorEvent": false,
      "Serial": false,
      "SerialPort": false,
      "ServiceWorker": false,
      "ServiceWorkerContainer": false,
      "ServiceWorkerRegistration": false,
      "ShadowRoot": false,
      "SharedStorage": false,
      "SharedStorageAppendMethod": false,
      "SharedStorageClearMethod": false,
      "SharedStorageDeleteMethod": false,
      "SharedStorageModifierMethod": false,
      "SharedStorageSetMethod": false,
      "SharedStorageWorklet": false,
      "SharedWorker": false,
      "SnapEvent": false,
      "SourceBuffer": false,
      "SourceBufferList": false,
      "SpeechGrammar": false,
      "SpeechGrammarList": false,
      "SpeechRecognition": false,
      "SpeechRecognitionErrorEvent": false,
      "SpeechRecognitionEvent": false,
      "SpeechSynthesis": false,
      "SpeechSynthesisErrorEvent": false,
      "SpeechSynthesisEvent": false,
      "SpeechSynthesisUtterance": false,
      "SpeechSynthesisVoice": false,
      "StaticRange": false,
      "StereoPannerNode": false,
      "Storage": false,
      "StorageBucket": false,
      "StorageBucketManager": false,
      "StorageEvent": false,
      "StorageManager": false,
      "StylePropertyMap": false,
      "StylePropertyMapReadOnly": false,
      "StyleSheet": false,
      "StyleSheetList": false,
      "SubmitEvent": false,
      "Subscriber": false,
      "SubtleCrypto": false,
      "Summarizer": false,
      "SuppressedError": false,
      "SyncManager": false,
      "TEMPORARY": false,
      "TaskAttributionTiming": false,
      "TaskController": false,
      "TaskPriorityChangeEvent": false,
      "TaskSignal": false,
      "Text": false,
      "TextDecoder": false,
      "TextDecoderStream": false,
      "TextEncoder": false,
      "TextEncoderStream": false,
      "TextEvent": false,
      "TextFormat": false,
      "TextFormatUpdateEvent": false,
      "TextMetrics": false,
      "TextTrack": false,
      "TextTrackCue": false,
      "TextTrackCueList": false,
      "TextTrackList": false,
      "TextUpdateEvent": false,
      "TimeEvent": false,
      "TimeRanges": false,
      "ToggleEvent": false,
      "Touch": false,
      "TouchEvent": false,
      "TouchList": false,
      "TrackEvent": false,
      "TransformStream": false,
      "TransformStreamDefaultController": false,
      "TransitionEvent": false,
      "Translator": false,
      "TreeWalker": false,
      "TrustedHTML": false,
      "TrustedScript": false,
      "TrustedScriptURL": false,
      "TrustedTypePolicy": false,
      "TrustedTypePolicyFactory": false,
      "UIEvent": false,
      "URL": false,
      "URLPattern": false,
      "URLSearchParams": false,
      "USB": false,
      "USBAlternateInterface": false,
      "USBConfiguration": false,
      "USBConnectionEvent": false,
      "USBDevice": false,
      "USBEndpoint": false,
      "USBInTransferResult": false,
      "USBInterface": false,
      "USBIsochronousInTransferPacket": false,
      "USBIsochronousInTransferResult": false,
      "USBIsochronousOutTransferPacket": false,
      "USBIsochronousOutTransferResult": false,
      "USBOutTransferResult": false,
      "UserActivation": false,
      "VTTCue": false,
      "VTTRegion": false,
      "ValidityState": false,
      "VideoColorSpace": false,
      "VideoDecoder": false,
      "VideoEncoder": false,
      "VideoFrame": false,
      "VideoPlaybackQuality": false,
      "ViewTimeline": false,
      "ViewTransition": false,
      "ViewTransitionTypeSet": false,
      "Viewport": false,
      "VirtualKeyboard": false,
      "VirtualKeyboardGeometryChangeEvent": false,
      "VisibilityStateEntry": false,
      "VisualViewport": false,
      "WGSLLanguageFeatures": false,
      "WakeLock": false,
      "WakeLockSentinel": false,
      "WaveShaperNode": false,
      "WebAssembly": false,
      "WebGL2RenderingContext": false,
      "WebGLActiveInfo": false,
      "WebGLBuffer": false,
      "WebGLContextEvent": false,
      "WebGLFramebuffer": false,
      "WebGLObject": false,
      "WebGLProgram": false,
      "WebGLQuery": false,
      "WebGLRenderbuffer": false,
      "WebGLRenderingContext": false,
      "WebGLSampler": false,
      "WebGLShader": false,
      "WebGLShaderPrecisionFormat": false,
      "WebGLSync": false,
      "WebGLTexture": false,
      "WebGLTransformFeedback": false,
      "WebGLUniformLocation": false,
      "WebGLVertexArrayObject": false,
      "WebSocket": false,
      "WebSocketError": false,
      "WebSocketStream": false,
      "WebTransport": false,
      "WebTransportBidirectionalStream": false,
      "WebTransportDatagramDuplexStream": false,
      "WebTransportError": false,
      "WebTransportReceiveStream": false,
      "WebTransportSendStream": false,
      "WheelEvent": false,
      "Window": false,
      "WindowControlsOverlay": false,
      "WindowControlsOverlayGeometryChangeEvent": false,
      "Worker": false,
      "Worklet": false,
      "WorkletGlobalScope": false,
      "WritableStream": false,
      "WritableStreamDefaultController": false,
      "WritableStreamDefaultWriter": false,
      "XMLDocument": false,
      "XMLHttpRequest": false,
      "XMLHttpRequestEventTarget": false,
      "XMLHttpRequestUpload": false,
      "XMLSerializer": false,
      "XPathEvaluator": false,
      "XPathExpression": false,
      "XPathResult": false,
      "XRAnchor": false,
      "XRAnchorSet": false,
      "XRBoundedReferenceSpace": false,
      "XRCPUDepthInformation": false,
      "XRCamera": false,
      "XRDOMOverlayState": false,
      "XRDepthInformation": false,
      "XRFrame": false,
      "XRHand": false,
      "XRHitTestResult": false,
      "XRHitTestSource": false,
      "XRInputSource": false,
      "XRInputSourceArray": false,
      "XRInputSourceEvent": false,
      "XRInputSourcesChangeEvent": false,
      "XRJointPose": false,
      "XRJointSpace": false,
      "XRLayer": false,
      "XRLightEstimate": false,
      "XRLightProbe": false,
      "XRPose": false,
      "XRRay": false,
      "XRReferenceSpace": false,
      "XRReferenceSpaceEvent": false,
      "XRRenderState": false,
      "XRRigidTransform": false,
      "XRSession": false,
      "XRSessionEvent": false,
      "XRSpace": false,
      "XRSystem": false,
      "XRTransientInputHitTestResult": false,
      "XRTransientInputHitTestSource": false,
      "XRView": false,
      "XRViewerPose": false,
      "XRViewport": false,
      "XRWebGLBinding": false,
      "XRWebGLDepthInformation": false,
      "XRWebGLLayer": false,
      "XSLTProcessor": false,
      "addEventListener": false,
      "ai": false,
      "alert": false,
      "atob": false,
      "blur": false,
      "btoa": false,
      "caches": false,
      "cancelAnimationFrame": false,
      "cancelIdleCallback": false,
      "clearInterval": false,
      "clearTimeout": false,
      "clientInformation": false,
      "close": false,
      "closed": false,
      "confirm": false,
      "console": false,
      "cookieStore": false,
      "createImageBitmap": false,
      "credentialless": false,
      "crossOriginIsolated": false,
      "crypto": false,
      "currentFrame": false,
      "currentTime": false,
      "customElements": false,
      "devicePixelRatio": false,
      "dispatchEvent": false,
      "document": false,
      "documentPictureInPicture": false,
      "event": false,
      "external": false,
      "fence": false,
      "fetch": false,
      "fetchLater": false,
      "find": false,
      "focus": false,
      "frameElement": false,
      "frames": false,
      "getComputedStyle": false,
      "getScreenDetails": false,
      "getSelection": false,
      "history": false,
      "indexedDB": false,
      "innerHeight": false,
      "innerWidth": false,
      "isSecureContext": false,
      "launchQueue": false,
      "length": false,
      "localStorage": false,
      "location": true,
      "locationbar": false,
      "matchMedia": false,
      "menubar": false,
      "model": false,
      "moveBy": false,
      "moveTo": false,
      "name": false,
      "navigation": false,
      "navigator": false,
      "offscreenBuffering": false,
      "onabort": true,
      "onafterprint": true,
      "onanimationcancel": true,
      "onanimationend": true,
      "onanimationiteration": true,
      "onanimationstart": true,
      "onappinstalled": true,
      "onauxclick": true,
      "onbeforeinput": true,
      "onbeforeinstallprompt": true,
      "onbeforematch": true,
      "onbeforeprint": true,
      "onbeforetoggle": true,
      "onbeforeunload": true,
      "onbeforexrselect": true,
      "onblur": true,
      "oncancel": true,
      "oncanplay": true,
      "oncanplaythrough": true,
      "onchange": true,
      "onclick": true,
      "onclose": true,
      "oncommand": true,
      "oncontentvisibilityautostatechange": true,
      "oncontextlost": true,
      "oncontextmenu": true,
      "oncontextrestored": true,
      "oncopy": true,
      "oncuechange": true,
      "oncut": true,
      "ondblclick": true,
      "ondevicemotion": true,
      "ondeviceorientation": true,
      "ondeviceorientationabsolute": true,
      "ondrag": true,
      "ondragend": true,
      "ondragenter": true,
      "ondragleave": true,
      "ondragover": true,
      "ondragstart": true,
      "ondrop": true,
      "ondurationchange": true,
      "onemptied": true,
      "onended": true,
      "onerror": true,
      "onfocus": true,
      "onformdata": true,
      "ongamepadconnected": true,
      "ongamepaddisconnected": true,
      "ongotpointercapture": true,
      "onhashchange": true,
      "oninput": true,
      "oninvalid": true,
      "onkeydown": true,
      "onkeypress": true,
      "onkeyup": true,
      "onlanguagechange": true,
      "onload": true,
      "onloadeddata": true,
      "onloadedmetadata": true,
      "onloadstart": true,
      "onlostpointercapture": true,
      "onmessage": true,
      "onmessageerror": true,
      "onmousedown": true,
      "onmouseenter": true,
      "onmouseleave": true,
      "onmousemove": true,
      "onmouseout": true,
      "onmouseover": true,
      "onmouseup": true,
      "onmousewheel": true,
      "onoffline": true,
      "ononline": true,
      "onpagehide": true,
      "onpagereveal": true,
      "onpageshow": true,
      "onpageswap": true,
      "onpaste": true,
      "onpause": true,
      "onplay": true,
      "onplaying": true,
      "onpointercancel": true,
      "onpointerdown": true,
      "onpointerenter": true,
      "onpointerleave": true,
      "onpointermove": true,
      "onpointerout": true,
      "onpointerover": true,
      "onpointerrawupdate": true,
      "onpointerup": true,
      "onpopstate": true,
      "onprogress": true,
      "onratechange": true,
      "onrejectionhandled": true,
      "onreset": true,
      "onresize": true,
      "onscroll": true,
      "onscrollend": true,
      "onscrollsnapchange": true,
      "onscrollsnapchanging": true,
      "onsearch": true,
      "onsecuritypolicyviolation": true,
      "onseeked": true,
      "onseeking": true,
      "onselect": true,
      "onselectionchange": true,
      "onselectstart": true,
      "onslotchange": true,
      "onstalled": true,
      "onstorage": true,
      "onsubmit": true,
      "onsuspend": true,
      "ontimeupdate": true,
      "ontoggle": true,
      "ontransitioncancel": true,
      "ontransitionend": true,
      "ontransitionrun": true,
      "ontransitionstart": true,
      "onunhandledrejection": true,
      "onunload": true,
      "onvolumechange": true,
      "onwaiting": true,
      "onwheel": true,
      "open": false,
      "opener": false,
      "origin": false,
      "originAgentCluster": false,
      "outerHeight": false,
      "outerWidth": false,
      "pageXOffset": false,
      "pageYOffset": false,
      "parent": false,
      "performance": false,
      "personalbar": false,
      "postMessage": false,
      "print": false,
      "prompt": false,
      "queryLocalFonts": false,
      "queueMicrotask": false,
      "registerProcessor": false,
      "removeEventListener": false,
      "reportError": false,
      "requestAnimationFrame": false,
      "requestIdleCallback": false,
      "resizeBy": false,
      "resizeTo": false,
      "sampleRate": false,
      "scheduler": false,
      "screen": false,
      "screenLeft": false,
      "screenTop": false,
      "screenX": false,
      "screenY": false,
      "scroll": false,
      "scrollBy": false,
      "scrollTo": false,
      "scrollX": false,
      "scrollY": false,
      "scrollbars": false,
      "self": false,
      "sessionStorage": false,
      "setInterval": false,
      "setTimeout": false,
      "sharedStorage": false,
      "showDirectoryPicker": false,
      "showOpenFilePicker": false,
      "showSaveFilePicker": false,
      "speechSynthesis": false,
      "status": false,
      "statusbar": false,
      "stop": false,
      "structuredClone": false,
      "styleMedia": false,
      "toolbar": false,
      "top": false,
      "trustedTypes": false,
      "viewport": false,
      "visualViewport": false,
      "when": false,
      "window": false,
    },
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true,
      },
      "jsxPragma": null,
    },
  },
  "name": "foundry/next",
  "rules": {
    "react/button-has-type": "off",
    "react/display-name": "off",
    "react/forbid-elements": "off",
    "react/jsx-boolean-value": "off",
    "react/jsx-child-element-spacing": "off",
    "react/jsx-closing-bracket-location": "off",
    "react/jsx-closing-tag-location": "off",
    "react/jsx-curly-brace-presence": "off",
    "react/jsx-curly-newline": "off",
    "react/jsx-curly-spacing": "off",
    "react/jsx-equals-spacing": "off",
    "react/jsx-first-prop-new-line": "off",
    "react/jsx-fragments": "off",
    "react/jsx-indent": "off",
    "react/jsx-indent-props": "off",
    "react/jsx-key": "off",
    "react/jsx-max-props-per-line": "off",
    "react/jsx-newline": "off",
    "react/jsx-no-comment-textnodes": "off",
    "react/jsx-no-duplicate-props": "off",
    "react/jsx-no-target-blank": "off",
    "react/jsx-no-useless-fragment": "off",
    "react/jsx-one-expression-per-line": "off",
    "react/jsx-props-no-multi-spaces": "off",
    "react/jsx-space-before-closing": "off",
    "react/jsx-tag-spacing": "off",
    "react/jsx-wrap-multilines": "off",
    "react/no-array-index-key": "off",
    "react/no-children-prop": "off",
    "react/no-danger": "off",
    "react/no-danger-with-children": "off",
    "react/prop-types": "off",
    "react/void-dom-elements-no-children": "off",
  },
  "settings": {
    "polyfills": [
      "Array.prototype.copyWithin",
      "Array.prototype.fill",
      "Array.prototype.find",
      "Array.prototype.findIndex",
      "Array.prototype.flagMap",
      "Array.prototype.flat",
      "Array.from",
      "Array.prototype.includes",
      "Array.of",
      "Function.name",
      "Map",
      "Number.EPSILON",
      "Number.isFinite",
      "Number.isInteger",
      "Number.isNaN",
      "Number.isSafeInteger",
      "Number.MAX_SAFE_INTEGER",
      "Number.MIN_SAFE_INTEGER",
      "Number.parseFloat",
      "Number.parseInt",
      "Object.assign",
      "Object.entries",
      "Object.getOwnPropertyDescriptors",
      "Object.keys",
      "Object.is",
      "Object.values",
      "Reflect",
      "RegExp",
      "Set",
      "Symbol",
      "String.prototype.codePointAt",
      "String.prototype.endsWith",
      "String.prototype.fromCodePoint",
      "String.prototype.includes",
      "String.prototype.padStart",
      "String.prototype.padEnd",
      "String.prototype.raw",
      "String.prototype.repeat",
      "String.prototype.startsWith",
      "String.prototype.trimLeft",
      "String.prototype.trimRight",
      "URL",
      "URLSearchParams",
      "WeakMap",
      "WeakSet",
      "Promise",
      "fetch",
    ],
    "react": {
      "version": "detect",
    },
  },
}
`;

exports[`eslint > configs > should match the snapshot for the node preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
    "**/*.{ts,tsx,cts,mts}",
  ],
  "languageOptions": {
    "globals": {
      "AbortController": false,
      "AbortSignal": false,
      "AggregateError": false,
      "Array": false,
      "ArrayBuffer": false,
      "Atomics": false,
      "BigInt": false,
      "BigInt64Array": false,
      "BigUint64Array": false,
      "Blob": false,
      "Boolean": false,
      "BroadcastChannel": false,
      "Buffer": false,
      "ByteLengthQueuingStrategy": false,
      "CloseEvent": false,
      "CompressionStream": false,
      "CountQueuingStrategy": false,
      "Crypto": false,
      "CryptoKey": false,
      "CustomEvent": false,
      "DOMException": false,
      "DataView": false,
      "Date": false,
      "DecompressionStream": false,
      "Error": false,
      "EvalError": false,
      "Event": false,
      "EventTarget": false,
      "File": false,
      "FinalizationRegistry": false,
      "Float32Array": false,
      "Float64Array": false,
      "FormData": false,
      "Function": false,
      "Headers": false,
      "Infinity": false,
      "Int16Array": false,
      "Int32Array": false,
      "Int8Array": false,
      "Intl": false,
      "JSON": false,
      "Map": false,
      "Math": false,
      "MessageChannel": false,
      "MessageEvent": false,
      "MessagePort": false,
      "NaN": false,
      "Navigator": false,
      "Number": false,
      "Object": false,
      "Performance": false,
      "PerformanceEntry": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceObserver": false,
      "PerformanceObserverEntryList": false,
      "PerformanceResourceTiming": false,
      "Promise": false,
      "Proxy": false,
      "RangeError": false,
      "ReadableByteStreamController": false,
      "ReadableStream": false,
      "ReadableStreamBYOBReader": false,
      "ReadableStreamBYOBRequest": false,
      "ReadableStreamDefaultController": false,
      "ReadableStreamDefaultReader": false,
      "ReferenceError": false,
      "Reflect": false,
      "RegExp": false,
      "Request": false,
      "Response": false,
      "Set": false,
      "SharedArrayBuffer": false,
      "String": false,
      "SubtleCrypto": false,
      "Symbol": false,
      "SyntaxError": false,
      "TextDecoder": false,
      "TextDecoderStream": false,
      "TextEncoder": false,
      "TextEncoderStream": false,
      "TransformStream": false,
      "TransformStreamDefaultController": false,
      "TypeError": false,
      "URIError": false,
      "URL": false,
      "URLSearchParams": false,
      "Uint16Array": false,
      "Uint32Array": false,
      "Uint8Array": false,
      "Uint8ClampedArray": false,
      "WeakMap": false,
      "WeakRef": false,
      "WeakSet": false,
      "WebAssembly": false,
      "WebSocket": false,
      "WritableStream": false,
      "WritableStreamDefaultController": false,
      "WritableStreamDefaultWriter": false,
      "__dirname": "off",
      "__filename": "off",
      "atob": false,
      "btoa": false,
      "clearImmediate": false,
      "clearInterval": false,
      "clearTimeout": false,
      "console": false,
      "crypto": false,
      "decodeURI": false,
      "decodeURIComponent": false,
      "encodeURI": false,
      "encodeURIComponent": false,
      "escape": false,
      "eval": false,
      "exports": "off",
      "fetch": false,
      "global": false,
      "globalThis": false,
      "isFinite": false,
      "isNaN": false,
      "module": "off",
      "navigator": false,
      "parseFloat": false,
      "parseInt": false,
      "performance": false,
      "process": false,
      "queueMicrotask": false,
      "require": "off",
      "setImmediate": false,
      "setInterval": false,
      "setTimeout": false,
      "structuredClone": false,
      "undefined": false,
      "unescape": false,
    },
    "sourceType": "module",
  },
  "name": "foundry/node",
  "plugins": {
    "n": {
      "configs": {
        "flat/all": {
          "languageOptions": {
            "globals": {
              "AbortController": false,
              "AbortSignal": false,
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Blob": false,
              "Boolean": false,
              "BroadcastChannel": false,
              "Buffer": false,
              "ByteLengthQueuingStrategy": false,
              "CloseEvent": false,
              "CompressionStream": false,
              "CountQueuingStrategy": false,
              "Crypto": false,
              "CryptoKey": false,
              "CustomEvent": false,
              "DOMException": false,
              "DataView": false,
              "Date": false,
              "DecompressionStream": false,
              "Error": false,
              "EvalError": false,
              "Event": false,
              "EventTarget": false,
              "File": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "FormData": false,
              "Function": false,
              "Headers": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "NaN": false,
              "Navigator": false,
              "Number": false,
              "Object": false,
              "Performance": false,
              "PerformanceEntry": false,
              "PerformanceMark": false,
              "PerformanceMeasure": false,
              "PerformanceObserver": false,
              "PerformanceObserverEntryList": false,
              "PerformanceResourceTiming": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReadableByteStreamController": false,
              "ReadableStream": false,
              "ReadableStreamBYOBReader": false,
              "ReadableStreamBYOBRequest": false,
              "ReadableStreamDefaultController": false,
              "ReadableStreamDefaultReader": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Request": false,
              "Response": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "SubtleCrypto": false,
              "Symbol": false,
              "SyntaxError": false,
              "TextDecoder": false,
              "TextDecoderStream": false,
              "TextEncoder": false,
              "TextEncoderStream": false,
              "TransformStream": false,
              "TransformStreamDefaultController": false,
              "TypeError": false,
              "URIError": false,
              "URL": false,
              "URLSearchParams": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "WebAssembly": false,
              "WebSocket": false,
              "WritableStream": false,
              "WritableStreamDefaultController": false,
              "WritableStreamDefaultWriter": false,
              "__dirname": "off",
              "__filename": "off",
              "atob": false,
              "btoa": false,
              "clearImmediate": false,
              "clearInterval": false,
              "clearTimeout": false,
              "console": false,
              "crypto": false,
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "off",
              "fetch": false,
              "global": false,
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "off",
              "navigator": false,
              "parseFloat": false,
              "parseInt": false,
              "performance": false,
              "process": false,
              "queueMicrotask": false,
              "require": "off",
              "setImmediate": false,
              "setInterval": false,
              "setTimeout": false,
              "structuredClone": false,
              "undefined": false,
              "unescape": false,
            },
            "sourceType": "module",
          },
          "name": "node/flat/all",
          "plugins": {
            "n": [Circular],
          },
          "rules": {
            "n/callback-return": "error",
            "n/exports-style": "error",
            "n/file-extension-in-import": "error",
            "n/global-require": "error",
            "n/handle-callback-err": "error",
            "n/hashbang": "error",
            "n/no-callback-literal": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-mixed-requires": "error",
            "n/no-new-require": "error",
            "n/no-path-concat": "error",
            "n/no-process-env": "error",
            "n/no-process-exit": "error",
            "n/no-restricted-import": "error",
            "n/no-restricted-require": "error",
            "n/no-sync": "error",
            "n/no-top-level-await": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": "error",
            "n/no-unsupported-features/node-builtins": "error",
            "n/prefer-global/buffer": "error",
            "n/prefer-global/console": "error",
            "n/prefer-global/process": "error",
            "n/prefer-global/text-decoder": "error",
            "n/prefer-global/text-encoder": "error",
            "n/prefer-global/url": "error",
            "n/prefer-global/url-search-params": "error",
            "n/prefer-node-protocol": "error",
            "n/prefer-promises/dns": "error",
            "n/prefer-promises/fs": "error",
            "n/process-exit-as-throw": "error",
          },
        },
        "flat/mixed-esm-and-cjs": [
          {
            "files": [
              "**/*.js",
            ],
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CloseEvent": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "off",
                "__filename": "off",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "off",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "off",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "off",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "module",
            },
            "name": "node/flat/recommended-module",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          {
            "files": [
              "**/*.mjs",
            ],
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CloseEvent": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "off",
                "__filename": "off",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "off",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "off",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "off",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "module",
            },
            "name": "node/flat/recommended-module",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          {
            "files": [
              "**/*.cjs",
            ],
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CloseEvent": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "readonly",
                "__filename": "readonly",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "writable",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "readonly",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "readonly",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "commonjs",
            },
            "name": "node/flat/recommended-script",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
        ],
        "flat/recommended": {
          "languageOptions": {
            "globals": {
              "AbortController": false,
              "AbortSignal": false,
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Blob": false,
              "Boolean": false,
              "BroadcastChannel": false,
              "Buffer": false,
              "ByteLengthQueuingStrategy": false,
              "CloseEvent": false,
              "CompressionStream": false,
              "CountQueuingStrategy": false,
              "Crypto": false,
              "CryptoKey": false,
              "CustomEvent": false,
              "DOMException": false,
              "DataView": false,
              "Date": false,
              "DecompressionStream": false,
              "Error": false,
              "EvalError": false,
              "Event": false,
              "EventTarget": false,
              "File": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "FormData": false,
              "Function": false,
              "Headers": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "NaN": false,
              "Navigator": false,
              "Number": false,
              "Object": false,
              "Performance": false,
              "PerformanceEntry": false,
              "PerformanceMark": false,
              "PerformanceMeasure": false,
              "PerformanceObserver": false,
              "PerformanceObserverEntryList": false,
              "PerformanceResourceTiming": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReadableByteStreamController": false,
              "ReadableStream": false,
              "ReadableStreamBYOBReader": false,
              "ReadableStreamBYOBRequest": false,
              "ReadableStreamDefaultController": false,
              "ReadableStreamDefaultReader": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Request": false,
              "Response": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "SubtleCrypto": false,
              "Symbol": false,
              "SyntaxError": false,
              "TextDecoder": false,
              "TextDecoderStream": false,
              "TextEncoder": false,
              "TextEncoderStream": false,
              "TransformStream": false,
              "TransformStreamDefaultController": false,
              "TypeError": false,
              "URIError": false,
              "URL": false,
              "URLSearchParams": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "WebAssembly": false,
              "WebSocket": false,
              "WritableStream": false,
              "WritableStreamDefaultController": false,
              "WritableStreamDefaultWriter": false,
              "__dirname": "off",
              "__filename": "off",
              "atob": false,
              "btoa": false,
              "clearImmediate": false,
              "clearInterval": false,
              "clearTimeout": false,
              "console": false,
              "crypto": false,
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "off",
              "fetch": false,
              "global": false,
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "off",
              "navigator": false,
              "parseFloat": false,
              "parseInt": false,
              "performance": false,
              "process": false,
              "queueMicrotask": false,
              "require": "off",
              "setImmediate": false,
              "setInterval": false,
              "setTimeout": false,
              "structuredClone": false,
              "undefined": false,
              "unescape": false,
            },
            "sourceType": "module",
          },
          "name": "node/flat/recommended-module",
          "plugins": {
            "n": [Circular],
          },
          "rules": {
            "n/hashbang": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-process-exit": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": [
              "error",
              {
                "ignores": [
                  "modules",
                ],
              },
            ],
            "n/no-unsupported-features/node-builtins": "error",
            "n/process-exit-as-throw": "error",
          },
        },
        "flat/recommended-module": {
          "languageOptions": {
            "globals": {
              "AbortController": false,
              "AbortSignal": false,
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Blob": false,
              "Boolean": false,
              "BroadcastChannel": false,
              "Buffer": false,
              "ByteLengthQueuingStrategy": false,
              "CloseEvent": false,
              "CompressionStream": false,
              "CountQueuingStrategy": false,
              "Crypto": false,
              "CryptoKey": false,
              "CustomEvent": false,
              "DOMException": false,
              "DataView": false,
              "Date": false,
              "DecompressionStream": false,
              "Error": false,
              "EvalError": false,
              "Event": false,
              "EventTarget": false,
              "File": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "FormData": false,
              "Function": false,
              "Headers": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "NaN": false,
              "Navigator": false,
              "Number": false,
              "Object": false,
              "Performance": false,
              "PerformanceEntry": false,
              "PerformanceMark": false,
              "PerformanceMeasure": false,
              "PerformanceObserver": false,
              "PerformanceObserverEntryList": false,
              "PerformanceResourceTiming": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReadableByteStreamController": false,
              "ReadableStream": false,
              "ReadableStreamBYOBReader": false,
              "ReadableStreamBYOBRequest": false,
              "ReadableStreamDefaultController": false,
              "ReadableStreamDefaultReader": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Request": false,
              "Response": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "SubtleCrypto": false,
              "Symbol": false,
              "SyntaxError": false,
              "TextDecoder": false,
              "TextDecoderStream": false,
              "TextEncoder": false,
              "TextEncoderStream": false,
              "TransformStream": false,
              "TransformStreamDefaultController": false,
              "TypeError": false,
              "URIError": false,
              "URL": false,
              "URLSearchParams": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "WebAssembly": false,
              "WebSocket": false,
              "WritableStream": false,
              "WritableStreamDefaultController": false,
              "WritableStreamDefaultWriter": false,
              "__dirname": "off",
              "__filename": "off",
              "atob": false,
              "btoa": false,
              "clearImmediate": false,
              "clearInterval": false,
              "clearTimeout": false,
              "console": false,
              "crypto": false,
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "off",
              "fetch": false,
              "global": false,
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "off",
              "navigator": false,
              "parseFloat": false,
              "parseInt": false,
              "performance": false,
              "process": false,
              "queueMicrotask": false,
              "require": "off",
              "setImmediate": false,
              "setInterval": false,
              "setTimeout": false,
              "structuredClone": false,
              "undefined": false,
              "unescape": false,
            },
            "sourceType": "module",
          },
          "name": "node/flat/recommended-module",
          "plugins": {
            "n": [Circular],
          },
          "rules": {
            "n/hashbang": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-process-exit": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": [
              "error",
              {
                "ignores": [
                  "modules",
                ],
              },
            ],
            "n/no-unsupported-features/node-builtins": "error",
            "n/process-exit-as-throw": "error",
          },
        },
        "flat/recommended-script": {
          "languageOptions": {
            "globals": {
              "AbortController": false,
              "AbortSignal": false,
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Blob": false,
              "Boolean": false,
              "BroadcastChannel": false,
              "Buffer": false,
              "ByteLengthQueuingStrategy": false,
              "CloseEvent": false,
              "CompressionStream": false,
              "CountQueuingStrategy": false,
              "Crypto": false,
              "CryptoKey": false,
              "CustomEvent": false,
              "DOMException": false,
              "DataView": false,
              "Date": false,
              "DecompressionStream": false,
              "Error": false,
              "EvalError": false,
              "Event": false,
              "EventTarget": false,
              "File": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "FormData": false,
              "Function": false,
              "Headers": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "NaN": false,
              "Navigator": false,
              "Number": false,
              "Object": false,
              "Performance": false,
              "PerformanceEntry": false,
              "PerformanceMark": false,
              "PerformanceMeasure": false,
              "PerformanceObserver": false,
              "PerformanceObserverEntryList": false,
              "PerformanceResourceTiming": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReadableByteStreamController": false,
              "ReadableStream": false,
              "ReadableStreamBYOBReader": false,
              "ReadableStreamBYOBRequest": false,
              "ReadableStreamDefaultController": false,
              "ReadableStreamDefaultReader": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Request": false,
              "Response": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "SubtleCrypto": false,
              "Symbol": false,
              "SyntaxError": false,
              "TextDecoder": false,
              "TextDecoderStream": false,
              "TextEncoder": false,
              "TextEncoderStream": false,
              "TransformStream": false,
              "TransformStreamDefaultController": false,
              "TypeError": false,
              "URIError": false,
              "URL": false,
              "URLSearchParams": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "WebAssembly": false,
              "WebSocket": false,
              "WritableStream": false,
              "WritableStreamDefaultController": false,
              "WritableStreamDefaultWriter": false,
              "__dirname": "readonly",
              "__filename": "readonly",
              "atob": false,
              "btoa": false,
              "clearImmediate": false,
              "clearInterval": false,
              "clearTimeout": false,
              "console": false,
              "crypto": false,
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "writable",
              "fetch": false,
              "global": false,
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "readonly",
              "navigator": false,
              "parseFloat": false,
              "parseInt": false,
              "performance": false,
              "process": false,
              "queueMicrotask": false,
              "require": "readonly",
              "setImmediate": false,
              "setInterval": false,
              "setTimeout": false,
              "structuredClone": false,
              "undefined": false,
              "unescape": false,
            },
            "sourceType": "commonjs",
          },
          "name": "node/flat/recommended-script",
          "plugins": {
            "n": [Circular],
          },
          "rules": {
            "n/hashbang": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-process-exit": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": [
              "error",
              {
                "ignores": [],
              },
            ],
            "n/no-unsupported-features/node-builtins": "error",
            "n/process-exit-as-throw": "error",
          },
        },
        "recommended": {
          "env": {
            "node": true,
          },
          "globals": {
            "AggregateError": false,
            "Array": false,
            "ArrayBuffer": false,
            "Atomics": false,
            "BigInt": false,
            "BigInt64Array": false,
            "BigUint64Array": false,
            "Boolean": false,
            "DataView": false,
            "Date": false,
            "Error": false,
            "EvalError": false,
            "FinalizationRegistry": false,
            "Float32Array": false,
            "Float64Array": false,
            "Function": false,
            "Infinity": false,
            "Int16Array": false,
            "Int32Array": false,
            "Int8Array": false,
            "Intl": false,
            "JSON": false,
            "Map": false,
            "Math": false,
            "NaN": false,
            "Number": false,
            "Object": false,
            "Promise": false,
            "Proxy": false,
            "RangeError": false,
            "ReferenceError": false,
            "Reflect": false,
            "RegExp": false,
            "Set": false,
            "SharedArrayBuffer": false,
            "String": false,
            "Symbol": false,
            "SyntaxError": false,
            "TypeError": false,
            "URIError": false,
            "Uint16Array": false,
            "Uint32Array": false,
            "Uint8Array": false,
            "Uint8ClampedArray": false,
            "WeakMap": false,
            "WeakRef": false,
            "WeakSet": false,
            "__dirname": "off",
            "__filename": "off",
            "decodeURI": false,
            "decodeURIComponent": false,
            "encodeURI": false,
            "encodeURIComponent": false,
            "escape": false,
            "eval": false,
            "exports": "off",
            "globalThis": false,
            "isFinite": false,
            "isNaN": false,
            "module": "off",
            "parseFloat": false,
            "parseInt": false,
            "require": "off",
            "undefined": false,
            "unescape": false,
          },
          "overrides": [
            {
              "env": {
                "node": true,
              },
              "files": [
                "*.cjs",
                ".*.cjs",
              ],
              "globals": {
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Boolean": false,
                "DataView": false,
                "Date": false,
                "Error": false,
                "EvalError": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "Function": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "NaN": false,
                "Number": false,
                "Object": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "Symbol": false,
                "SyntaxError": false,
                "TypeError": false,
                "URIError": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "__dirname": "readonly",
                "__filename": "readonly",
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "writable",
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "readonly",
                "parseFloat": false,
                "parseInt": false,
                "require": "readonly",
                "undefined": false,
                "unescape": false,
              },
              "parserOptions": {
                "ecmaFeatures": {
                  "globalReturn": true,
                },
                "ecmaVersion": 2021,
                "sourceType": "script",
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
            {
              "env": {
                "node": true,
              },
              "files": [
                "*.mjs",
                ".*.mjs",
              ],
              "globals": {
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Boolean": false,
                "DataView": false,
                "Date": false,
                "Error": false,
                "EvalError": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "Function": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "NaN": false,
                "Number": false,
                "Object": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "Symbol": false,
                "SyntaxError": false,
                "TypeError": false,
                "URIError": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "__dirname": "off",
                "__filename": "off",
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "off",
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "off",
                "parseFloat": false,
                "parseInt": false,
                "require": "off",
                "undefined": false,
                "unescape": false,
              },
              "parserOptions": {
                "ecmaFeatures": {
                  "globalReturn": false,
                },
                "ecmaVersion": 2021,
                "sourceType": "module",
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [
                      "modules",
                    ],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
          ],
          "parserOptions": {
            "ecmaFeatures": {
              "globalReturn": false,
            },
            "ecmaVersion": 2021,
            "sourceType": "module",
          },
          "plugins": [
            "n",
          ],
          "rules": {
            "n/hashbang": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-process-exit": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": [
              "error",
              {
                "ignores": [
                  "modules",
                ],
              },
            ],
            "n/no-unsupported-features/node-builtins": "error",
            "n/process-exit-as-throw": "error",
          },
        },
        "recommended-module": {
          "env": {
            "node": true,
          },
          "globals": {
            "AggregateError": false,
            "Array": false,
            "ArrayBuffer": false,
            "Atomics": false,
            "BigInt": false,
            "BigInt64Array": false,
            "BigUint64Array": false,
            "Boolean": false,
            "DataView": false,
            "Date": false,
            "Error": false,
            "EvalError": false,
            "FinalizationRegistry": false,
            "Float32Array": false,
            "Float64Array": false,
            "Function": false,
            "Infinity": false,
            "Int16Array": false,
            "Int32Array": false,
            "Int8Array": false,
            "Intl": false,
            "JSON": false,
            "Map": false,
            "Math": false,
            "NaN": false,
            "Number": false,
            "Object": false,
            "Promise": false,
            "Proxy": false,
            "RangeError": false,
            "ReferenceError": false,
            "Reflect": false,
            "RegExp": false,
            "Set": false,
            "SharedArrayBuffer": false,
            "String": false,
            "Symbol": false,
            "SyntaxError": false,
            "TypeError": false,
            "URIError": false,
            "Uint16Array": false,
            "Uint32Array": false,
            "Uint8Array": false,
            "Uint8ClampedArray": false,
            "WeakMap": false,
            "WeakRef": false,
            "WeakSet": false,
            "__dirname": "off",
            "__filename": "off",
            "decodeURI": false,
            "decodeURIComponent": false,
            "encodeURI": false,
            "encodeURIComponent": false,
            "escape": false,
            "eval": false,
            "exports": "off",
            "globalThis": false,
            "isFinite": false,
            "isNaN": false,
            "module": "off",
            "parseFloat": false,
            "parseInt": false,
            "require": "off",
            "undefined": false,
            "unescape": false,
          },
          "parserOptions": {
            "ecmaFeatures": {
              "globalReturn": false,
            },
            "ecmaVersion": 2021,
            "sourceType": "module",
          },
          "plugins": [
            "n",
          ],
          "rules": {
            "n/hashbang": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-process-exit": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": [
              "error",
              {
                "ignores": [
                  "modules",
                ],
              },
            ],
            "n/no-unsupported-features/node-builtins": "error",
            "n/process-exit-as-throw": "error",
          },
        },
        "recommended-script": {
          "env": {
            "node": true,
          },
          "globals": {
            "AggregateError": false,
            "Array": false,
            "ArrayBuffer": false,
            "Atomics": false,
            "BigInt": false,
            "BigInt64Array": false,
            "BigUint64Array": false,
            "Boolean": false,
            "DataView": false,
            "Date": false,
            "Error": false,
            "EvalError": false,
            "FinalizationRegistry": false,
            "Float32Array": false,
            "Float64Array": false,
            "Function": false,
            "Infinity": false,
            "Int16Array": false,
            "Int32Array": false,
            "Int8Array": false,
            "Intl": false,
            "JSON": false,
            "Map": false,
            "Math": false,
            "NaN": false,
            "Number": false,
            "Object": false,
            "Promise": false,
            "Proxy": false,
            "RangeError": false,
            "ReferenceError": false,
            "Reflect": false,
            "RegExp": false,
            "Set": false,
            "SharedArrayBuffer": false,
            "String": false,
            "Symbol": false,
            "SyntaxError": false,
            "TypeError": false,
            "URIError": false,
            "Uint16Array": false,
            "Uint32Array": false,
            "Uint8Array": false,
            "Uint8ClampedArray": false,
            "WeakMap": false,
            "WeakRef": false,
            "WeakSet": false,
            "__dirname": "readonly",
            "__filename": "readonly",
            "decodeURI": false,
            "decodeURIComponent": false,
            "encodeURI": false,
            "encodeURIComponent": false,
            "escape": false,
            "eval": false,
            "exports": "writable",
            "globalThis": false,
            "isFinite": false,
            "isNaN": false,
            "module": "readonly",
            "parseFloat": false,
            "parseInt": false,
            "require": "readonly",
            "undefined": false,
            "unescape": false,
          },
          "parserOptions": {
            "ecmaFeatures": {
              "globalReturn": true,
            },
            "ecmaVersion": 2021,
            "sourceType": "script",
          },
          "plugins": [
            "n",
          ],
          "rules": {
            "n/hashbang": "error",
            "n/no-deprecated-api": "error",
            "n/no-exports-assign": "error",
            "n/no-extraneous-import": "error",
            "n/no-extraneous-require": "error",
            "n/no-missing-import": "error",
            "n/no-missing-require": "error",
            "n/no-process-exit": "error",
            "n/no-unpublished-bin": "error",
            "n/no-unpublished-import": "error",
            "n/no-unpublished-require": "error",
            "n/no-unsupported-features/es-builtins": "error",
            "n/no-unsupported-features/es-syntax": [
              "error",
              {
                "ignores": [],
              },
            ],
            "n/no-unsupported-features/node-builtins": "error",
            "n/process-exit-as-throw": "error",
          },
        },
      },
      "meta": {
        "name": "eslint-plugin-n",
        "version": "17.23.1",
      },
      "rules": {
        "callback-return": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "require \`return\` statements after callbacks",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/callback-return.md",
            },
            "fixable": null,
            "messages": {
              "missingReturn": "Expected return with your callback function.",
            },
            "schema": [
              {
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
            ],
            "type": "suggestion",
          },
        },
        "exports-style": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`module.exports\` or \`exports\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/exports-style.md",
            },
            "fixable": "code",
            "messages": {
              "unexpectedAssignment": "Unexpected assignment to 'exports'. Don't modify 'exports' itself.",
              "unexpectedExports": "Unexpected access to 'exports'. Use 'module.exports' instead.",
              "unexpectedModuleExports": "Unexpected access to 'module.exports'. Use 'exports' instead.",
            },
            "schema": [
              {
                "enum": [
                  "module.exports",
                  "exports",
                ],
              },
              {
                "additionalProperties": false,
                "properties": {
                  "allowBatchAssign": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "file-extension-in-import": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce the style of file extensions in \`import\` declarations",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/file-extension-in-import.md",
            },
            "fixable": "code",
            "messages": {
              "forbidExt": "forbid file extension '{{ext}}'.",
              "requireExt": "require file extension '{{ext}}'.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
              {
                "additionalProperties": {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                "properties": {},
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "global-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "require \`require()\` calls to be placed at top-level module scope",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/global-require.md",
            },
            "fixable": null,
            "messages": {
              "unexpected": "Unexpected require().",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "handle-callback-err": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "require error handling in callbacks",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/handle-callback-err.md",
            },
            "fixable": null,
            "messages": {
              "expected": "Expected error to be handled.",
            },
            "schema": [
              {
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "hashbang": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "require correct usage of hashbang",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md",
            },
            "fixable": "code",
            "messages": {
              "expectedHashbang": "This file needs no shebang.",
              "expectedHashbangNode": "This file needs shebang "#!/usr/bin/env {{executableName}}".",
              "expectedLF": "This file must have Unix linebreaks (LF).",
              "unexpectedBOM": "This file must not have Unicode BOM.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "additionalExecutables": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "executableMap": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "^\\.\\w+$": {
                        "pattern": "^[\\w-]+$",
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                  "ignoreUnpublished": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-callback-literal": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce Node.js-style error-first callback pattern is followed",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-callback-literal.md",
            },
            "fixable": null,
            "messages": {
              "unexpectedLiteral": "Unexpected literal in error position of callback.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-deprecated-api": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow deprecated APIs",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-deprecated-api.md",
            },
            "fixable": null,
            "messages": {
              "deprecated": "{{name}} was deprecated since v{{version}}{{replace}}.",
              "removed": "{{name}} was deprecated since v{{version}}, and removed in v{{removed}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreGlobalItems": {
                    "additionalItems": false,
                    "items": {
                      "enum": [
                        "Buffer()",
                        "new Buffer()",
                        "COUNTER_NET_SERVER_CONNECTION",
                        "COUNTER_NET_SERVER_CONNECTION_CLOSE",
                        "COUNTER_HTTP_SERVER_REQUEST",
                        "COUNTER_HTTP_SERVER_RESPONSE",
                        "COUNTER_HTTP_CLIENT_REQUEST",
                        "COUNTER_HTTP_CLIENT_RESPONSE",
                        "GLOBAL",
                        "Intl.v8BreakIterator",
                        "require.extensions",
                        "root",
                        "process.EventEmitter",
                        "process.assert",
                        "process.binding",
                        "process.env.NODE_REPL_HISTORY_FILE",
                        "process.report.triggerReport",
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreIndirectDependencies": {
                    "type": "boolean",
                  },
                  "ignoreModuleItems": {
                    "additionalItems": false,
                    "items": {
                      "enum": [
                        "_linklist",
                        "_stream_wrap",
                        "async_hooks.currentId",
                        "async_hooks.triggerId",
                        "buffer.Buffer()",
                        "new buffer.Buffer()",
                        "buffer.SlowBuffer",
                        "constants",
                        "crypto._toBuf",
                        "crypto.Credentials",
                        "crypto.DEFAULT_ENCODING",
                        "crypto.createCipher",
                        "crypto.createCredentials",
                        "crypto.createDecipher",
                        "crypto.fips",
                        "crypto.prng",
                        "crypto.pseudoRandomBytes",
                        "crypto.rng",
                        "domain",
                        "events.EventEmitter.listenerCount",
                        "events.listenerCount",
                        "freelist",
                        "fs.SyncWriteStream",
                        "fs.exists",
                        "fs.lchmod",
                        "fs.lchmodSync",
                        "http.createClient",
                        "module.Module.createRequireFromPath",
                        "module.Module.requireRepl",
                        "module.Module._debug",
                        "module.createRequireFromPath",
                        "module.requireRepl",
                        "module._debug",
                        "net._setSimultaneousAccepts",
                        "os.getNetworkInterfaces",
                        "os.tmpDir",
                        "path._makeLong",
                        "process.EventEmitter",
                        "process.assert",
                        "process.binding",
                        "process.env.NODE_REPL_HISTORY_FILE",
                        "process.report.triggerReport",
                        "punycode",
                        "readline.codePointAt",
                        "readline.getStringWidth",
                        "readline.isFullWidthCodePoint",
                        "readline.stripVTControlCharacters",
                        "repl.REPLServer",
                        "repl.Recoverable",
                        "repl.REPL_MODE_MAGIC",
                        "repl.builtinModules",
                        "safe-buffer.Buffer()",
                        "new safe-buffer.Buffer()",
                        "safe-buffer.SlowBuffer",
                        "sys",
                        "timers.enroll",
                        "timers.unenroll",
                        "tls.CleartextStream",
                        "tls.CryptoStream",
                        "tls.SecurePair",
                        "tls.convertNPNProtocols",
                        "tls.createSecurePair",
                        "tls.parseCertString",
                        "tty.setRawMode",
                        "url.parse",
                        "url.resolve",
                        "util.debug",
                        "util.error",
                        "util.isArray",
                        "util.isBoolean",
                        "util.isBuffer",
                        "util.isDate",
                        "util.isError",
                        "util.isFunction",
                        "util.isNull",
                        "util.isNullOrUndefined",
                        "util.isNumber",
                        "util.isObject",
                        "util.isPrimitive",
                        "util.isRegExp",
                        "util.isString",
                        "util.isSymbol",
                        "util.isUndefined",
                        "util.log",
                        "util.print",
                        "util.pump",
                        "util.puts",
                        "util._extend",
                        "vm.runInDebugContext",
                        "zlib.BrotliCompress()",
                        "zlib.BrotliDecompress()",
                        "zlib.Deflate()",
                        "zlib.DeflateRaw()",
                        "zlib.Gunzip()",
                        "zlib.Gzip()",
                        "zlib.Inflate()",
                        "zlib.InflateRaw()",
                        "zlib.Unzip()",
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "version": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-exports-assign": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow the assignment to \`exports\`",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-exports-assign.md",
            },
            "fixable": null,
            "messages": {
              "forbidden": "Unexpected assignment to 'exports' variable. Use 'module.exports' instead.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-extraneous-import": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`import\` declarations which import extraneous modules",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-import.md",
            },
            "fixable": null,
            "messages": {
              "extraneous": ""{{moduleName}}" is extraneous.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowModules": {
                    "items": {
                      "pattern": "^(?:virtual:)?(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "resolvePaths": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolverConfig": {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-extraneous-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`require()\` expressions which import extraneous modules",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-require.md",
            },
            "fixable": null,
            "messages": {
              "extraneous": ""{{moduleName}}" is extraneous.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowModules": {
                    "items": {
                      "pattern": "^(?:virtual:)?(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "resolvePaths": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolverConfig": {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                  "tryExtensions": {
                    "items": {
                      "pattern": "^\\.",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-hide-core-modules": {
          "create": [Function],
          "meta": {
            "deprecated": true,
            "docs": {
              "description": "disallow third-party modules which are hiding core modules",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-hide-core-modules.md",
            },
            "fixable": null,
            "messages": {
              "unexpectedImport": "Unexpected import of third-party module '{{name}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "additionalItems": false,
                    "items": {
                      "enum": [
                        "assert",
                        "buffer",
                        "child_process",
                        "cluster",
                        "console",
                        "constants",
                        "crypto",
                        "dgram",
                        "dns",
                        "events",
                        "fs",
                        "http",
                        "https",
                        "module",
                        "net",
                        "os",
                        "path",
                        "querystring",
                        "readline",
                        "repl",
                        "stream",
                        "string_decoder",
                        "timers",
                        "tls",
                        "tty",
                        "url",
                        "util",
                        "vm",
                        "zlib",
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreDirectDependencies": {
                    "type": "boolean",
                  },
                  "ignoreIndirectDependencies": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-missing-import": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`import\` declarations which import missing modules",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-import.md",
            },
            "fixable": null,
            "messages": {
              "notFound": "{{resolveError}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowModules": {
                    "items": {
                      "pattern": "^(?:virtual:)?(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreTypeImport": {
                    "default": false,
                    "type": "boolean",
                  },
                  "resolvePaths": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolverConfig": {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                  "tryExtensions": {
                    "items": {
                      "pattern": "^\\.",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "tsconfigPath": {
                    "type": "string",
                  },
                  "typescriptExtensionMap": {
                    "oneOf": [
                      {
                        "items": {
                          "additionalItems": false,
                          "prefixItems": [
                            {
                              "pattern": "^(?:|\\.\\w+)$",
                              "type": "string",
                            },
                            {
                              "pattern": "^\\.\\w+$",
                              "type": "string",
                            },
                          ],
                          "type": "array",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      {
                        "enum": [
                          "react",
                          "react-jsx",
                          "react-jsxdev",
                          "react-native",
                          "preserve",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-missing-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`require()\` expressions which import missing modules",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-require.md",
            },
            "fixable": null,
            "messages": {
              "notFound": "{{resolveError}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowModules": {
                    "items": {
                      "pattern": "^(?:virtual:)?(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolvePaths": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolverConfig": {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                  "tryExtensions": {
                    "items": {
                      "pattern": "^\\.",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "tsconfigPath": {
                    "type": "string",
                  },
                  "typescriptExtensionMap": {
                    "oneOf": [
                      {
                        "items": {
                          "additionalItems": false,
                          "prefixItems": [
                            {
                              "pattern": "^(?:|\\.\\w+)$",
                              "type": "string",
                            },
                            {
                              "pattern": "^\\.\\w+$",
                              "type": "string",
                            },
                          ],
                          "type": "array",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      {
                        "enum": [
                          "react",
                          "react-jsx",
                          "react-jsxdev",
                          "react-native",
                          "preserve",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-mixed-requires": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`require\` calls to be mixed with regular variable declarations",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-mixed-requires.md",
            },
            "fixable": null,
            "messages": {
              "noMixCoreModuleFileComputed": "Do not mix core, module, file and computed requires.",
              "noMixRequire": "Do not mix 'require' and other declarations.",
            },
            "schema": [
              {
                "oneOf": [
                  {
                    "type": "boolean",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowCall": {
                        "type": "boolean",
                      },
                      "grouping": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "no-new-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`new\` operators with calls to \`require\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-new-require.md",
            },
            "fixable": null,
            "messages": {
              "noNewRequire": "Unexpected use of new with require.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-path-concat": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow string concatenation with \`__dirname\` and \`__filename\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-path-concat.md",
            },
            "fixable": null,
            "messages": {
              "usePathFunctions": "Use path.join() or path.resolve() instead of string concatenation.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-process-env": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow the use of \`process.env\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-env.md",
            },
            "fixable": null,
            "messages": {
              "unexpectedProcessEnv": "Unexpected use of process.env.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowedVariables": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-process-exit": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow the use of \`process.exit()\`",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-exit.md",
            },
            "fixable": null,
            "messages": {
              "noProcessExit": "Don't use process.exit(); throw an error instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-restricted-import": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow specified modules when loaded by \`import\` declarations",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-import.md",
            },
            "fixable": null,
            "messages": {
              "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}",
            },
            "schema": [
              {
                "additionalItems": false,
                "items": {
                  "anyOf": [
                    {
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "message": {
                          "type": "string",
                        },
                        "name": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          ],
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": "object",
                    },
                  ],
                },
                "type": "array",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-restricted-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow specified modules when loaded by \`require\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-require.md",
            },
            "fixable": null,
            "messages": {
              "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}",
            },
            "schema": [
              {
                "additionalItems": false,
                "items": {
                  "anyOf": [
                    {
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "message": {
                          "type": "string",
                        },
                        "name": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          ],
                        },
                      },
                      "required": [
                        "name",
                      ],
                      "type": "object",
                    },
                  ],
                },
                "type": "array",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-sync": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow synchronous methods",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-sync.md",
            },
            "fixable": null,
            "messages": {
              "noSync": "Unexpected sync method: '{{propertyName}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAtRootLevel": {
                    "default": false,
                    "type": "boolean",
                  },
                  "ignores": {
                    "default": [],
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "const": "file",
                            },
                            "name": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "const": "lib",
                            },
                            "name": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "const": "package",
                            },
                            "name": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-top-level-await": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow top-level \`await\` in published modules",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-top-level-await.md",
            },
            "fixable": null,
            "messages": {
              "forbidden": "Top-level \`await\` is forbidden in published modules.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "ignoreBin": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unpublished-bin": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`bin\` files that npm ignores",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-bin.md",
            },
            "fixable": null,
            "messages": {
              "invalidIgnored": "npm ignores '{{name}}'. Check 'files' field of 'package.json' or '.npmignore'.",
            },
            "schema": [
              {
                "properties": {
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unpublished-import": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`import\` declarations which import private modules",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-import.md",
            },
            "fixable": null,
            "messages": {
              "notPublished": ""{{name}}" is not published.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowModules": {
                    "items": {
                      "pattern": "^(?:virtual:)?(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "ignorePrivate": {
                    "default": true,
                    "type": "boolean",
                  },
                  "ignoreTypeImport": {
                    "default": false,
                    "type": "boolean",
                  },
                  "resolvePaths": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolverConfig": {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                  "tryExtensions": {
                    "items": {
                      "pattern": "^\\.",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unpublished-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow \`require()\` expressions which import private modules",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-require.md",
            },
            "fixable": null,
            "messages": {
              "notPublished": ""{{name}}" is not published.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowModules": {
                    "items": {
                      "pattern": "^(?:virtual:)?(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "ignorePrivate": {
                    "default": true,
                    "type": "boolean",
                  },
                  "resolvePaths": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "resolverConfig": {
                    "additionalProperties": true,
                    "properties": {},
                    "type": "object",
                  },
                  "tryExtensions": {
                    "items": {
                      "pattern": "^\\.",
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unsupported-features/es-builtins": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow unsupported ECMAScript built-ins on the specified version",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-builtins.md",
            },
            "fixable": null,
            "messages": {
              "not-experimental-till": "The '{{name}}' is not an experimental feature until Node.js {{experimental}}. The configured version range is '{{version}}'.",
              "not-supported-till": "The '{{name}}' is still an experimental feature and is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
              "not-supported-yet": "The '{{name}}' is still an experimental feature The configured version range is '{{version}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignores": {
                    "items": {
                      "enum": [
                        "AggregateError",
                        "Array",
                        "Array.from",
                        "Array.isArray",
                        "Array.length",
                        "Array.of",
                        "Array.toLocaleString",
                        "ArrayBuffer",
                        "ArrayBuffer.isView",
                        "Atomics",
                        "Atomics.add",
                        "Atomics.and",
                        "Atomics.compareExchange",
                        "Atomics.exchange",
                        "Atomics.isLockFree",
                        "Atomics.load",
                        "Atomics.notify",
                        "Atomics.or",
                        "Atomics.store",
                        "Atomics.sub",
                        "Atomics.wait",
                        "Atomics.waitAsync",
                        "Atomics.xor",
                        "BigInt",
                        "BigInt.asIntN",
                        "BigInt.asUintN",
                        "BigInt64Array",
                        "BigInt64Array.BYTES_PER_ELEMENT",
                        "BigInt64Array.from",
                        "BigInt64Array.name",
                        "BigInt64Array.of",
                        "BigUint64Array",
                        "BigUint64Array.BYTES_PER_ELEMENT",
                        "BigUint64Array.from",
                        "BigUint64Array.name",
                        "BigUint64Array.of",
                        "Boolean",
                        "DataView",
                        "Date",
                        "Date.UTC",
                        "Date.now",
                        "Date.parse",
                        "Date.toLocaleDateString",
                        "Date.toLocaleString",
                        "Date.toLocaleTimeString",
                        "Error",
                        "Error.cause",
                        "EvalError",
                        "FinalizationRegistry",
                        "Float32Array",
                        "Float32Array.BYTES_PER_ELEMENT",
                        "Float32Array.from",
                        "Float32Array.name",
                        "Float32Array.of",
                        "Float64Array",
                        "Float64Array.BYTES_PER_ELEMENT",
                        "Float64Array.from",
                        "Float64Array.name",
                        "Float64Array.of",
                        "Function",
                        "Function.length",
                        "Function.name",
                        "Infinity",
                        "Int16Array",
                        "Int16Array.BYTES_PER_ELEMENT",
                        "Int16Array.from",
                        "Int16Array.name",
                        "Int16Array.of",
                        "Int32Array",
                        "Int32Array.BYTES_PER_ELEMENT",
                        "Int32Array.from",
                        "Int32Array.name",
                        "Int32Array.of",
                        "Int8Array",
                        "Int8Array.BYTES_PER_ELEMENT",
                        "Int8Array.from",
                        "Int8Array.name",
                        "Int8Array.of",
                        "Intl",
                        "Intl.Collator",
                        "Intl.DateTimeFormat",
                        "Intl.DisplayNames",
                        "Intl.ListFormat",
                        "Intl.Locale",
                        "Intl.NumberFormat",
                        "Intl.PluralRules",
                        "Intl.RelativeTimeFormat",
                        "Intl.Segmenter",
                        "Intl.Segments",
                        "Intl.getCanonicalLocales",
                        "Intl.supportedValuesOf",
                        "JSON",
                        "JSON.parse",
                        "JSON.stringify",
                        "Map",
                        "Map.groupBy",
                        "Math",
                        "Math.E",
                        "Math.LN10",
                        "Math.LN2",
                        "Math.LOG10E",
                        "Math.LOG2E",
                        "Math.PI",
                        "Math.SQRT1_2",
                        "Math.SQRT2",
                        "Math.abs",
                        "Math.acos",
                        "Math.acosh",
                        "Math.asin",
                        "Math.asinh",
                        "Math.atan",
                        "Math.atan2",
                        "Math.atanh",
                        "Math.cbrt",
                        "Math.ceil",
                        "Math.clz32",
                        "Math.cos",
                        "Math.cosh",
                        "Math.exp",
                        "Math.expm1",
                        "Math.floor",
                        "Math.fround",
                        "Math.hypot",
                        "Math.imul",
                        "Math.log",
                        "Math.log10",
                        "Math.log1p",
                        "Math.log2",
                        "Math.max",
                        "Math.min",
                        "Math.pow",
                        "Math.random",
                        "Math.round",
                        "Math.sign",
                        "Math.sin",
                        "Math.sinh",
                        "Math.sqrt",
                        "Math.tan",
                        "Math.tanh",
                        "Math.trunc",
                        "NaN",
                        "Number.EPSILON",
                        "Number.MAX_SAFE_INTEGER",
                        "Number.MAX_VALUE",
                        "Number.MIN_SAFE_INTEGER",
                        "Number.MIN_VALUE",
                        "Number.NEGATIVE_INFINITY",
                        "Number.NaN",
                        "Number.POSITIVE_INFINITY",
                        "Number.isFinite",
                        "Number.isInteger",
                        "Number.isNaN",
                        "Number.isSafeInteger",
                        "Number.parseFloat",
                        "Number.parseInt",
                        "Number.toLocaleString",
                        "Object.assign",
                        "Object.create",
                        "Object.defineGetter",
                        "Object.defineProperties",
                        "Object.defineProperty",
                        "Object.defineSetter",
                        "Object.entries",
                        "Object.freeze",
                        "Object.fromEntries",
                        "Object.getOwnPropertyDescriptor",
                        "Object.getOwnPropertyDescriptors",
                        "Object.getOwnPropertyNames",
                        "Object.getOwnPropertySymbols",
                        "Object.getPrototypeOf",
                        "Object.groupBy",
                        "Object.hasOwn",
                        "Object.is",
                        "Object.isExtensible",
                        "Object.isFrozen",
                        "Object.isSealed",
                        "Object.keys",
                        "Object.lookupGetter",
                        "Object.lookupSetter",
                        "Object.preventExtensions",
                        "Object.proto",
                        "Object.seal",
                        "Object.setPrototypeOf",
                        "Object.values",
                        "Promise",
                        "Promise.all",
                        "Promise.allSettled",
                        "Promise.any",
                        "Promise.race",
                        "Promise.reject",
                        "Promise.resolve",
                        "Proxy",
                        "Proxy.revocable",
                        "RangeError",
                        "ReferenceError",
                        "Reflect",
                        "Reflect.apply",
                        "Reflect.construct",
                        "Reflect.defineProperty",
                        "Reflect.deleteProperty",
                        "Reflect.get",
                        "Reflect.getOwnPropertyDescriptor",
                        "Reflect.getPrototypeOf",
                        "Reflect.has",
                        "Reflect.isExtensible",
                        "Reflect.ownKeys",
                        "Reflect.preventExtensions",
                        "Reflect.set",
                        "Reflect.setPrototypeOf",
                        "RegExp",
                        "RegExp.dotAll",
                        "RegExp.hasIndices",
                        "RegExp.input",
                        "RegExp.lastIndex",
                        "RegExp.lastMatch",
                        "RegExp.lastParen",
                        "RegExp.leftContext",
                        "RegExp.n",
                        "RegExp.rightContext",
                        "Set",
                        "SharedArrayBuffer",
                        "String",
                        "String.fromCharCode",
                        "String.fromCodePoint",
                        "String.length",
                        "String.localeCompare",
                        "String.raw",
                        "String.toLocaleLowerCase",
                        "String.toLocaleUpperCase",
                        "Symbol",
                        "Symbol.asyncIterator",
                        "Symbol.for",
                        "Symbol.hasInstance",
                        "Symbol.isConcatSpreadable",
                        "Symbol.iterator",
                        "Symbol.keyFor",
                        "Symbol.match",
                        "Symbol.matchAll",
                        "Symbol.replace",
                        "Symbol.search",
                        "Symbol.species",
                        "Symbol.split",
                        "Symbol.toPrimitive",
                        "Symbol.toStringTag",
                        "Symbol.unscopables",
                        "SyntaxError",
                        "TypeError",
                        "URIError",
                        "Uint16Array",
                        "Uint16Array.BYTES_PER_ELEMENT",
                        "Uint16Array.from",
                        "Uint16Array.name",
                        "Uint16Array.of",
                        "Uint32Array",
                        "Uint32Array.BYTES_PER_ELEMENT",
                        "Uint32Array.from",
                        "Uint32Array.name",
                        "Uint32Array.of",
                        "Uint8Array",
                        "Uint8Array.BYTES_PER_ELEMENT",
                        "Uint8Array.from",
                        "Uint8Array.name",
                        "Uint8Array.of",
                        "Uint8ClampedArray",
                        "Uint8ClampedArray.BYTES_PER_ELEMENT",
                        "Uint8ClampedArray.from",
                        "Uint8ClampedArray.name",
                        "Uint8ClampedArray.of",
                        "WeakMap",
                        "WeakRef",
                        "WeakSet",
                        "decodeURI",
                        "decodeURIComponent",
                        "encodeURI",
                        "encodeURIComponent",
                        "escape",
                        "eval",
                        "globalThis",
                        "isFinite",
                        "isNaN",
                        "parseFloat",
                        "parseInt",
                        "unescape",
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "version": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unsupported-features/es-syntax": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow unsupported ECMAScript syntax on the specified version",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-syntax.md",
            },
            "fixable": null,
            "messages": {
              "not-supported-till": "'{{featureName}}' is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
              "not-supported-yet": "'{{featureName}}' is not supported in Node.js. The configured version range is '{{version}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignores": {
                    "items": {
                      "enum": [
                        "no-accessor-properties",
                        "accessor-properties",
                        "accessorProperties",
                        "no-arbitrary-module-namespace-names",
                        "arbitrary-module-namespace-names",
                        "arbitraryModuleNamespaceNames",
                        "no-array-from",
                        "array-from",
                        "arrayFrom",
                        "no-array-isarray",
                        "array-isarray",
                        "arrayIsarray",
                        "no-array-of",
                        "array-of",
                        "arrayOf",
                        "no-array-prototype-copywithin",
                        "array-prototype-copywithin",
                        "arrayPrototypeCopywithin",
                        "no-array-prototype-entries",
                        "array-prototype-entries",
                        "arrayPrototypeEntries",
                        "no-array-prototype-every",
                        "array-prototype-every",
                        "arrayPrototypeEvery",
                        "no-array-prototype-fill",
                        "array-prototype-fill",
                        "arrayPrototypeFill",
                        "no-array-prototype-filter",
                        "array-prototype-filter",
                        "arrayPrototypeFilter",
                        "no-array-prototype-find",
                        "array-prototype-find",
                        "arrayPrototypeFind",
                        "no-array-prototype-findindex",
                        "array-prototype-findindex",
                        "arrayPrototypeFindindex",
                        "no-array-prototype-findlast-findlastindex",
                        "array-prototype-findlast-findlastindex",
                        "arrayPrototypeFindlastFindlastindex",
                        "no-array-prototype-flat",
                        "array-prototype-flat",
                        "arrayPrototypeFlat",
                        "no-array-prototype-foreach",
                        "array-prototype-foreach",
                        "arrayPrototypeForeach",
                        "no-array-prototype-includes",
                        "array-prototype-includes",
                        "arrayPrototypeIncludes",
                        "no-array-prototype-indexof",
                        "array-prototype-indexof",
                        "arrayPrototypeIndexof",
                        "no-array-prototype-keys",
                        "array-prototype-keys",
                        "arrayPrototypeKeys",
                        "no-array-prototype-lastindexof",
                        "array-prototype-lastindexof",
                        "arrayPrototypeLastindexof",
                        "no-array-prototype-map",
                        "array-prototype-map",
                        "arrayPrototypeMap",
                        "no-array-prototype-reduce",
                        "array-prototype-reduce",
                        "arrayPrototypeReduce",
                        "no-array-prototype-reduceright",
                        "array-prototype-reduceright",
                        "arrayPrototypeReduceright",
                        "no-array-prototype-some",
                        "array-prototype-some",
                        "arrayPrototypeSome",
                        "no-array-prototype-toreversed",
                        "array-prototype-toreversed",
                        "arrayPrototypeToreversed",
                        "no-array-prototype-tosorted",
                        "array-prototype-tosorted",
                        "arrayPrototypeTosorted",
                        "no-array-prototype-tospliced",
                        "array-prototype-tospliced",
                        "arrayPrototypeTospliced",
                        "no-array-prototype-values",
                        "array-prototype-values",
                        "arrayPrototypeValues",
                        "no-array-prototype-with",
                        "array-prototype-with",
                        "arrayPrototypeWith",
                        "no-array-string-prototype-at",
                        "array-string-prototype-at",
                        "arrayStringPrototypeAt",
                        "no-arrow-functions",
                        "arrow-functions",
                        "arrowFunctions",
                        "no-async-functions",
                        "async-functions",
                        "asyncFunctions",
                        "no-async-iteration",
                        "async-iteration",
                        "asyncIteration",
                        "no-atomics-waitasync",
                        "atomics-waitasync",
                        "atomicsWaitasync",
                        "no-atomics",
                        "atomics",
                        "no-bigint",
                        "bigint",
                        "no-binary-numeric-literals",
                        "binary-numeric-literals",
                        "binaryNumericLiterals",
                        "no-block-scoped-functions",
                        "block-scoped-functions",
                        "blockScopedFunctions",
                        "no-block-scoped-variables",
                        "block-scoped-variables",
                        "blockScopedVariables",
                        "no-class-fields",
                        "class-fields",
                        "classFields",
                        "no-class-static-block",
                        "class-static-block",
                        "classStaticBlock",
                        "no-classes",
                        "classes",
                        "no-computed-properties",
                        "computed-properties",
                        "computedProperties",
                        "no-date-now",
                        "date-now",
                        "dateNow",
                        "no-date-prototype-getyear-setyear",
                        "date-prototype-getyear-setyear",
                        "datePrototypeGetyearSetyear",
                        "no-date-prototype-togmtstring",
                        "date-prototype-togmtstring",
                        "datePrototypeTogmtstring",
                        "no-default-parameters",
                        "default-parameters",
                        "defaultParameters",
                        "no-destructuring",
                        "destructuring",
                        "no-dynamic-import",
                        "dynamic-import",
                        "dynamicImport",
                        "no-error-cause",
                        "error-cause",
                        "errorCause",
                        "no-escape-unescape",
                        "escape-unescape",
                        "escapeUnescape",
                        "no-exponential-operators",
                        "exponential-operators",
                        "exponentialOperators",
                        "no-export-ns-from",
                        "export-ns-from",
                        "exportNsFrom",
                        "no-for-of-loops",
                        "for-of-loops",
                        "forOfLoops",
                        "no-function-declarations-in-if-statement-clauses-without-block",
                        "function-declarations-in-if-statement-clauses-without-block",
                        "functionDeclarationsInIfStatementClausesWithoutBlock",
                        "no-function-prototype-bind",
                        "function-prototype-bind",
                        "functionPrototypeBind",
                        "no-generators",
                        "generators",
                        "no-global-this",
                        "global-this",
                        "globalThis",
                        "no-hashbang",
                        "hashbang",
                        "no-import-meta",
                        "import-meta",
                        "importMeta",
                        "no-initializers-in-for-in",
                        "initializers-in-for-in",
                        "initializersInForIn",
                        "no-intl-datetimeformat-prototype-formatrange",
                        "intl-datetimeformat-prototype-formatrange",
                        "intlDatetimeformatPrototypeFormatrange",
                        "no-intl-datetimeformat-prototype-formattoparts",
                        "intl-datetimeformat-prototype-formattoparts",
                        "intlDatetimeformatPrototypeFormattoparts",
                        "no-intl-displaynames",
                        "intl-displaynames",
                        "intlDisplaynames",
                        "no-intl-getcanonicallocales",
                        "intl-getcanonicallocales",
                        "intlGetcanonicallocales",
                        "no-intl-listformat",
                        "intl-listformat",
                        "intlListformat",
                        "no-intl-locale",
                        "intl-locale",
                        "intlLocale",
                        "no-intl-numberformat-prototype-formatrange",
                        "intl-numberformat-prototype-formatrange",
                        "intlNumberformatPrototypeFormatrange",
                        "no-intl-numberformat-prototype-formatrangetoparts",
                        "intl-numberformat-prototype-formatrangetoparts",
                        "intlNumberformatPrototypeFormatrangetoparts",
                        "no-intl-numberformat-prototype-formattoparts",
                        "intl-numberformat-prototype-formattoparts",
                        "intlNumberformatPrototypeFormattoparts",
                        "no-intl-pluralrules-prototype-selectrange",
                        "intl-pluralrules-prototype-selectrange",
                        "intlPluralrulesPrototypeSelectrange",
                        "no-intl-pluralrules",
                        "intl-pluralrules",
                        "intlPluralrules",
                        "no-intl-relativetimeformat",
                        "intl-relativetimeformat",
                        "intlRelativetimeformat",
                        "no-intl-segmenter",
                        "intl-segmenter",
                        "intlSegmenter",
                        "no-intl-supportedvaluesof",
                        "intl-supportedvaluesof",
                        "intlSupportedvaluesof",
                        "no-json-superset",
                        "json-superset",
                        "jsonSuperset",
                        "no-json",
                        "json",
                        "no-keyword-properties",
                        "keyword-properties",
                        "keywordProperties",
                        "no-labelled-function-declarations",
                        "labelled-function-declarations",
                        "labelledFunctionDeclarations",
                        "no-legacy-object-prototype-accessor-methods",
                        "legacy-object-prototype-accessor-methods",
                        "legacyObjectPrototypeAccessorMethods",
                        "no-logical-assignment-operators",
                        "logical-assignment-operators",
                        "logicalAssignmentOperators",
                        "no-malformed-template-literals",
                        "malformed-template-literals",
                        "malformedTemplateLiterals",
                        "no-map",
                        "map",
                        "no-math-acosh",
                        "math-acosh",
                        "mathAcosh",
                        "no-math-asinh",
                        "math-asinh",
                        "mathAsinh",
                        "no-math-atanh",
                        "math-atanh",
                        "mathAtanh",
                        "no-math-cbrt",
                        "math-cbrt",
                        "mathCbrt",
                        "no-math-clz32",
                        "math-clz32",
                        "mathClz32",
                        "no-math-cosh",
                        "math-cosh",
                        "mathCosh",
                        "no-math-expm1",
                        "math-expm1",
                        "mathExpm1",
                        "no-math-fround",
                        "math-fround",
                        "mathFround",
                        "no-math-hypot",
                        "math-hypot",
                        "mathHypot",
                        "no-math-imul",
                        "math-imul",
                        "mathImul",
                        "no-math-log10",
                        "math-log10",
                        "mathLog10",
                        "no-math-log1p",
                        "math-log1p",
                        "mathLog1p",
                        "no-math-log2",
                        "math-log2",
                        "mathLog2",
                        "no-math-sign",
                        "math-sign",
                        "mathSign",
                        "no-math-sinh",
                        "math-sinh",
                        "mathSinh",
                        "no-math-tanh",
                        "math-tanh",
                        "mathTanh",
                        "no-math-trunc",
                        "math-trunc",
                        "mathTrunc",
                        "no-modules",
                        "modules",
                        "no-new-target",
                        "new-target",
                        "newTarget",
                        "new.target",
                        "no-nullish-coalescing-operators",
                        "nullish-coalescing-operators",
                        "nullishCoalescingOperators",
                        "no-number-epsilon",
                        "number-epsilon",
                        "numberEpsilon",
                        "no-number-isfinite",
                        "number-isfinite",
                        "numberIsfinite",
                        "no-number-isinteger",
                        "number-isinteger",
                        "numberIsinteger",
                        "no-number-isnan",
                        "number-isnan",
                        "numberIsnan",
                        "no-number-issafeinteger",
                        "number-issafeinteger",
                        "numberIssafeinteger",
                        "no-number-maxsafeinteger",
                        "number-maxsafeinteger",
                        "numberMaxsafeinteger",
                        "no-number-minsafeinteger",
                        "number-minsafeinteger",
                        "numberMinsafeinteger",
                        "no-number-parsefloat",
                        "number-parsefloat",
                        "numberParsefloat",
                        "no-number-parseint",
                        "number-parseint",
                        "numberParseint",
                        "no-numeric-separators",
                        "numeric-separators",
                        "numericSeparators",
                        "no-object-assign",
                        "object-assign",
                        "objectAssign",
                        "no-object-create",
                        "object-create",
                        "objectCreate",
                        "no-object-defineproperties",
                        "object-defineproperties",
                        "objectDefineproperties",
                        "no-object-defineproperty",
                        "object-defineproperty",
                        "objectDefineproperty",
                        "no-object-entries",
                        "object-entries",
                        "objectEntries",
                        "no-object-freeze",
                        "object-freeze",
                        "objectFreeze",
                        "no-object-fromentries",
                        "object-fromentries",
                        "objectFromentries",
                        "no-object-getownpropertydescriptor",
                        "object-getownpropertydescriptor",
                        "objectGetownpropertydescriptor",
                        "no-object-getownpropertydescriptors",
                        "object-getownpropertydescriptors",
                        "objectGetownpropertydescriptors",
                        "no-object-getownpropertynames",
                        "object-getownpropertynames",
                        "objectGetownpropertynames",
                        "no-object-getownpropertysymbols",
                        "object-getownpropertysymbols",
                        "objectGetownpropertysymbols",
                        "no-object-getprototypeof",
                        "object-getprototypeof",
                        "objectGetprototypeof",
                        "no-object-hasown",
                        "object-hasown",
                        "objectHasown",
                        "no-object-is",
                        "object-is",
                        "objectIs",
                        "no-object-isextensible",
                        "object-isextensible",
                        "objectIsextensible",
                        "no-object-isfrozen",
                        "object-isfrozen",
                        "objectIsfrozen",
                        "no-object-issealed",
                        "object-issealed",
                        "objectIssealed",
                        "no-object-keys",
                        "object-keys",
                        "objectKeys",
                        "no-object-map-groupby",
                        "object-map-groupby",
                        "objectMapGroupby",
                        "no-object-preventextensions",
                        "object-preventextensions",
                        "objectPreventextensions",
                        "no-object-seal",
                        "object-seal",
                        "objectSeal",
                        "no-object-setprototypeof",
                        "object-setprototypeof",
                        "objectSetprototypeof",
                        "no-object-super-properties",
                        "object-super-properties",
                        "objectSuperProperties",
                        "no-object-values",
                        "object-values",
                        "objectValues",
                        "no-octal-numeric-literals",
                        "octal-numeric-literals",
                        "octalNumericLiterals",
                        "no-optional-catch-binding",
                        "optional-catch-binding",
                        "optionalCatchBinding",
                        "no-optional-chaining",
                        "optional-chaining",
                        "optionalChaining",
                        "no-private-in",
                        "private-in",
                        "privateIn",
                        "no-promise-all-settled",
                        "promise-all-settled",
                        "promiseAllSettled",
                        "no-promise-any",
                        "promise-any",
                        "promiseAny",
                        "no-promise-prototype-finally",
                        "promise-prototype-finally",
                        "promisePrototypeFinally",
                        "no-promise-withresolvers",
                        "promise-withresolvers",
                        "promiseWithresolvers",
                        "no-promise",
                        "promise",
                        "no-property-shorthands",
                        "property-shorthands",
                        "propertyShorthands",
                        "no-proxy",
                        "proxy",
                        "no-reflect",
                        "reflect",
                        "no-regexp-d-flag",
                        "regexp-d-flag",
                        "regexpDFlag",
                        "no-regexp-lookbehind-assertions",
                        "regexp-lookbehind-assertions",
                        "regexpLookbehindAssertions",
                        "regexpLookbehind",
                        "no-regexp-named-capture-groups",
                        "regexp-named-capture-groups",
                        "regexpNamedCaptureGroups",
                        "no-regexp-prototype-compile",
                        "regexp-prototype-compile",
                        "regexpPrototypeCompile",
                        "no-regexp-prototype-flags",
                        "regexp-prototype-flags",
                        "regexpPrototypeFlags",
                        "no-regexp-s-flag",
                        "regexp-s-flag",
                        "regexpSFlag",
                        "regexpS",
                        "no-regexp-u-flag",
                        "regexp-u-flag",
                        "regexpUFlag",
                        "regexpU",
                        "no-regexp-unicode-property-escapes-2019",
                        "regexp-unicode-property-escapes-2019",
                        "regexpUnicodePropertyEscapes2019",
                        "no-regexp-unicode-property-escapes-2020",
                        "regexp-unicode-property-escapes-2020",
                        "regexpUnicodePropertyEscapes2020",
                        "no-regexp-unicode-property-escapes-2021",
                        "regexp-unicode-property-escapes-2021",
                        "regexpUnicodePropertyEscapes2021",
                        "no-regexp-unicode-property-escapes-2022",
                        "regexp-unicode-property-escapes-2022",
                        "regexpUnicodePropertyEscapes2022",
                        "no-regexp-unicode-property-escapes-2023",
                        "regexp-unicode-property-escapes-2023",
                        "regexpUnicodePropertyEscapes2023",
                        "no-regexp-unicode-property-escapes",
                        "regexp-unicode-property-escapes",
                        "regexpUnicodePropertyEscapes",
                        "regexpUnicodeProperties",
                        "no-regexp-v-flag",
                        "regexp-v-flag",
                        "regexpVFlag",
                        "no-regexp-y-flag",
                        "regexp-y-flag",
                        "regexpYFlag",
                        "regexpY",
                        "no-resizable-and-growable-arraybuffers",
                        "resizable-and-growable-arraybuffers",
                        "resizableAndGrowableArraybuffers",
                        "no-rest-parameters",
                        "rest-parameters",
                        "restParameters",
                        "no-rest-spread-properties",
                        "rest-spread-properties",
                        "restSpreadProperties",
                        "no-set",
                        "set",
                        "no-shadow-catch-param",
                        "shadow-catch-param",
                        "shadowCatchParam",
                        "no-shared-array-buffer",
                        "shared-array-buffer",
                        "sharedArrayBuffer",
                        "no-spread-elements",
                        "spread-elements",
                        "spreadElements",
                        "no-string-create-html-methods",
                        "string-create-html-methods",
                        "stringCreateHtmlMethods",
                        "no-string-fromcodepoint",
                        "string-fromcodepoint",
                        "stringFromcodepoint",
                        "no-string-prototype-codepointat",
                        "string-prototype-codepointat",
                        "stringPrototypeCodepointat",
                        "no-string-prototype-endswith",
                        "string-prototype-endswith",
                        "stringPrototypeEndswith",
                        "no-string-prototype-includes",
                        "string-prototype-includes",
                        "stringPrototypeIncludes",
                        "no-string-prototype-iswellformed-towellformed",
                        "string-prototype-iswellformed-towellformed",
                        "stringPrototypeIswellformedTowellformed",
                        "no-string-prototype-matchall",
                        "string-prototype-matchall",
                        "stringPrototypeMatchall",
                        "no-string-prototype-normalize",
                        "string-prototype-normalize",
                        "stringPrototypeNormalize",
                        "no-string-prototype-padstart-padend",
                        "string-prototype-padstart-padend",
                        "stringPrototypePadstartPadend",
                        "no-string-prototype-repeat",
                        "string-prototype-repeat",
                        "stringPrototypeRepeat",
                        "no-string-prototype-replaceall",
                        "string-prototype-replaceall",
                        "stringPrototypeReplaceall",
                        "no-string-prototype-startswith",
                        "string-prototype-startswith",
                        "stringPrototypeStartswith",
                        "no-string-prototype-substr",
                        "string-prototype-substr",
                        "stringPrototypeSubstr",
                        "no-string-prototype-trim",
                        "string-prototype-trim",
                        "stringPrototypeTrim",
                        "no-string-prototype-trimleft-trimright",
                        "string-prototype-trimleft-trimright",
                        "stringPrototypeTrimleftTrimright",
                        "no-string-prototype-trimstart-trimend",
                        "string-prototype-trimstart-trimend",
                        "stringPrototypeTrimstartTrimend",
                        "no-string-raw",
                        "string-raw",
                        "stringRaw",
                        "no-subclassing-builtins",
                        "subclassing-builtins",
                        "subclassingBuiltins",
                        "no-symbol-prototype-description",
                        "symbol-prototype-description",
                        "symbolPrototypeDescription",
                        "no-symbol",
                        "symbol",
                        "no-template-literals",
                        "template-literals",
                        "templateLiterals",
                        "no-top-level-await",
                        "top-level-await",
                        "topLevelAwait",
                        "no-trailing-commas",
                        "trailing-commas",
                        "trailingCommas",
                        "no-trailing-function-commas",
                        "trailing-function-commas",
                        "trailingFunctionCommas",
                        "trailingCommasInFunctions",
                        "no-typed-arrays",
                        "typed-arrays",
                        "typedArrays",
                        "no-unicode-codepoint-escapes",
                        "unicode-codepoint-escapes",
                        "unicodeCodepointEscapes",
                        "unicodeCodePointEscapes",
                        "no-weak-map",
                        "weak-map",
                        "weakMap",
                        "no-weak-set",
                        "weak-set",
                        "weakSet",
                        "no-weakrefs",
                        "weakrefs",
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "version": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unsupported-features/node-builtins": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "disallow unsupported Node.js built-in APIs on the specified version",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/node-builtins.md",
            },
            "fixable": null,
            "messages": {
              "not-experimental-till": "The '{{name}}' is not an experimental feature until Node.js {{experimental}}. The configured version range is '{{version}}'.",
              "not-supported-till": "The '{{name}}' is still an experimental feature and is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
              "not-supported-yet": "The '{{name}}' is still an experimental feature The configured version range is '{{version}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowExperimental": {
                    "type": "boolean",
                  },
                  "ignores": {
                    "items": {
                      "enum": [
                        "__filename",
                        "__dirname",
                        "require",
                        "require.cache",
                        "require.extensions",
                        "require.main",
                        "require.resolve",
                        "require.resolve.paths",
                        "module",
                        "module.children",
                        "module.exports",
                        "module.filename",
                        "module.id",
                        "module.isPreloading",
                        "module.loaded",
                        "module.parent",
                        "module.path",
                        "module.paths",
                        "module.require",
                        "exports",
                        "AbortController",
                        "AbortSignal",
                        "AbortSignal.abort",
                        "AbortSignal.timeout",
                        "AbortSignal.any",
                        "DOMException",
                        "FormData",
                        "Headers",
                        "MessageEvent",
                        "Navigator",
                        "Request",
                        "Response",
                        "WebAssembly",
                        "WebSocket",
                        "fetch",
                        "global",
                        "queueMicrotask",
                        "navigator",
                        "navigator.hardwareConcurrency",
                        "navigator.language",
                        "navigator.languages",
                        "navigator.platform",
                        "navigator.userAgent",
                        "structuredClone",
                        "localStorage",
                        "sessionStorage",
                        "Storage",
                        "Blob",
                        "new Buffer()",
                        "Buffer",
                        "Buffer.alloc",
                        "Buffer.allocUnsafe",
                        "Buffer.allocUnsafeSlow",
                        "Buffer.byteLength",
                        "Buffer.compare",
                        "Buffer.concat",
                        "Buffer.copyBytesFrom",
                        "Buffer.from",
                        "Buffer.isBuffer",
                        "Buffer.isEncoding",
                        "File",
                        "atob",
                        "btoa",
                        "console",
                        "console.profile",
                        "console.profileEnd",
                        "console.timeStamp",
                        "console.Console",
                        "console.assert",
                        "console.clear",
                        "console.count",
                        "console.countReset",
                        "console.debug",
                        "console.dir",
                        "console.dirxml",
                        "console.error",
                        "console.group",
                        "console.groupCollapsed",
                        "console.groupEnd",
                        "console.info",
                        "console.log",
                        "console.table",
                        "console.time",
                        "console.timeEnd",
                        "console.timeLog",
                        "console.trace",
                        "console.warn",
                        "crypto",
                        "crypto.subtle",
                        "crypto.subtle.decrypt",
                        "crypto.subtle.deriveBits",
                        "crypto.subtle.deriveKey",
                        "crypto.subtle.digest",
                        "crypto.subtle.encrypt",
                        "crypto.subtle.exportKey",
                        "crypto.subtle.generateKey",
                        "crypto.subtle.importKey",
                        "crypto.subtle.sign",
                        "crypto.subtle.unwrapKey",
                        "crypto.subtle.verify",
                        "crypto.subtle.wrapKey",
                        "crypto.getRandomValues",
                        "crypto.randomUUID",
                        "Crypto",
                        "CryptoKey",
                        "SubtleCrypto",
                        "CloseEvent",
                        "CustomEvent",
                        "Event",
                        "EventSource",
                        "EventTarget",
                        "PerformanceEntry",
                        "PerformanceMark",
                        "PerformanceMeasure",
                        "PerformanceObserver",
                        "PerformanceObserverEntryList",
                        "PerformanceResourceTiming",
                        "performance",
                        "performance.clearMarks",
                        "performance.clearMeasures",
                        "performance.clearResourceTimings",
                        "performance.eventLoopUtilization",
                        "performance.getEntries",
                        "performance.getEntriesByName",
                        "performance.getEntriesByType",
                        "performance.mark",
                        "performance.markResourceTiming",
                        "performance.measure",
                        "performance.nodeTiming",
                        "performance.nodeTiming.bootstrapComplete",
                        "performance.nodeTiming.environment",
                        "performance.nodeTiming.idleTime",
                        "performance.nodeTiming.loopExit",
                        "performance.nodeTiming.loopStart",
                        "performance.nodeTiming.nodeStart",
                        "performance.nodeTiming.uvMetricsInfo",
                        "performance.nodeTiming.v8Start",
                        "performance.now",
                        "performance.onresourcetimingbufferfull",
                        "performance.setResourceTimingBufferSize",
                        "performance.timeOrigin",
                        "performance.timerify",
                        "performance.toJSON",
                        "process",
                        "process.allowedNodeEnvironmentFlags",
                        "process.availableMemory",
                        "process.arch",
                        "process.argv",
                        "process.argv0",
                        "process.channel",
                        "process.config",
                        "process.connected",
                        "process.debugPort",
                        "process.env",
                        "process.execArgv",
                        "process.execPath",
                        "process.execve",
                        "process.exitCode",
                        "process.features.cached_builtins",
                        "process.features.debug",
                        "process.features.inspector",
                        "process.features.ipv6",
                        "process.features.require_module",
                        "process.features.tls",
                        "process.features.tls_alpn",
                        "process.features.tls_ocsp",
                        "process.features.tls_sni",
                        "process.features.typescript",
                        "process.features.uv",
                        "process.finalization.register",
                        "process.finalization.registerBeforeExit",
                        "process.finalization.unregister",
                        "process.getBuiltinModule",
                        "process.mainModule",
                        "process.noDeprecation",
                        "process.permission",
                        "process.pid",
                        "process.platform",
                        "process.ppid",
                        "process.ref",
                        "process.release",
                        "process.report",
                        "process.report.excludeEnv",
                        "process.sourceMapsEnabled",
                        "process.stdin",
                        "process.stdin.isRaw",
                        "process.stdin.isTTY",
                        "process.stdin.setRawMode",
                        "process.stdout",
                        "process.stdout.clearLine",
                        "process.stdout.clearScreenDown",
                        "process.stdout.columns",
                        "process.stdout.cursorTo",
                        "process.stdout.getColorDepth",
                        "process.stdout.getWindowSize",
                        "process.stdout.hasColors",
                        "process.stdout.isTTY",
                        "process.stdout.moveCursor",
                        "process.stdout.rows",
                        "process.stderr",
                        "process.stderr.clearLine",
                        "process.stderr.clearScreenDown",
                        "process.stderr.columns",
                        "process.stderr.cursorTo",
                        "process.stderr.getColorDepth",
                        "process.stderr.getWindowSize",
                        "process.stderr.hasColors",
                        "process.stderr.isTTY",
                        "process.stderr.moveCursor",
                        "process.stderr.rows",
                        "process.threadCpuUsage",
                        "process.throwDeprecation",
                        "process.title",
                        "process.traceDeprecation",
                        "process.version",
                        "process.versions",
                        "process.abort",
                        "process.chdir",
                        "process.constrainedMemory",
                        "process.cpuUsage",
                        "process.cwd",
                        "process.disconnect",
                        "process.dlopen",
                        "process.emitWarning",
                        "process.exit",
                        "process.getActiveResourcesInfo",
                        "process.getegid",
                        "process.geteuid",
                        "process.getgid",
                        "process.getgroups",
                        "process.getuid",
                        "process.hasUncaughtExceptionCaptureCallback",
                        "process.hrtime",
                        "process.hrtime.bigint",
                        "process.initgroups",
                        "process.kill",
                        "process.loadEnvFile",
                        "process.memoryUsage",
                        "process.rss",
                        "process.nextTick",
                        "process.resourceUsage",
                        "process.send",
                        "process.setegid",
                        "process.seteuid",
                        "process.setgid",
                        "process.setgroups",
                        "process.setuid",
                        "process.setSourceMapsEnabled",
                        "process.setUncaughtExceptionCaptureCallback",
                        "process.umask",
                        "process.unref",
                        "process.uptime",
                        "ReadableStream",
                        "ReadableStream.from",
                        "ReadableStreamDefaultReader",
                        "ReadableStreamBYOBReader",
                        "ReadableStreamDefaultController",
                        "ReadableByteStreamController",
                        "ReadableStreamBYOBRequest",
                        "WritableStream",
                        "WritableStreamDefaultWriter",
                        "WritableStreamDefaultController",
                        "TransformStream",
                        "TransformStreamDefaultController",
                        "ByteLengthQueuingStrategy",
                        "CountQueuingStrategy",
                        "TextEncoderStream",
                        "TextDecoderStream",
                        "CompressionStream",
                        "DecompressionStream",
                        "setInterval",
                        "clearInterval",
                        "setTimeout",
                        "clearTimeout",
                        "setImmediate",
                        "clearImmediate",
                        "URL",
                        "URL.canParse",
                        "URL.createObjectURL",
                        "URL.revokeObjectURL",
                        "URLSearchParams",
                        "TextDecoder",
                        "TextEncoder",
                        "BroadcastChannel",
                        "MessageChannel",
                        "MessagePort",
                        "assert",
                        "assert.Assert",
                        "assert.assert",
                        "assert.deepEqual",
                        "assert.deepStrictEqual",
                        "assert.doesNotMatch",
                        "assert.doesNotReject",
                        "assert.doesNotThrow",
                        "assert.equal",
                        "assert.fail",
                        "assert.ifError",
                        "assert.match",
                        "assert.notDeepEqual",
                        "assert.notDeepStrictEqual",
                        "assert.notEqual",
                        "assert.notStrictEqual",
                        "assert.ok",
                        "assert.partialDeepStrictEqual",
                        "assert.rejects",
                        "assert.strictEqual",
                        "assert.throws",
                        "assert.CallTracker",
                        "assert.strict",
                        "assert.strict.Assert",
                        "assert.strict.assert",
                        "assert.strict.deepEqual",
                        "assert.strict.deepStrictEqual",
                        "assert.strict.doesNotMatch",
                        "assert.strict.doesNotReject",
                        "assert.strict.doesNotThrow",
                        "assert.strict.equal",
                        "assert.strict.fail",
                        "assert.strict.ifError",
                        "assert.strict.match",
                        "assert.strict.notDeepEqual",
                        "assert.strict.notDeepStrictEqual",
                        "assert.strict.notEqual",
                        "assert.strict.notStrictEqual",
                        "assert.strict.ok",
                        "assert.strict.partialDeepStrictEqual",
                        "assert.strict.rejects",
                        "assert.strict.strictEqual",
                        "assert.strict.throws",
                        "assert.strict.CallTracker",
                        "assert/strict",
                        "assert/strict.Assert",
                        "assert/strict.assert",
                        "assert/strict.deepEqual",
                        "assert/strict.deepStrictEqual",
                        "assert/strict.doesNotMatch",
                        "assert/strict.doesNotReject",
                        "assert/strict.doesNotThrow",
                        "assert/strict.equal",
                        "assert/strict.fail",
                        "assert/strict.ifError",
                        "assert/strict.match",
                        "assert/strict.notDeepEqual",
                        "assert/strict.notDeepStrictEqual",
                        "assert/strict.notEqual",
                        "assert/strict.notStrictEqual",
                        "assert/strict.ok",
                        "assert/strict.partialDeepStrictEqual",
                        "assert/strict.rejects",
                        "assert/strict.strictEqual",
                        "assert/strict.throws",
                        "assert/strict.CallTracker",
                        "async_hooks",
                        "async_hooks.createHook",
                        "async_hooks.executionAsyncResource",
                        "async_hooks.executionAsyncId",
                        "async_hooks.triggerAsyncId",
                        "async_hooks.AsyncLocalStorage",
                        "async_hooks.AsyncLocalStorage.bind",
                        "async_hooks.AsyncLocalStorage.snapshot",
                        "async_hooks.AsyncResource",
                        "async_hooks.AsyncResource.bind",
                        "buffer",
                        "buffer.constants",
                        "buffer.INSPECT_MAX_BYTES",
                        "buffer.kMaxLength",
                        "buffer.kStringMaxLength",
                        "buffer.atob",
                        "buffer.btoa",
                        "buffer.isAscii",
                        "buffer.isUtf8",
                        "buffer.resolveObjectURL",
                        "buffer.transcode",
                        "buffer.SlowBuffer",
                        "buffer.Blob",
                        "new buffer.Buffer()",
                        "buffer.Buffer",
                        "buffer.Buffer.alloc",
                        "buffer.Buffer.allocUnsafe",
                        "buffer.Buffer.allocUnsafeSlow",
                        "buffer.Buffer.byteLength",
                        "buffer.Buffer.compare",
                        "buffer.Buffer.concat",
                        "buffer.Buffer.copyBytesFrom",
                        "buffer.Buffer.from",
                        "buffer.Buffer.isBuffer",
                        "buffer.Buffer.isEncoding",
                        "buffer.File",
                        "child_process",
                        "child_process.exec",
                        "child_process.execFile",
                        "child_process.fork",
                        "child_process.spawn",
                        "child_process.execFileSync",
                        "child_process.execSync",
                        "child_process.spawnSync",
                        "child_process.ChildProcess",
                        "cluster",
                        "cluster.isMaster",
                        "cluster.isPrimary",
                        "cluster.isWorker",
                        "cluster.schedulingPolicy",
                        "cluster.settings",
                        "cluster.worker",
                        "cluster.workers",
                        "cluster.disconnect",
                        "cluster.fork",
                        "cluster.setupMaster",
                        "cluster.setupPrimary",
                        "cluster.Worker",
                        "crypto.constants",
                        "crypto.fips",
                        "crypto.webcrypto",
                        "crypto.webcrypto.subtle",
                        "crypto.webcrypto.subtle.decrypt",
                        "crypto.webcrypto.subtle.deriveBits",
                        "crypto.webcrypto.subtle.deriveKey",
                        "crypto.webcrypto.subtle.digest",
                        "crypto.webcrypto.subtle.encrypt",
                        "crypto.webcrypto.subtle.exportKey",
                        "crypto.webcrypto.subtle.generateKey",
                        "crypto.webcrypto.subtle.importKey",
                        "crypto.webcrypto.subtle.sign",
                        "crypto.webcrypto.subtle.unwrapKey",
                        "crypto.webcrypto.subtle.verify",
                        "crypto.webcrypto.subtle.wrapKey",
                        "crypto.webcrypto.getRandomValues",
                        "crypto.webcrypto.randomUUID",
                        "crypto.checkPrime",
                        "crypto.checkPrimeSync",
                        "crypto.createCipher",
                        "crypto.createCipheriv",
                        "crypto.createDecipher",
                        "crypto.createDecipheriv",
                        "crypto.createDiffieHellman",
                        "crypto.createDiffieHellmanGroup",
                        "crypto.createECDH",
                        "crypto.createHash",
                        "crypto.createHmac",
                        "crypto.createPrivateKey",
                        "crypto.createPublicKey",
                        "crypto.createSecretKey",
                        "crypto.createSign",
                        "crypto.createVerify",
                        "crypto.diffieHellman",
                        "crypto.generateKey",
                        "crypto.generateKeyPair",
                        "crypto.generateKeyPairSync",
                        "crypto.generateKeySync",
                        "crypto.generatePrime",
                        "crypto.generatePrimeSync",
                        "crypto.getCipherInfo",
                        "crypto.getCiphers",
                        "crypto.getCurves",
                        "crypto.getDiffieHellman",
                        "crypto.getFips",
                        "crypto.getHashes",
                        "crypto.hash",
                        "crypto.hkdf",
                        "crypto.hkdfSync",
                        "crypto.pbkdf2",
                        "crypto.pbkdf2Sync",
                        "crypto.privateDecrypt",
                        "crypto.privateEncrypt",
                        "crypto.publicDecrypt",
                        "crypto.publicEncrypt",
                        "crypto.randomBytes",
                        "crypto.randomFillSync",
                        "crypto.randomFill",
                        "crypto.randomInt",
                        "crypto.scrypt",
                        "crypto.scryptSync",
                        "crypto.secureHeapUsed",
                        "crypto.setEngine",
                        "crypto.setFips",
                        "crypto.sign",
                        "crypto.timingSafeEqual",
                        "crypto.verify",
                        "crypto.Certificate",
                        "crypto.Certificate.exportChallenge",
                        "crypto.Certificate.exportPublicKey",
                        "crypto.Certificate.verifySpkac",
                        "crypto.Cipher",
                        "crypto.Decipher",
                        "crypto.DiffieHellman",
                        "crypto.DiffieHellmanGroup",
                        "crypto.ECDH",
                        "crypto.ECDH.convertKey",
                        "crypto.Hash()",
                        "new crypto.Hash()",
                        "crypto.Hash",
                        "crypto.Hmac()",
                        "new crypto.Hmac()",
                        "crypto.Hmac",
                        "crypto.KeyObject",
                        "crypto.KeyObject.from",
                        "crypto.Sign",
                        "crypto.Verify",
                        "crypto.X509Certificate",
                        "dgram",
                        "dgram.createSocket",
                        "dgram.Socket",
                        "diagnostics_channel",
                        "diagnostics_channel.hasSubscribers",
                        "diagnostics_channel.channel",
                        "diagnostics_channel.subscribe",
                        "diagnostics_channel.unsubscribe",
                        "diagnostics_channel.tracingChannel",
                        "diagnostics_channel.Channel",
                        "diagnostics_channel.TracingChannel",
                        "dns",
                        "dns.Resolver",
                        "dns.getServers",
                        "dns.lookup",
                        "dns.lookupService",
                        "dns.resolve",
                        "dns.resolve4",
                        "dns.resolve6",
                        "dns.resolveAny",
                        "dns.resolveCname",
                        "dns.resolveCaa",
                        "dns.resolveMx",
                        "dns.resolveNaptr",
                        "dns.resolveNs",
                        "dns.resolvePtr",
                        "dns.resolveSoa",
                        "dns.resolveSrv",
                        "dns.resolveTlsa",
                        "dns.resolveTxt",
                        "dns.reverse",
                        "dns.setDefaultResultOrder",
                        "dns.getDefaultResultOrder",
                        "dns.setServers",
                        "dns.promises",
                        "dns.promises.Resolver",
                        "dns.promises.cancel",
                        "dns.promises.getServers",
                        "dns.promises.lookup",
                        "dns.promises.lookupService",
                        "dns.promises.resolve",
                        "dns.promises.resolve4",
                        "dns.promises.resolve6",
                        "dns.promises.resolveAny",
                        "dns.promises.resolveCaa",
                        "dns.promises.resolveCname",
                        "dns.promises.resolveMx",
                        "dns.promises.resolveNaptr",
                        "dns.promises.resolveNs",
                        "dns.promises.resolvePtr",
                        "dns.promises.resolveSoa",
                        "dns.promises.resolveSrv",
                        "dns.promises.resolveTlsa",
                        "dns.promises.resolveTxt",
                        "dns.promises.reverse",
                        "dns.promises.setDefaultResultOrder",
                        "dns.promises.getDefaultResultOrder",
                        "dns.promises.setServers",
                        "dns/promises",
                        "dns/promises.Resolver",
                        "dns/promises.cancel",
                        "dns/promises.getServers",
                        "dns/promises.lookup",
                        "dns/promises.lookupService",
                        "dns/promises.resolve",
                        "dns/promises.resolve4",
                        "dns/promises.resolve6",
                        "dns/promises.resolveAny",
                        "dns/promises.resolveCaa",
                        "dns/promises.resolveCname",
                        "dns/promises.resolveMx",
                        "dns/promises.resolveNaptr",
                        "dns/promises.resolveNs",
                        "dns/promises.resolvePtr",
                        "dns/promises.resolveSoa",
                        "dns/promises.resolveSrv",
                        "dns/promises.resolveTlsa",
                        "dns/promises.resolveTxt",
                        "dns/promises.reverse",
                        "dns/promises.setDefaultResultOrder",
                        "dns/promises.getDefaultResultOrder",
                        "dns/promises.setServers",
                        "domain",
                        "domain.create",
                        "domain.Domain",
                        "events",
                        "events.Event",
                        "events.EventTarget",
                        "events.CustomEvent",
                        "events.NodeEventTarget",
                        "events.EventEmitter",
                        "events.EventEmitter.defaultMaxListeners",
                        "events.EventEmitter.errorMonitor",
                        "events.EventEmitter.captureRejections",
                        "events.EventEmitter.captureRejectionSymbol",
                        "events.EventEmitter.getEventListeners",
                        "events.EventEmitter.getMaxListeners",
                        "events.EventEmitter.once",
                        "events.EventEmitter.listenerCount",
                        "events.EventEmitter.on",
                        "events.EventEmitter.setMaxListeners",
                        "events.EventEmitter.addAbortListener",
                        "events.EventEmitterAsyncResource",
                        "events.EventEmitterAsyncResource.defaultMaxListeners",
                        "events.EventEmitterAsyncResource.errorMonitor",
                        "events.EventEmitterAsyncResource.captureRejections",
                        "events.EventEmitterAsyncResource.captureRejectionSymbol",
                        "events.EventEmitterAsyncResource.getEventListeners",
                        "events.EventEmitterAsyncResource.getMaxListeners",
                        "events.EventEmitterAsyncResource.once",
                        "events.EventEmitterAsyncResource.listenerCount",
                        "events.EventEmitterAsyncResource.on",
                        "events.EventEmitterAsyncResource.setMaxListeners",
                        "events.EventEmitterAsyncResource.addAbortListener",
                        "events.defaultMaxListeners",
                        "events.errorMonitor",
                        "events.captureRejections",
                        "events.captureRejectionSymbol",
                        "events.getEventListeners",
                        "events.getMaxListeners",
                        "events.once",
                        "events.listenerCount",
                        "events.on",
                        "events.setMaxListeners",
                        "events.addAbortListener",
                        "fs",
                        "fs.promises",
                        "fs.promises.FileHandle",
                        "fs.promises.access",
                        "fs.promises.appendFile",
                        "fs.promises.chmod",
                        "fs.promises.chown",
                        "fs.promises.constants",
                        "fs.promises.copyFile",
                        "fs.promises.cp",
                        "fs.promises.glob",
                        "fs.promises.lchmod",
                        "fs.promises.lchown",
                        "fs.promises.link",
                        "fs.promises.lstat",
                        "fs.promises.lutimes",
                        "fs.promises.mkdir",
                        "fs.promises.mkdtemp",
                        "fs.promises.open",
                        "fs.promises.opendir",
                        "fs.promises.readFile",
                        "fs.promises.readdir",
                        "fs.promises.readlink",
                        "fs.promises.realpath",
                        "fs.promises.rename",
                        "fs.promises.rm",
                        "fs.promises.rmdir",
                        "fs.promises.stat",
                        "fs.promises.statfs",
                        "fs.promises.symlink",
                        "fs.promises.truncate",
                        "fs.promises.unlink",
                        "fs.promises.utimes",
                        "fs.promises.watch",
                        "fs.promises.writeFile",
                        "fs.access",
                        "fs.appendFile",
                        "fs.chmod",
                        "fs.chown",
                        "fs.close",
                        "fs.copyFile",
                        "fs.cp",
                        "fs.createReadStream",
                        "fs.createWriteStream",
                        "fs.exists",
                        "fs.fchmod",
                        "fs.fchown",
                        "fs.fdatasync",
                        "fs.fstat",
                        "fs.fsync",
                        "fs.ftruncate",
                        "fs.futimes",
                        "fs.glob",
                        "fs.lchmod",
                        "fs.lchown",
                        "fs.link",
                        "fs.lstat",
                        "fs.lutimes",
                        "fs.mkdir",
                        "fs.mkdtemp",
                        "fs.native",
                        "fs.open",
                        "fs.openAsBlob",
                        "fs.opendir",
                        "fs.read",
                        "fs.readdir",
                        "fs.readFile",
                        "fs.readlink",
                        "fs.readv",
                        "fs.realpath",
                        "fs.realpath.native",
                        "fs.rename",
                        "fs.rm",
                        "fs.rmdir",
                        "fs.stat",
                        "fs.statfs",
                        "fs.symlink",
                        "fs.truncate",
                        "fs.unlink",
                        "fs.unwatchFile",
                        "fs.utimes",
                        "fs.watch",
                        "fs.watchFile",
                        "fs.write",
                        "fs.writeFile",
                        "fs.writev",
                        "fs.accessSync",
                        "fs.appendFileSync",
                        "fs.chmodSync",
                        "fs.chownSync",
                        "fs.closeSync",
                        "fs.copyFileSync",
                        "fs.cpSync",
                        "fs.existsSync",
                        "fs.fchmodSync",
                        "fs.fchownSync",
                        "fs.fdatasyncSync",
                        "fs.fstatSync",
                        "fs.fsyncSync",
                        "fs.ftruncateSync",
                        "fs.futimesSync",
                        "fs.globSync",
                        "fs.lchmodSync",
                        "fs.lchownSync",
                        "fs.linkSync",
                        "fs.lstatSync",
                        "fs.lutimesSync",
                        "fs.mkdirSync",
                        "fs.mkdtempSync",
                        "fs.opendirSync",
                        "fs.openSync",
                        "fs.readdirSync",
                        "fs.readFileSync",
                        "fs.readlinkSync",
                        "fs.readSync",
                        "fs.readvSync",
                        "fs.realpathSync",
                        "fs.realpathSync.native",
                        "fs.renameSync",
                        "fs.rmdirSync",
                        "fs.rmSync",
                        "fs.statfsSync",
                        "fs.statSync",
                        "fs.symlinkSync",
                        "fs.truncateSync",
                        "fs.unlinkSync",
                        "fs.utimesSync",
                        "fs.writeFileSync",
                        "fs.writeSync",
                        "fs.writevSync",
                        "fs.constants",
                        "fs.Dir",
                        "fs.Dirent",
                        "fs.FSWatcher",
                        "fs.StatWatcher",
                        "fs.ReadStream",
                        "fs.Stats()",
                        "new fs.Stats()",
                        "fs.Stats",
                        "fs.StatFs",
                        "fs.WriteStream",
                        "fs.common_objects",
                        "fs/promises",
                        "fs/promises.FileHandle",
                        "fs/promises.access",
                        "fs/promises.appendFile",
                        "fs/promises.chmod",
                        "fs/promises.chown",
                        "fs/promises.constants",
                        "fs/promises.copyFile",
                        "fs/promises.cp",
                        "fs/promises.glob",
                        "fs/promises.lchmod",
                        "fs/promises.lchown",
                        "fs/promises.link",
                        "fs/promises.lstat",
                        "fs/promises.lutimes",
                        "fs/promises.mkdir",
                        "fs/promises.mkdtemp",
                        "fs/promises.open",
                        "fs/promises.opendir",
                        "fs/promises.readFile",
                        "fs/promises.readdir",
                        "fs/promises.readlink",
                        "fs/promises.realpath",
                        "fs/promises.rename",
                        "fs/promises.rm",
                        "fs/promises.rmdir",
                        "fs/promises.stat",
                        "fs/promises.statfs",
                        "fs/promises.symlink",
                        "fs/promises.truncate",
                        "fs/promises.unlink",
                        "fs/promises.utimes",
                        "fs/promises.watch",
                        "fs/promises.writeFile",
                        "http2",
                        "http2.constants",
                        "http2.sensitiveHeaders",
                        "http2.createServer",
                        "http2.createSecureServer",
                        "http2.connect",
                        "http2.getDefaultSettings",
                        "http2.getPackedSettings",
                        "http2.getUnpackedSettings",
                        "http2.performServerHandshake",
                        "http2.Http2Session",
                        "http2.ServerHttp2Session",
                        "http2.ClientHttp2Session",
                        "http2.Http2Stream",
                        "http2.ClientHttp2Stream",
                        "http2.ServerHttp2Stream",
                        "http2.Http2Server",
                        "http2.Http2SecureServer",
                        "http2.Http2ServerRequest",
                        "http2.Http2ServerResponse",
                        "http",
                        "http.METHODS",
                        "http.STATUS_CODES",
                        "http.globalAgent",
                        "http.maxHeaderSize",
                        "http.createServer",
                        "http.get",
                        "http.request",
                        "http.validateHeaderName",
                        "http.validateHeaderValue",
                        "http.setMaxIdleHTTPParsers",
                        "http.Agent",
                        "http.ClientRequest",
                        "http.Server",
                        "http.ServerResponse",
                        "http.IncomingMessage",
                        "http.OutgoingMessage",
                        "http.WebSocket",
                        "_http_agent",
                        "_http_client",
                        "_http_common",
                        "_http_incoming",
                        "_http_outgoing",
                        "_http_server",
                        "https",
                        "https.globalAgent",
                        "https.createServer",
                        "https.get",
                        "https.request",
                        "https.Agent",
                        "https.Server",
                        "inspector",
                        "inspector.Session",
                        "inspector.Network.dataReceived",
                        "inspector.Network.dataSent",
                        "inspector.Network.loadingFailed",
                        "inspector.Network.loadingFinished",
                        "inspector.Network.requestWillBeSent",
                        "inspector.Network.responseReceived",
                        "inspector.NetworkResources.put",
                        "inspector.console",
                        "inspector.close",
                        "inspector.open",
                        "inspector.url",
                        "inspector.waitForDebugger",
                        "inspector/promises",
                        "inspector/promises.Session",
                        "inspector/promises.Network.dataReceived",
                        "inspector/promises.Network.dataSent",
                        "inspector/promises.Network.loadingFailed",
                        "inspector/promises.Network.loadingFinished",
                        "inspector/promises.Network.requestWillBeSent",
                        "inspector/promises.Network.responseReceived",
                        "inspector/promises.NetworkResources.put",
                        "inspector/promises.console",
                        "inspector/promises.close",
                        "inspector/promises.open",
                        "inspector/promises.url",
                        "inspector/promises.waitForDebugger",
                        "module.builtinModules",
                        "module.constants.compileCacheStatus",
                        "module.createRequire",
                        "module.createRequireFromPath",
                        "module.enableCompileCache",
                        "module.findPackageJSON",
                        "module.flushCompileCache",
                        "module.getCompileCacheDir",
                        "module.getSourceMapsSupport",
                        "module.isBuiltin",
                        "module.registerHooks",
                        "module.register",
                        "module.setSourceMapsSupport",
                        "module.stripTypeScriptTypes",
                        "module.syncBuiltinESMExports",
                        "module.findSourceMap",
                        "module.SourceMap",
                        "module.Module.builtinModules",
                        "module.Module.createRequire",
                        "module.Module.createRequireFromPath",
                        "module.Module.enableCompileCache",
                        "module.Module.findPackageJSON",
                        "module.Module.flushCompileCache",
                        "module.Module.getCompileCacheDir",
                        "module.Module.getSourceMapsSupport",
                        "module.Module.isBuiltin",
                        "module.Module.registerHooks",
                        "module.Module.register",
                        "module.Module.setSourceMapsSupport",
                        "module.Module.stripTypeScriptTypes",
                        "module.Module.syncBuiltinESMExports",
                        "module.Module.findSourceMap",
                        "module.Module.SourceMap",
                        "net",
                        "net.connect",
                        "net.createConnection",
                        "net.createServer",
                        "net.getDefaultAutoSelectFamily",
                        "net.setDefaultAutoSelectFamily",
                        "net.getDefaultAutoSelectFamilyAttemptTimeout",
                        "net.setDefaultAutoSelectFamilyAttemptTimeout",
                        "net.isIP",
                        "net.isIPv4",
                        "net.isIPv6",
                        "net.BlockList",
                        "net.BlockList.isBlockList",
                        "net.SocketAddress",
                        "net.SocketAddress.parse",
                        "net.Server",
                        "net.Socket",
                        "os",
                        "os.EOL",
                        "os.constants",
                        "os.constants.priority",
                        "os.devNull",
                        "os.availableParallelism",
                        "os.arch",
                        "os.cpus",
                        "os.endianness",
                        "os.freemem",
                        "os.getPriority",
                        "os.homedir",
                        "os.hostname",
                        "os.loadavg",
                        "os.machine",
                        "os.networkInterfaces",
                        "os.platform",
                        "os.release",
                        "os.setPriority",
                        "os.tmpdir",
                        "os.totalmem",
                        "os.type",
                        "os.uptime",
                        "os.userInfo",
                        "os.version",
                        "path",
                        "path.posix",
                        "path.posix.delimiter",
                        "path.posix.sep",
                        "path.posix.basename",
                        "path.posix.dirname",
                        "path.posix.extname",
                        "path.posix.format",
                        "path.posix.matchesGlob",
                        "path.posix.isAbsolute",
                        "path.posix.join",
                        "path.posix.normalize",
                        "path.posix.parse",
                        "path.posix.relative",
                        "path.posix.resolve",
                        "path.posix.toNamespacedPath",
                        "path.win32",
                        "path.win32.delimiter",
                        "path.win32.sep",
                        "path.win32.basename",
                        "path.win32.dirname",
                        "path.win32.extname",
                        "path.win32.format",
                        "path.win32.matchesGlob",
                        "path.win32.isAbsolute",
                        "path.win32.join",
                        "path.win32.normalize",
                        "path.win32.parse",
                        "path.win32.relative",
                        "path.win32.resolve",
                        "path.win32.toNamespacedPath",
                        "path.delimiter",
                        "path.sep",
                        "path.basename",
                        "path.dirname",
                        "path.extname",
                        "path.format",
                        "path.matchesGlob",
                        "path.isAbsolute",
                        "path.join",
                        "path.normalize",
                        "path.parse",
                        "path.relative",
                        "path.resolve",
                        "path.toNamespacedPath",
                        "path/posix",
                        "path/posix.delimiter",
                        "path/posix.sep",
                        "path/posix.basename",
                        "path/posix.dirname",
                        "path/posix.extname",
                        "path/posix.format",
                        "path/posix.matchesGlob",
                        "path/posix.isAbsolute",
                        "path/posix.join",
                        "path/posix.normalize",
                        "path/posix.parse",
                        "path/posix.relative",
                        "path/posix.resolve",
                        "path/posix.toNamespacedPath",
                        "path/win32",
                        "path/win32.delimiter",
                        "path/win32.sep",
                        "path/win32.basename",
                        "path/win32.dirname",
                        "path/win32.extname",
                        "path/win32.format",
                        "path/win32.matchesGlob",
                        "path/win32.isAbsolute",
                        "path/win32.join",
                        "path/win32.normalize",
                        "path/win32.parse",
                        "path/win32.relative",
                        "path/win32.resolve",
                        "path/win32.toNamespacedPath",
                        "perf_hooks",
                        "perf_hooks.performance",
                        "perf_hooks.performance.clearMarks",
                        "perf_hooks.performance.clearMeasures",
                        "perf_hooks.performance.clearResourceTimings",
                        "perf_hooks.performance.eventLoopUtilization",
                        "perf_hooks.performance.getEntries",
                        "perf_hooks.performance.getEntriesByName",
                        "perf_hooks.performance.getEntriesByType",
                        "perf_hooks.performance.mark",
                        "perf_hooks.performance.markResourceTiming",
                        "perf_hooks.performance.measure",
                        "perf_hooks.performance.nodeTiming",
                        "perf_hooks.performance.nodeTiming.bootstrapComplete",
                        "perf_hooks.performance.nodeTiming.environment",
                        "perf_hooks.performance.nodeTiming.idleTime",
                        "perf_hooks.performance.nodeTiming.loopExit",
                        "perf_hooks.performance.nodeTiming.loopStart",
                        "perf_hooks.performance.nodeTiming.nodeStart",
                        "perf_hooks.performance.nodeTiming.uvMetricsInfo",
                        "perf_hooks.performance.nodeTiming.v8Start",
                        "perf_hooks.performance.now",
                        "perf_hooks.performance.onresourcetimingbufferfull",
                        "perf_hooks.performance.setResourceTimingBufferSize",
                        "perf_hooks.performance.timeOrigin",
                        "perf_hooks.performance.timerify",
                        "perf_hooks.performance.toJSON",
                        "perf_hooks.createHistogram",
                        "perf_hooks.monitorEventLoopDelay",
                        "perf_hooks.PerformanceEntry",
                        "perf_hooks.PerformanceMark",
                        "perf_hooks.PerformanceMeasure",
                        "perf_hooks.PerformanceNodeEntry",
                        "perf_hooks.PerformanceNodeTiming",
                        "perf_hooks.PerformanceResourceTiming",
                        "perf_hooks.PerformanceObserver",
                        "perf_hooks.PerformanceObserverEntryList",
                        "perf_hooks.Histogram",
                        "perf_hooks.IntervalHistogram",
                        "perf_hooks.RecordableHistogram",
                        "punycode",
                        "punycode.ucs2",
                        "punycode.version",
                        "punycode.decode",
                        "punycode.encode",
                        "punycode.toASCII",
                        "punycode.toUnicode",
                        "querystring",
                        "querystring.decode",
                        "querystring.encode",
                        "querystring.escape",
                        "querystring.parse",
                        "querystring.stringify",
                        "querystring.unescape",
                        "readline",
                        "readline.promises",
                        "readline.promises.createInterface",
                        "readline.promises.Interface",
                        "readline.promises.Readline",
                        "readline.clearLine",
                        "readline.clearScreenDown",
                        "readline.createInterface",
                        "readline.cursorTo",
                        "readline.moveCursor",
                        "readline.Interface",
                        "readline.emitKeypressEvents",
                        "readline.InterfaceConstructor",
                        "readline/promises",
                        "readline/promises.createInterface",
                        "readline/promises.Interface",
                        "readline/promises.Readline",
                        "repl",
                        "repl.start",
                        "repl.writer",
                        "repl.REPLServer()",
                        "repl.REPLServer",
                        "repl.REPL_MODE_MAGIC",
                        "repl.REPL_MODE_SLOPPY",
                        "repl.REPL_MODE_STRICT",
                        "repl.Recoverable()",
                        "repl.Recoverable",
                        "repl.builtinModules",
                        "sea",
                        "sea.isSea",
                        "sea.getAsset",
                        "sea.getAssetAsBlob",
                        "sea.getRawAsset",
                        "sea.sea.isSea",
                        "sea.sea.getAsset",
                        "sea.sea.getAssetAsBlob",
                        "sea.sea.getRawAsset",
                        "stream",
                        "stream.promises",
                        "stream.promises.pipeline",
                        "stream.promises.finished",
                        "stream.finished",
                        "stream.pipeline",
                        "stream.compose",
                        "stream.duplexPair",
                        "stream.Readable",
                        "stream.Readable.from",
                        "stream.Readable.isDisturbed",
                        "stream.Readable.fromWeb",
                        "stream.Readable.toWeb",
                        "stream.Writable",
                        "stream.Writable.fromWeb",
                        "stream.Writable.toWeb",
                        "stream.Duplex",
                        "stream.Duplex.from",
                        "stream.Duplex.fromWeb",
                        "stream.Duplex.toWeb",
                        "stream.Transform",
                        "stream.isErrored",
                        "stream.isReadable",
                        "stream.addAbortSignal",
                        "stream.getDefaultHighWaterMark",
                        "stream.setDefaultHighWaterMark",
                        "stream/promises.pipeline",
                        "stream/promises.finished",
                        "stream/web",
                        "stream/web.ReadableStream",
                        "stream/web.ReadableStream.from",
                        "stream/web.ReadableStreamDefaultReader",
                        "stream/web.ReadableStreamBYOBReader",
                        "stream/web.ReadableStreamDefaultController",
                        "stream/web.ReadableByteStreamController",
                        "stream/web.ReadableStreamBYOBRequest",
                        "stream/web.WritableStream",
                        "stream/web.WritableStreamDefaultWriter",
                        "stream/web.WritableStreamDefaultController",
                        "stream/web.TransformStream",
                        "stream/web.TransformStreamDefaultController",
                        "stream/web.ByteLengthQueuingStrategy",
                        "stream/web.CountQueuingStrategy",
                        "stream/web.TextEncoderStream",
                        "stream/web.TextDecoderStream",
                        "stream/web.CompressionStream",
                        "stream/web.DecompressionStream",
                        "stream/consumers",
                        "stream/consumers.arrayBuffer",
                        "stream/consumers.blob",
                        "stream/consumers.buffer",
                        "stream/consumers.json",
                        "stream/consumers.text",
                        "string_decoder",
                        "string_decoder.StringDecoder",
                        "sqlite",
                        "sqlite.constants",
                        "sqlite.constants.SQLITE_CHANGESET_OMIT",
                        "sqlite.constants.SQLITE_CHANGESET_REPLACE",
                        "sqlite.constants.SQLITE_CHANGESET_ABORT",
                        "sqlite.backup",
                        "sqlite.DatabaseSync",
                        "sqlite.StatementSync",
                        "sqlite.SQLITE_CHANGESET_OMIT",
                        "sqlite.SQLITE_CHANGESET_REPLACE",
                        "sqlite.SQLITE_CHANGESET_ABORT",
                        "test",
                        "test.after",
                        "test.afterEach",
                        "test.assert",
                        "test.assert.register",
                        "test.before",
                        "test.beforeEach",
                        "test.describe",
                        "test.describe.only",
                        "test.describe.skip",
                        "test.describe.todo",
                        "test.it",
                        "test.it.only",
                        "test.it.skip",
                        "test.it.todo",
                        "test.mock",
                        "test.mock.fn",
                        "test.mock.getter",
                        "test.mock.method",
                        "test.mock.module",
                        "test.mock.reset",
                        "test.mock.restoreAll",
                        "test.mock.setter",
                        "test.mock.timers",
                        "test.mock.timers.enable",
                        "test.mock.timers.reset",
                        "test.mock.timers.tick",
                        "test.only",
                        "test.run",
                        "test.snapshot",
                        "test.snapshot.setDefaultSnapshotSerializers",
                        "test.snapshot.setResolveSnapshotPath",
                        "test.skip",
                        "test.suite",
                        "test.test",
                        "test.test.only",
                        "test.test.skip",
                        "test.test.todo",
                        "test.todo",
                        "timers",
                        "timers.Immediate",
                        "timers.Timeout",
                        "timers.setImmediate",
                        "timers.clearImmediate",
                        "timers.setInterval",
                        "timers.clearInterval",
                        "timers.setTimeout",
                        "timers.clearTimeout",
                        "timers.promises",
                        "timers.promises.setTimeout",
                        "timers.promises.setImmediate",
                        "timers.promises.setInterval",
                        "timers.promises.scheduler.wait",
                        "timers.promises.scheduler.yield",
                        "timers/promises",
                        "timers/promises.setTimeout",
                        "timers/promises.setImmediate",
                        "timers/promises.setInterval",
                        "timers/promises.scheduler.wait",
                        "timers/promises.scheduler.yield",
                        "tls",
                        "tls.checkServerIdentity",
                        "tls.connect",
                        "tls.createSecureContext",
                        "tls.createSecurePair",
                        "tls.createServer",
                        "tls.CryptoStream",
                        "tls.DEFAULT_CIPHERS",
                        "tls.DEFAULT_ECDH_CURVE",
                        "tls.DEFAULT_MAX_VERSION",
                        "tls.DEFAULT_MIN_VERSION",
                        "tls.getCACertificates",
                        "tls.getCiphers",
                        "tls.rootCertificates",
                        "tls.SecureContext",
                        "tls.SecurePair",
                        "tls.Server",
                        "tls.setDefaultCACertificates",
                        "tls.TLSSocket",
                        "trace_events",
                        "trace_events.createTracing",
                        "trace_events.getEnabledCategories",
                        "tty",
                        "tty.isatty",
                        "tty.ReadStream",
                        "tty.WriteStream",
                        "url",
                        "url.domainToASCII",
                        "url.domainToUnicode",
                        "url.fileURLToPath",
                        "url.format",
                        "url.pathToFileURL",
                        "url.urlToHttpOptions",
                        "url.URL",
                        "url.URL.canParse",
                        "url.URL.createObjectURL",
                        "url.URL.revokeObjectURL",
                        "url.URLPattern",
                        "url.URLSearchParams",
                        "url.Url",
                        "util.promisify",
                        "util.promisify.custom",
                        "util.callbackify",
                        "util.debuglog",
                        "util.debug",
                        "util.deprecate",
                        "util.diff",
                        "util.format",
                        "util.formatWithOptions",
                        "util.getCallSite",
                        "util.getCallSites",
                        "util.getSystemErrorName",
                        "util.getSystemErrorMap",
                        "util.getSystemErrorMessage",
                        "util.inherits",
                        "util.inspect",
                        "util.inspect.custom",
                        "util.inspect.defaultOptions",
                        "util.inspect.replDefaults",
                        "util.isDeepStrictEqual",
                        "util.parseArgs",
                        "util.parseEnv",
                        "util.setTraceSigInt",
                        "util.stripVTControlCharacters",
                        "util.styleText",
                        "util.toUSVString",
                        "util.transferableAbortController",
                        "util.transferableAbortSignal",
                        "util.aborted",
                        "util.MIMEType",
                        "util.MIMEParams",
                        "util.TextDecoder",
                        "util.TextEncoder",
                        "util.types",
                        "util.types.isExternal",
                        "util.types.isDate",
                        "util.types.isArgumentsObject",
                        "util.types.isBigIntObject",
                        "util.types.isBooleanObject",
                        "util.types.isNumberObject",
                        "util.types.isStringObject",
                        "util.types.isSymbolObject",
                        "util.types.isNativeError",
                        "util.types.isRegExp",
                        "util.types.isAsyncFunction",
                        "util.types.isGeneratorFunction",
                        "util.types.isGeneratorObject",
                        "util.types.isPromise",
                        "util.types.isMap",
                        "util.types.isSet",
                        "util.types.isMapIterator",
                        "util.types.isSetIterator",
                        "util.types.isWeakMap",
                        "util.types.isWeakSet",
                        "util.types.isArrayBuffer",
                        "util.types.isDataView",
                        "util.types.isSharedArrayBuffer",
                        "util.types.isProxy",
                        "util.types.isModuleNamespaceObject",
                        "util.types.isAnyArrayBuffer",
                        "util.types.isBoxedPrimitive",
                        "util.types.isArrayBufferView",
                        "util.types.isTypedArray",
                        "util.types.isUint8Array",
                        "util.types.isUint8ClampedArray",
                        "util.types.isUint16Array",
                        "util.types.isUint32Array",
                        "util.types.isInt8Array",
                        "util.types.isInt16Array",
                        "util.types.isInt32Array",
                        "util.types.isFloat16Array",
                        "util.types.isFloat32Array",
                        "util.types.isFloat64Array",
                        "util.types.isBigInt64Array",
                        "util.types.isBigUint64Array",
                        "util.types.isKeyObject",
                        "util.types.isCryptoKey",
                        "util.types.isWebAssemblyCompiledModule",
                        "util._extend",
                        "util.isArray",
                        "util.isBoolean",
                        "util.isBuffer",
                        "util.isDate",
                        "util.isError",
                        "util.isFunction",
                        "util.isNull",
                        "util.isNullOrUndefined",
                        "util.isNumber",
                        "util.isObject",
                        "util.isPrimitive",
                        "util.isRegExp",
                        "util.isString",
                        "util.isSymbol",
                        "util.isUndefined",
                        "util.log",
                        "util",
                        "util/types",
                        "util/types.isExternal",
                        "util/types.isDate",
                        "util/types.isArgumentsObject",
                        "util/types.isBigIntObject",
                        "util/types.isBooleanObject",
                        "util/types.isNumberObject",
                        "util/types.isStringObject",
                        "util/types.isSymbolObject",
                        "util/types.isNativeError",
                        "util/types.isRegExp",
                        "util/types.isAsyncFunction",
                        "util/types.isGeneratorFunction",
                        "util/types.isGeneratorObject",
                        "util/types.isPromise",
                        "util/types.isMap",
                        "util/types.isSet",
                        "util/types.isMapIterator",
                        "util/types.isSetIterator",
                        "util/types.isWeakMap",
                        "util/types.isWeakSet",
                        "util/types.isArrayBuffer",
                        "util/types.isDataView",
                        "util/types.isSharedArrayBuffer",
                        "util/types.isProxy",
                        "util/types.isModuleNamespaceObject",
                        "util/types.isAnyArrayBuffer",
                        "util/types.isBoxedPrimitive",
                        "util/types.isArrayBufferView",
                        "util/types.isTypedArray",
                        "util/types.isUint8Array",
                        "util/types.isUint8ClampedArray",
                        "util/types.isUint16Array",
                        "util/types.isUint32Array",
                        "util/types.isInt8Array",
                        "util/types.isInt16Array",
                        "util/types.isInt32Array",
                        "util/types.isFloat16Array",
                        "util/types.isFloat32Array",
                        "util/types.isFloat64Array",
                        "util/types.isBigInt64Array",
                        "util/types.isBigUint64Array",
                        "util/types.isKeyObject",
                        "util/types.isCryptoKey",
                        "util/types.isWebAssemblyCompiledModule",
                        "v8",
                        "v8.serialize",
                        "v8.deserialize",
                        "v8.Serializer",
                        "v8.Deserializer",
                        "v8.DefaultSerializer",
                        "v8.DefaultDeserializer",
                        "v8.promiseHooks",
                        "v8.promiseHooks.onInit",
                        "v8.promiseHooks.onSettled",
                        "v8.promiseHooks.onBefore",
                        "v8.promiseHooks.onAfter",
                        "v8.promiseHooks.createHook",
                        "v8.startupSnapshot",
                        "v8.startupSnapshot.addSerializeCallback",
                        "v8.startupSnapshot.addDeserializeCallback",
                        "v8.startupSnapshot.setDeserializeMainFunction",
                        "v8.startupSnapshot.isBuildingSnapshot",
                        "v8.cachedDataVersionTag",
                        "v8.getHeapCodeStatistics",
                        "v8.getHeapSnapshot",
                        "v8.getHeapSpaceStatistics",
                        "v8.getHeapStatistics",
                        "v8.isStringOneByteRepresentation",
                        "v8.queryObjects",
                        "v8.setFlagsFromString",
                        "v8.stopCoverage",
                        "v8.takeCoverage",
                        "v8.writeHeapSnapshot",
                        "v8.setHeapSnapshotNearHeapLimit",
                        "v8.GCProfiler",
                        "vm.constants",
                        "vm.compileFunction",
                        "vm.createContext",
                        "vm.isContext",
                        "vm.measureMemory",
                        "vm.runInContext",
                        "vm.runInNewContext",
                        "vm.runInThisContext",
                        "vm.Script",
                        "vm.Module",
                        "vm.SourceTextModule",
                        "vm.SyntheticModule",
                        "vm",
                        "wasi.WASI",
                        "wasi",
                        "worker_threads",
                        "worker_threads.parentPort",
                        "worker_threads.resourceLimits",
                        "worker_threads.SHARE_ENV",
                        "worker_threads.threadId",
                        "worker_threads.workerData",
                        "worker_threads.getEnvironmentData",
                        "worker_threads.getHeapStatistics",
                        "worker_threads.markAsUncloneable",
                        "worker_threads.markAsUntransferable",
                        "worker_threads.isInternalThread",
                        "worker_threads.isMainThread",
                        "worker_threads.isMarkedAsUntransferable",
                        "worker_threads.moveMessagePortToContext",
                        "worker_threads.postMessageToThread",
                        "worker_threads.receiveMessageOnPort",
                        "worker_threads.setEnvironmentData",
                        "worker_threads.BroadcastChannel",
                        "worker_threads.MessageChannel",
                        "worker_threads.MessagePort",
                        "worker_threads.Worker",
                        "zlib.brotliCompress",
                        "zlib.brotliCompressSync",
                        "zlib.brotliDecompress",
                        "zlib.brotliDecompressSync",
                        "zlib.constants",
                        "zlib.constants.ZSTD_e_continue",
                        "zlib.constants.ZSTD_e_flush",
                        "zlib.constants.ZSTD_e_end",
                        "zlib.constants.ZSTD_fast",
                        "zlib.constants.ZSTD_dfast",
                        "zlib.constants.ZSTD_greedy",
                        "zlib.constants.ZSTD_lazy",
                        "zlib.constants.ZSTD_lazy2",
                        "zlib.constants.ZSTD_btlazy2",
                        "zlib.constants.ZSTD_btopt",
                        "zlib.constants.ZSTD_btultra",
                        "zlib.constants.ZSTD_btultra2",
                        "zlib.constants.ZSTD_c_compressionLevel",
                        "zlib.constants.ZSTD_c_windowLog",
                        "zlib.constants.ZSTD_c_hashLog",
                        "zlib.constants.ZSTD_c_chainLog",
                        "zlib.constants.ZSTD_c_searchLog",
                        "zlib.constants.ZSTD_c_minMatch",
                        "zlib.constants.ZSTD_c_targetLength",
                        "zlib.constants.ZSTD_c_strategy",
                        "zlib.constants.ZSTD_c_enableLongDistanceMatching",
                        "zlib.constants.ZSTD_c_ldmHashLog",
                        "zlib.constants.ZSTD_c_ldmMinMatch",
                        "zlib.constants.ZSTD_c_ldmBucketSizeLog",
                        "zlib.constants.ZSTD_c_ldmHashRateLog",
                        "zlib.constants.ZSTD_c_contentSizeFlag",
                        "zlib.constants.ZSTD_c_checksumFlag",
                        "zlib.constants.ZSTD_c_dictIDFlag",
                        "zlib.constants.ZSTD_c_nbWorkers",
                        "zlib.constants.ZSTD_c_jobSize",
                        "zlib.constants.ZSTD_c_overlapLog",
                        "zlib.constants.ZSTD_d_windowLogMax",
                        "zlib.constants.ZSTD_CLEVEL_DEFAULT",
                        "zlib.constants.ZSTD_error_no_error",
                        "zlib.constants.ZSTD_error_GENERIC",
                        "zlib.constants.ZSTD_error_prefix_unknown",
                        "zlib.constants.ZSTD_error_version_unsupported",
                        "zlib.constants.ZSTD_error_frameParameter_unsupported",
                        "zlib.constants.ZSTD_error_frameParameter_windowTooLarge",
                        "zlib.constants.ZSTD_error_corruption_detected",
                        "zlib.constants.ZSTD_error_checksum_wrong",
                        "zlib.constants.ZSTD_error_literals_headerWrong",
                        "zlib.constants.ZSTD_error_dictionary_corrupted",
                        "zlib.constants.ZSTD_error_dictionary_wrong",
                        "zlib.constants.ZSTD_error_dictionaryCreation_failed",
                        "zlib.constants.ZSTD_error_parameter_unsupported",
                        "zlib.constants.ZSTD_error_parameter_combination_unsupported",
                        "zlib.constants.ZSTD_error_parameter_outOfBound",
                        "zlib.constants.ZSTD_error_tableLog_tooLarge",
                        "zlib.constants.ZSTD_error_maxSymbolValue_tooLarge",
                        "zlib.constants.ZSTD_error_maxSymbolValue_tooSmall",
                        "zlib.constants.ZSTD_error_stabilityCondition_notRespected",
                        "zlib.constants.ZSTD_error_stage_wrong",
                        "zlib.constants.ZSTD_error_init_missing",
                        "zlib.constants.ZSTD_error_memory_allocation",
                        "zlib.constants.ZSTD_error_workSpace_tooSmall",
                        "zlib.constants.ZSTD_error_dstSize_tooSmall",
                        "zlib.constants.ZSTD_error_srcSize_wrong",
                        "zlib.constants.ZSTD_error_dstBuffer_null",
                        "zlib.constants.ZSTD_error_noForwardProgress_destFull",
                        "zlib.constants.ZSTD_error_noForwardProgress_inputEmpty",
                        "zlib.crc32",
                        "zlib.createBrotliCompress",
                        "zlib.createBrotliDecompress",
                        "zlib.createDeflate",
                        "zlib.createDeflateRaw",
                        "zlib.createGunzip",
                        "zlib.createGzip",
                        "zlib.createInflate",
                        "zlib.createInflateRaw",
                        "zlib.createUnzip",
                        "zlib.createZstdCompress",
                        "zlib.createZstdDecompress",
                        "zlib.deflate",
                        "zlib.deflateRaw",
                        "zlib.deflateRawSync",
                        "zlib.deflateSync",
                        "zlib.gunzip",
                        "zlib.gunzipSync",
                        "zlib.gzip",
                        "zlib.gzipSync",
                        "zlib.inflate",
                        "zlib.inflateRaw",
                        "zlib.inflateRawSync",
                        "zlib.inflateSync",
                        "zlib.unzip",
                        "zlib.unzipSync",
                        "zlib.zstdCompress",
                        "zlib.zstdCompressSync",
                        "zlib.zstdDecompress",
                        "zlib.zstdDecompressSync",
                        "zlib.BrotliCompress()",
                        "zlib.BrotliCompress",
                        "zlib.BrotliDecompress()",
                        "zlib.BrotliDecompress",
                        "zlib.Deflate()",
                        "zlib.Deflate",
                        "zlib.DeflateRaw()",
                        "zlib.DeflateRaw",
                        "zlib.Gunzip()",
                        "zlib.Gunzip",
                        "zlib.Gzip()",
                        "zlib.Gzip",
                        "zlib.Inflate()",
                        "zlib.Inflate",
                        "zlib.InflateRaw()",
                        "zlib.InflateRaw",
                        "zlib.Unzip()",
                        "zlib.Unzip",
                        "zlib.ZstdCompress",
                        "zlib.ZstdDecompress",
                        "zlib.ZstdOptions",
                        "zlib",
                        "import.meta.resolve",
                        "import.meta.dirname",
                        "import.meta.filename",
                        "import.meta.main",
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "version": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "prefer-global/buffer": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`Buffer\` or \`require("buffer").Buffer\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/buffer.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("buffer").Buffer'. Use the global variable 'Buffer' instead.",
              "preferModule": "Unexpected use of the global variable 'Buffer'. Use 'require("buffer").Buffer' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-global/console": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`console\` or \`require("console")\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/console.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("console")'. Use the global variable 'console' instead.",
              "preferModule": "Unexpected use of the global variable 'console'. Use 'require("console")' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-global/process": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`process\` or \`require("process")\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/process.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("process")'. Use the global variable 'process' instead.",
              "preferModule": "Unexpected use of the global variable 'process'. Use 'require("process")' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-global/text-decoder": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`TextDecoder\` or \`require("util").TextDecoder\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-decoder.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("util").TextDecoder'. Use the global variable 'TextDecoder' instead.",
              "preferModule": "Unexpected use of the global variable 'TextDecoder'. Use 'require("util").TextDecoder' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-global/text-encoder": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`TextEncoder\` or \`require("util").TextEncoder\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-encoder.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("util").TextEncoder'. Use the global variable 'TextEncoder' instead.",
              "preferModule": "Unexpected use of the global variable 'TextEncoder'. Use 'require("util").TextEncoder' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-global/url": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`URL\` or \`require("url").URL\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("url").URL'. Use the global variable 'URL' instead.",
              "preferModule": "Unexpected use of the global variable 'URL'. Use 'require("url").URL' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-global/url-search-params": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce either \`URLSearchParams\` or \`require("url").URLSearchParams\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url-search-params.md",
            },
            "fixable": null,
            "messages": {
              "preferGlobal": "Unexpected use of 'require("url").URLSearchParams'. Use the global variable 'URLSearchParams' instead.",
              "preferModule": "Unexpected use of the global variable 'URLSearchParams'. Use 'require("url").URLSearchParams' instead.",
            },
            "schema": [
              {
                "enum": [
                  "always",
                  "never",
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-node-protocol": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce using the \`node:\` protocol when importing Node.js builtin modules.",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-node-protocol.md",
            },
            "fixable": "code",
            "messages": {
              "preferNodeProtocol": "Prefer \`node:{{moduleName}}\` over \`{{moduleName}}\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "version": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-promises/dns": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce \`require("dns").promises\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/dns.md",
            },
            "fixable": null,
            "messages": {
              "preferPromises": "Use 'dns.promises.{{name}}()' instead.",
              "preferPromisesNew": "Use 'new dns.promises.{{name}}()' instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-promises/fs": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "enforce \`require("fs").promises\`",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/fs.md",
            },
            "fixable": null,
            "messages": {
              "preferPromises": "Use 'fs.promises.{{name}}()' instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "process-exit-as-throw": {
          "create": [Function],
          "meta": {
            "docs": {
              "description": "require that \`process.exit()\` expressions use the same code path as \`throw\`",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/process-exit-as-throw.md",
            },
            "fixable": null,
            "schema": [],
            "supported": false,
            "type": "problem",
          },
        },
        "shebang": {
          "create": [Function],
          "meta": {
            "deprecated": true,
            "docs": {
              "description": "require correct usage of hashbang",
              "recommended": false,
              "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md",
            },
            "fixable": "code",
            "messages": {
              "expectedHashbang": "This file needs no shebang.",
              "expectedHashbangNode": "This file needs shebang "#!/usr/bin/env {{executableName}}".",
              "expectedLF": "This file must have Unix linebreaks (LF).",
              "unexpectedBOM": "This file must not have Unicode BOM.",
            },
            "replacedBy": [
              "n/hashbang",
            ],
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "additionalExecutables": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "convertPath": {
                    "anyOf": [
                      {
                        "additionalProperties": false,
                        "patternProperties": {
                          "^.+$": {
                            "items": {
                              "type": "string",
                            },
                            "maxItems": 2,
                            "minItems": 2,
                            "type": "array",
                          },
                        },
                        "properties": {},
                        "type": "object",
                      },
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "exclude": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "include": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "replace": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "required": [
                            "include",
                            "replace",
                          ],
                          "type": "object",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                  "executableMap": {
                    "additionalProperties": false,
                    "patternProperties": {
                      "^\\.\\w+$": {
                        "pattern": "^[\\w-]+$",
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                  "ignoreUnpublished": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
      },
    },
    "security": {
      "configs": {
        "recommended": {
          "name": "security/recommended",
          "plugins": {
            "security": [Circular],
          },
          "rules": {
            "security/detect-bidi-characters": "warn",
            "security/detect-buffer-noassert": "warn",
            "security/detect-child-process": "warn",
            "security/detect-disable-mustache-escape": "warn",
            "security/detect-eval-with-expression": "warn",
            "security/detect-new-buffer": "warn",
            "security/detect-no-csrf-before-method-override": "warn",
            "security/detect-non-literal-fs-filename": "warn",
            "security/detect-non-literal-regexp": "warn",
            "security/detect-non-literal-require": "warn",
            "security/detect-object-injection": "warn",
            "security/detect-possible-timing-attacks": "warn",
            "security/detect-pseudoRandomBytes": "warn",
            "security/detect-unsafe-regex": "warn",
          },
        },
        "recommended-legacy": {
          "plugins": [
            "security",
          ],
          "rules": {
            "security/detect-bidi-characters": "warn",
            "security/detect-buffer-noassert": "warn",
            "security/detect-child-process": "warn",
            "security/detect-disable-mustache-escape": "warn",
            "security/detect-eval-with-expression": "warn",
            "security/detect-new-buffer": "warn",
            "security/detect-no-csrf-before-method-override": "warn",
            "security/detect-non-literal-fs-filename": "warn",
            "security/detect-non-literal-regexp": "warn",
            "security/detect-non-literal-require": "warn",
            "security/detect-object-injection": "warn",
            "security/detect-possible-timing-attacks": "warn",
            "security/detect-pseudoRandomBytes": "warn",
            "security/detect-unsafe-regex": "warn",
          },
        },
      },
      "meta": {
        "name": "eslint-plugin-security",
        "version": "3.0.1",
      },
      "rules": {
        "detect-bidi-characters": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects trojan source attacks that employ unicode bidi attacks to inject malicious code.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-bidi-characters.md",
            },
            "type": "error",
          },
        },
        "detect-buffer-noassert": {
          "create": [Function],
          "meta": {
            "__methodsToCheck": {
              "read": [
                "readUInt8",
                "readUInt16LE",
                "readUInt16BE",
                "readUInt32LE",
                "readUInt32BE",
                "readInt8",
                "readInt16LE",
                "readInt16BE",
                "readInt32LE",
                "readInt32BE",
                "readFloatLE",
                "readFloatBE",
                "readDoubleLE",
                "readDoubleBE",
              ],
              "write": [
                "writeUInt8",
                "writeUInt16LE",
                "writeUInt16BE",
                "writeUInt32LE",
                "writeUInt32BE",
                "writeInt8",
                "writeInt16LE",
                "writeInt16BE",
                "writeInt32LE",
                "writeInt32BE",
                "writeFloatLE",
                "writeFloatBE",
                "writeDoubleLE",
                "writeDoubleBE",
              ],
            },
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects calls to "buffer" with "noAssert" flag set.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-buffer-noassert.md",
            },
            "type": "error",
          },
        },
        "detect-child-process": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects instances of "child_process" & non-literal "exec()" calls.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-child-process.md",
            },
            "type": "error",
          },
        },
        "detect-disable-mustache-escape": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects "object.escapeMarkup = false", which can be used with some template engines to disable escaping of HTML entities.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-disable-mustache-escape.md",
            },
            "type": "error",
          },
        },
        "detect-eval-with-expression": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects "eval(variable)" which can allow an attacker to run arbitrary code inside your process.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-eval-with-expression.md",
            },
            "type": "error",
          },
        },
        "detect-new-buffer": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects instances of new Buffer(argument) where argument is any non-literal value.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-new-buffer.md",
            },
            "type": "error",
          },
        },
        "detect-no-csrf-before-method-override": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects Express "csrf" middleware setup before "method-override" middleware.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-no-csrf-before-method-override.md",
            },
            "type": "error",
          },
        },
        "detect-non-literal-fs-filename": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects variable in filename argument of "fs" calls, which might allow an attacker to access anything on your system.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-non-literal-fs-filename.md",
            },
            "type": "error",
          },
        },
        "detect-non-literal-regexp": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects "RegExp(variable)", which might allow an attacker to DOS your server with a long-running regular expression.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-non-literal-regexp.md",
            },
            "type": "error",
          },
        },
        "detect-non-literal-require": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects "require(variable)", which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-non-literal-require.md",
            },
            "type": "error",
          },
        },
        "detect-object-injection": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects "variable[key]" as a left- or right-hand assignment operand.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-object-injection.md",
            },
            "type": "error",
          },
        },
        "detect-possible-timing-attacks": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects insecure comparisons (\`==\`, \`!=\`, \`!==\` and \`===\`), which check input sequentially.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-possible-timing-attacks.md",
            },
            "type": "error",
          },
        },
        "detect-pseudoRandomBytes": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects if "pseudoRandomBytes()" is in use, which might not give you the randomness you need and expect.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-pseudoRandomBytes.md",
            },
            "type": "error",
          },
        },
        "detect-unsafe-regex": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Possible Security Vulnerability",
              "description": "Detects potentially unsafe regular expressions, which may take a very long time to run, blocking the event loop.",
              "recommended": true,
              "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-unsafe-regex.md",
            },
            "type": "error",
          },
        },
      },
      "rulesConfig": {
        "detect-bidi-characters": 0,
        "detect-buffer-noassert": 0,
        "detect-child-process": 0,
        "detect-disable-mustache-escape": 0,
        "detect-eval-with-expression": 0,
        "detect-new-buffer": 0,
        "detect-no-csrf-before-method-override": 0,
        "detect-non-literal-fs-filename": 0,
        "detect-non-literal-regexp": 0,
        "detect-non-literal-require": 0,
        "detect-object-injection": 0,
        "detect-possible-timing-attacks": 0,
        "detect-pseudoRandomBytes": 0,
        "detect-unsafe-regex": 0,
      },
    },
  },
  "rules": {
    "global-require": "error",
    "n/hashbang": "error",
    "n/no-deprecated-api": "error",
    "n/no-exports-assign": "error",
    "n/no-extraneous-import": "off",
    "n/no-extraneous-require": "off",
    "n/no-missing-import": "off",
    "n/no-missing-require": "off",
    "n/no-process-exit": "error",
    "n/no-unpublished-bin": "error",
    "n/no-unpublished-import": "off",
    "n/no-unpublished-require": "off",
    "n/no-unsupported-features/es-builtins": "error",
    "n/no-unsupported-features/es-syntax": [
      "error",
      {
        "ignores": [
          "modules",
        ],
      },
    ],
    "n/no-unsupported-features/node-builtins": "error",
    "n/process-exit-as-throw": "error",
    "no-buffer-constructor": "error",
    "no-new-require": "error",
    "no-path-concat": "error",
    "security/detect-bidi-characters": "warn",
    "security/detect-buffer-noassert": "warn",
    "security/detect-child-process": "warn",
    "security/detect-disable-mustache-escape": "warn",
    "security/detect-eval-with-expression": "warn",
    "security/detect-new-buffer": "warn",
    "security/detect-no-csrf-before-method-override": "warn",
    "security/detect-non-literal-fs-filename": "warn",
    "security/detect-non-literal-regexp": "warn",
    "security/detect-non-literal-require": "warn",
    "security/detect-object-injection": "off",
    "security/detect-possible-timing-attacks": "warn",
    "security/detect-pseudoRandomBytes": "warn",
    "security/detect-unsafe-regex": "warn",
  },
}
`;

exports[`eslint > configs > should match the snapshot for the openSource preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
    "**/*.{ts,tsx,cts,mts}",
  ],
  "name": "foundry/open-source",
  "plugins": {
    "notice": {
      "meta": {
        "name": "eslint-plugin-notice",
        "version": "1.0.0",
      },
      "rules": {
        "notice": {
          "create": [Function],
          "meta": {
            "docs": {
              "category": "Stylistic Issues",
              "description": "An eslint rule that checks the top of files and --fix them too!",
            },
            "fixable": "code",
            "schema": false,
          },
        },
      },
    },
  },
  "rules": {
    "notice/notice": [
      "error",
      {
        "onNonMatchingHeader": "prepend",
        "template": "/**
 * Copyright <%= YEAR %>, <%= NAME %>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

",
        "templateVars": {
          "NAME": "SumUp Ltd.",
        },
        "varRegexps": {
          "NAME": /SumUp Ltd\\\\\\./,
        },
      },
    ],
  },
}
`;

exports[`eslint > configs > should match the snapshot for the react preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
    "**/*.{ts,tsx,cts,mts}",
  ],
  "languageOptions": {
    "globals": {
      "AI": false,
      "AICreateMonitor": false,
      "AITextSession": false,
      "AbortController": false,
      "AbortSignal": false,
      "AbsoluteOrientationSensor": false,
      "AbstractRange": false,
      "Accelerometer": false,
      "AnalyserNode": false,
      "Animation": false,
      "AnimationEffect": false,
      "AnimationEvent": false,
      "AnimationPlaybackEvent": false,
      "AnimationTimeline": false,
      "AsyncDisposableStack": false,
      "Attr": false,
      "Audio": false,
      "AudioBuffer": false,
      "AudioBufferSourceNode": false,
      "AudioContext": false,
      "AudioData": false,
      "AudioDecoder": false,
      "AudioDestinationNode": false,
      "AudioEncoder": false,
      "AudioListener": false,
      "AudioNode": false,
      "AudioParam": false,
      "AudioParamMap": false,
      "AudioProcessingEvent": false,
      "AudioScheduledSourceNode": false,
      "AudioSinkInfo": false,
      "AudioWorklet": false,
      "AudioWorkletGlobalScope": false,
      "AudioWorkletNode": false,
      "AudioWorkletProcessor": false,
      "AuthenticatorAssertionResponse": false,
      "AuthenticatorAttestationResponse": false,
      "AuthenticatorResponse": false,
      "BackgroundFetchManager": false,
      "BackgroundFetchRecord": false,
      "BackgroundFetchRegistration": false,
      "BarProp": false,
      "BarcodeDetector": false,
      "BaseAudioContext": false,
      "BatteryManager": false,
      "BeforeUnloadEvent": false,
      "BiquadFilterNode": false,
      "Blob": false,
      "BlobEvent": false,
      "Bluetooth": false,
      "BluetoothCharacteristicProperties": false,
      "BluetoothDevice": false,
      "BluetoothRemoteGATTCharacteristic": false,
      "BluetoothRemoteGATTDescriptor": false,
      "BluetoothRemoteGATTServer": false,
      "BluetoothRemoteGATTService": false,
      "BluetoothUUID": false,
      "BroadcastChannel": false,
      "BrowserCaptureMediaStreamTrack": false,
      "ByteLengthQueuingStrategy": false,
      "CDATASection": false,
      "CSPViolationReportBody": false,
      "CSS": false,
      "CSSAnimation": false,
      "CSSConditionRule": false,
      "CSSContainerRule": false,
      "CSSCounterStyleRule": false,
      "CSSFontFaceRule": false,
      "CSSFontFeatureValuesRule": false,
      "CSSFontPaletteValuesRule": false,
      "CSSFunctionDeclarations": false,
      "CSSFunctionDescriptors": false,
      "CSSFunctionRule": false,
      "CSSGroupingRule": false,
      "CSSImageValue": false,
      "CSSImportRule": false,
      "CSSKeyframeRule": false,
      "CSSKeyframesRule": false,
      "CSSKeywordValue": false,
      "CSSLayerBlockRule": false,
      "CSSLayerStatementRule": false,
      "CSSMarginRule": false,
      "CSSMathClamp": false,
      "CSSMathInvert": false,
      "CSSMathMax": false,
      "CSSMathMin": false,
      "CSSMathNegate": false,
      "CSSMathProduct": false,
      "CSSMathSum": false,
      "CSSMathValue": false,
      "CSSMatrixComponent": false,
      "CSSMediaRule": false,
      "CSSNamespaceRule": false,
      "CSSNestedDeclarations": false,
      "CSSNumericArray": false,
      "CSSNumericValue": false,
      "CSSPageDescriptors": false,
      "CSSPageRule": false,
      "CSSPerspective": false,
      "CSSPositionTryDescriptors": false,
      "CSSPositionTryRule": false,
      "CSSPositionValue": false,
      "CSSPropertyRule": false,
      "CSSRotate": false,
      "CSSRule": false,
      "CSSRuleList": false,
      "CSSScale": false,
      "CSSScopeRule": false,
      "CSSSkew": false,
      "CSSSkewX": false,
      "CSSSkewY": false,
      "CSSStartingStyleRule": false,
      "CSSStyleDeclaration": false,
      "CSSStyleRule": false,
      "CSSStyleSheet": false,
      "CSSStyleValue": false,
      "CSSSupportsRule": false,
      "CSSTransformComponent": false,
      "CSSTransformValue": false,
      "CSSTransition": false,
      "CSSTranslate": false,
      "CSSUnitValue": false,
      "CSSUnparsedValue": false,
      "CSSVariableReferenceValue": false,
      "CSSViewTransitionRule": false,
      "Cache": false,
      "CacheStorage": false,
      "CanvasCaptureMediaStream": false,
      "CanvasCaptureMediaStreamTrack": false,
      "CanvasGradient": false,
      "CanvasPattern": false,
      "CanvasRenderingContext2D": false,
      "CaptureController": false,
      "CaretPosition": false,
      "ChannelMergerNode": false,
      "ChannelSplitterNode": false,
      "ChapterInformation": false,
      "CharacterBoundsUpdateEvent": false,
      "CharacterData": false,
      "Clipboard": false,
      "ClipboardChangeEvent": false,
      "ClipboardEvent": false,
      "ClipboardItem": false,
      "CloseEvent": false,
      "CloseWatcher": false,
      "CommandEvent": false,
      "Comment": false,
      "CompositionEvent": false,
      "CompressionStream": false,
      "ConstantSourceNode": false,
      "ContentVisibilityAutoStateChangeEvent": false,
      "ConvolverNode": false,
      "CookieChangeEvent": false,
      "CookieDeprecationLabel": false,
      "CookieStore": false,
      "CookieStoreManager": false,
      "CountQueuingStrategy": false,
      "CreateMonitor": false,
      "Credential": false,
      "CredentialsContainer": false,
      "CropTarget": false,
      "Crypto": false,
      "CryptoKey": false,
      "CustomElementRegistry": false,
      "CustomEvent": false,
      "CustomStateSet": false,
      "DOMError": false,
      "DOMException": false,
      "DOMImplementation": false,
      "DOMMatrix": false,
      "DOMMatrixReadOnly": false,
      "DOMParser": false,
      "DOMPoint": false,
      "DOMPointReadOnly": false,
      "DOMQuad": false,
      "DOMRect": false,
      "DOMRectList": false,
      "DOMRectReadOnly": false,
      "DOMStringList": false,
      "DOMStringMap": false,
      "DOMTokenList": false,
      "DataTransfer": false,
      "DataTransferItem": false,
      "DataTransferItemList": false,
      "DecompressionStream": false,
      "DelayNode": false,
      "DelegatedInkTrailPresenter": false,
      "DeviceMotionEvent": false,
      "DeviceMotionEventAcceleration": false,
      "DeviceMotionEventRotationRate": false,
      "DeviceOrientationEvent": false,
      "DevicePosture": false,
      "DisposableStack": false,
      "Document": false,
      "DocumentFragment": false,
      "DocumentPictureInPicture": false,
      "DocumentPictureInPictureEvent": false,
      "DocumentTimeline": false,
      "DocumentType": false,
      "DragEvent": false,
      "DynamicsCompressorNode": false,
      "EditContext": false,
      "Element": false,
      "ElementInternals": false,
      "EncodedAudioChunk": false,
      "EncodedVideoChunk": false,
      "ErrorEvent": false,
      "Event": false,
      "EventCounts": false,
      "EventSource": false,
      "EventTarget": false,
      "External": false,
      "EyeDropper": false,
      "FeaturePolicy": false,
      "FederatedCredential": false,
      "Fence": false,
      "FencedFrameConfig": false,
      "FetchLaterResult": false,
      "File": false,
      "FileList": false,
      "FileReader": false,
      "FileSystem": false,
      "FileSystemDirectoryEntry": false,
      "FileSystemDirectoryHandle": false,
      "FileSystemDirectoryReader": false,
      "FileSystemEntry": false,
      "FileSystemFileEntry": false,
      "FileSystemFileHandle": false,
      "FileSystemHandle": false,
      "FileSystemObserver": false,
      "FileSystemWritableFileStream": false,
      "FocusEvent": false,
      "FontData": false,
      "FontFace": false,
      "FontFaceSet": false,
      "FontFaceSetLoadEvent": false,
      "FormData": false,
      "FormDataEvent": false,
      "FragmentDirective": false,
      "GPU": false,
      "GPUAdapter": false,
      "GPUAdapterInfo": false,
      "GPUBindGroup": false,
      "GPUBindGroupLayout": false,
      "GPUBuffer": false,
      "GPUBufferUsage": false,
      "GPUCanvasContext": false,
      "GPUColorWrite": false,
      "GPUCommandBuffer": false,
      "GPUCommandEncoder": false,
      "GPUCompilationInfo": false,
      "GPUCompilationMessage": false,
      "GPUComputePassEncoder": false,
      "GPUComputePipeline": false,
      "GPUDevice": false,
      "GPUDeviceLostInfo": false,
      "GPUError": false,
      "GPUExternalTexture": false,
      "GPUInternalError": false,
      "GPUMapMode": false,
      "GPUOutOfMemoryError": false,
      "GPUPipelineError": false,
      "GPUPipelineLayout": false,
      "GPUQuerySet": false,
      "GPUQueue": false,
      "GPURenderBundle": false,
      "GPURenderBundleEncoder": false,
      "GPURenderPassEncoder": false,
      "GPURenderPipeline": false,
      "GPUSampler": false,
      "GPUShaderModule": false,
      "GPUShaderStage": false,
      "GPUSupportedFeatures": false,
      "GPUSupportedLimits": false,
      "GPUTexture": false,
      "GPUTextureUsage": false,
      "GPUTextureView": false,
      "GPUUncapturedErrorEvent": false,
      "GPUValidationError": false,
      "GainNode": false,
      "Gamepad": false,
      "GamepadAxisMoveEvent": false,
      "GamepadButton": false,
      "GamepadButtonEvent": false,
      "GamepadEvent": false,
      "GamepadHapticActuator": false,
      "GamepadPose": false,
      "Geolocation": false,
      "GeolocationCoordinates": false,
      "GeolocationPosition": false,
      "GeolocationPositionError": false,
      "GravitySensor": false,
      "Gyroscope": false,
      "HID": false,
      "HIDConnectionEvent": false,
      "HIDDevice": false,
      "HIDInputReportEvent": false,
      "HTMLAllCollection": false,
      "HTMLAnchorElement": false,
      "HTMLAreaElement": false,
      "HTMLAudioElement": false,
      "HTMLBRElement": false,
      "HTMLBaseElement": false,
      "HTMLBodyElement": false,
      "HTMLButtonElement": false,
      "HTMLCanvasElement": false,
      "HTMLCollection": false,
      "HTMLDListElement": false,
      "HTMLDataElement": false,
      "HTMLDataListElement": false,
      "HTMLDetailsElement": false,
      "HTMLDialogElement": false,
      "HTMLDirectoryElement": false,
      "HTMLDivElement": false,
      "HTMLDocument": false,
      "HTMLElement": false,
      "HTMLEmbedElement": false,
      "HTMLFencedFrameElement": false,
      "HTMLFieldSetElement": false,
      "HTMLFontElement": false,
      "HTMLFormControlsCollection": false,
      "HTMLFormElement": false,
      "HTMLFrameElement": false,
      "HTMLFrameSetElement": false,
      "HTMLHRElement": false,
      "HTMLHeadElement": false,
      "HTMLHeadingElement": false,
      "HTMLHtmlElement": false,
      "HTMLIFrameElement": false,
      "HTMLImageElement": false,
      "HTMLInputElement": false,
      "HTMLLIElement": false,
      "HTMLLabelElement": false,
      "HTMLLegendElement": false,
      "HTMLLinkElement": false,
      "HTMLMapElement": false,
      "HTMLMarqueeElement": false,
      "HTMLMediaElement": false,
      "HTMLMenuElement": false,
      "HTMLMetaElement": false,
      "HTMLMeterElement": false,
      "HTMLModElement": false,
      "HTMLOListElement": false,
      "HTMLObjectElement": false,
      "HTMLOptGroupElement": false,
      "HTMLOptionElement": false,
      "HTMLOptionsCollection": false,
      "HTMLOutputElement": false,
      "HTMLParagraphElement": false,
      "HTMLParamElement": false,
      "HTMLPictureElement": false,
      "HTMLPreElement": false,
      "HTMLProgressElement": false,
      "HTMLQuoteElement": false,
      "HTMLScriptElement": false,
      "HTMLSelectElement": false,
      "HTMLSelectedContentElement": false,
      "HTMLSlotElement": false,
      "HTMLSourceElement": false,
      "HTMLSpanElement": false,
      "HTMLStyleElement": false,
      "HTMLTableCaptionElement": false,
      "HTMLTableCellElement": false,
      "HTMLTableColElement": false,
      "HTMLTableElement": false,
      "HTMLTableRowElement": false,
      "HTMLTableSectionElement": false,
      "HTMLTemplateElement": false,
      "HTMLTextAreaElement": false,
      "HTMLTimeElement": false,
      "HTMLTitleElement": false,
      "HTMLTrackElement": false,
      "HTMLUListElement": false,
      "HTMLUnknownElement": false,
      "HTMLVideoElement": false,
      "HashChangeEvent": false,
      "Headers": false,
      "Highlight": false,
      "HighlightRegistry": false,
      "History": false,
      "IDBCursor": false,
      "IDBCursorWithValue": false,
      "IDBDatabase": false,
      "IDBFactory": false,
      "IDBIndex": false,
      "IDBKeyRange": false,
      "IDBObjectStore": false,
      "IDBOpenDBRequest": false,
      "IDBRequest": false,
      "IDBTransaction": false,
      "IDBVersionChangeEvent": false,
      "IIRFilterNode": false,
      "IdentityCredential": false,
      "IdentityCredentialError": false,
      "IdentityProvider": false,
      "IdleDeadline": false,
      "IdleDetector": false,
      "Image": false,
      "ImageBitmap": false,
      "ImageBitmapRenderingContext": false,
      "ImageCapture": false,
      "ImageData": false,
      "ImageDecoder": false,
      "ImageTrack": false,
      "ImageTrackList": false,
      "Ink": false,
      "InputDeviceCapabilities": false,
      "InputDeviceInfo": false,
      "InputEvent": false,
      "IntegrityViolationReportBody": false,
      "IntersectionObserver": false,
      "IntersectionObserverEntry": false,
      "Keyboard": false,
      "KeyboardEvent": false,
      "KeyboardLayoutMap": false,
      "KeyframeEffect": false,
      "LanguageDetector": false,
      "LargestContentfulPaint": false,
      "LaunchParams": false,
      "LaunchQueue": false,
      "LayoutShift": false,
      "LayoutShiftAttribution": false,
      "LinearAccelerationSensor": false,
      "Location": false,
      "Lock": false,
      "LockManager": false,
      "MIDIAccess": false,
      "MIDIConnectionEvent": false,
      "MIDIInput": false,
      "MIDIInputMap": false,
      "MIDIMessageEvent": false,
      "MIDIOutput": false,
      "MIDIOutputMap": false,
      "MIDIPort": false,
      "MathMLElement": false,
      "MediaCapabilities": false,
      "MediaCapabilitiesInfo": false,
      "MediaDeviceInfo": false,
      "MediaDevices": false,
      "MediaElementAudioSourceNode": false,
      "MediaEncryptedEvent": false,
      "MediaError": false,
      "MediaKeyError": false,
      "MediaKeyMessageEvent": false,
      "MediaKeySession": false,
      "MediaKeyStatusMap": false,
      "MediaKeySystemAccess": false,
      "MediaKeys": false,
      "MediaList": false,
      "MediaMetadata": false,
      "MediaQueryList": false,
      "MediaQueryListEvent": false,
      "MediaRecorder": false,
      "MediaRecorderErrorEvent": false,
      "MediaSession": false,
      "MediaSource": false,
      "MediaSourceHandle": false,
      "MediaStream": false,
      "MediaStreamAudioDestinationNode": false,
      "MediaStreamAudioSourceNode": false,
      "MediaStreamEvent": false,
      "MediaStreamTrack": false,
      "MediaStreamTrackAudioSourceNode": false,
      "MediaStreamTrackAudioStats": false,
      "MediaStreamTrackEvent": false,
      "MediaStreamTrackGenerator": false,
      "MediaStreamTrackProcessor": false,
      "MediaStreamTrackVideoStats": false,
      "MessageChannel": false,
      "MessageEvent": false,
      "MessagePort": false,
      "MimeType": false,
      "MimeTypeArray": false,
      "ModelGenericSession": false,
      "ModelManager": false,
      "MouseEvent": false,
      "MutationEvent": false,
      "MutationObserver": false,
      "MutationRecord": false,
      "NamedNodeMap": false,
      "NavigateEvent": false,
      "Navigation": false,
      "NavigationActivation": false,
      "NavigationCurrentEntryChangeEvent": false,
      "NavigationDestination": false,
      "NavigationHistoryEntry": false,
      "NavigationPreloadManager": false,
      "NavigationTransition": false,
      "Navigator": false,
      "NavigatorLogin": false,
      "NavigatorManagedData": false,
      "NavigatorUAData": false,
      "NetworkInformation": false,
      "Node": false,
      "NodeFilter": false,
      "NodeIterator": false,
      "NodeList": false,
      "NotRestoredReasonDetails": false,
      "NotRestoredReasons": false,
      "Notification": false,
      "NotifyPaintEvent": false,
      "OTPCredential": false,
      "Observable": false,
      "OfflineAudioCompletionEvent": false,
      "OfflineAudioContext": false,
      "OffscreenCanvas": false,
      "OffscreenCanvasRenderingContext2D": false,
      "Option": false,
      "OrientationSensor": false,
      "OscillatorNode": false,
      "OverconstrainedError": false,
      "PERSISTENT": false,
      "PageRevealEvent": false,
      "PageSwapEvent": false,
      "PageTransitionEvent": false,
      "PannerNode": false,
      "PasswordCredential": false,
      "Path2D": false,
      "PaymentAddress": false,
      "PaymentManager": false,
      "PaymentMethodChangeEvent": false,
      "PaymentRequest": false,
      "PaymentRequestUpdateEvent": false,
      "PaymentResponse": false,
      "Performance": false,
      "PerformanceElementTiming": false,
      "PerformanceEntry": false,
      "PerformanceEventTiming": false,
      "PerformanceLongAnimationFrameTiming": false,
      "PerformanceLongTaskTiming": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceNavigation": false,
      "PerformanceNavigationTiming": false,
      "PerformanceObserver": false,
      "PerformanceObserverEntryList": false,
      "PerformancePaintTiming": false,
      "PerformanceResourceTiming": false,
      "PerformanceScriptTiming": false,
      "PerformanceServerTiming": false,
      "PerformanceTiming": false,
      "PeriodicSyncManager": false,
      "PeriodicWave": false,
      "PermissionStatus": false,
      "Permissions": false,
      "PictureInPictureEvent": false,
      "PictureInPictureWindow": false,
      "Plugin": false,
      "PluginArray": false,
      "PointerEvent": false,
      "PopStateEvent": false,
      "Presentation": false,
      "PresentationAvailability": false,
      "PresentationConnection": false,
      "PresentationConnectionAvailableEvent": false,
      "PresentationConnectionCloseEvent": false,
      "PresentationConnectionList": false,
      "PresentationReceiver": false,
      "PresentationRequest": false,
      "PressureObserver": false,
      "PressureRecord": false,
      "ProcessingInstruction": false,
      "Profiler": false,
      "ProgressEvent": false,
      "PromiseRejectionEvent": false,
      "ProtectedAudience": false,
      "PublicKeyCredential": false,
      "PushManager": false,
      "PushSubscription": false,
      "PushSubscriptionOptions": false,
      "QuotaExceededError": false,
      "RTCCertificate": false,
      "RTCDTMFSender": false,
      "RTCDTMFToneChangeEvent": false,
      "RTCDataChannel": false,
      "RTCDataChannelEvent": false,
      "RTCDtlsTransport": false,
      "RTCEncodedAudioFrame": false,
      "RTCEncodedVideoFrame": false,
      "RTCError": false,
      "RTCErrorEvent": false,
      "RTCIceCandidate": false,
      "RTCIceTransport": false,
      "RTCPeerConnection": false,
      "RTCPeerConnectionIceErrorEvent": false,
      "RTCPeerConnectionIceEvent": false,
      "RTCRtpReceiver": false,
      "RTCRtpScriptTransform": false,
      "RTCRtpSender": false,
      "RTCRtpTransceiver": false,
      "RTCSctpTransport": false,
      "RTCSessionDescription": false,
      "RTCStatsReport": false,
      "RTCTrackEvent": false,
      "RadioNodeList": false,
      "Range": false,
      "ReadableByteStreamController": false,
      "ReadableStream": false,
      "ReadableStreamBYOBReader": false,
      "ReadableStreamBYOBRequest": false,
      "ReadableStreamDefaultController": false,
      "ReadableStreamDefaultReader": false,
      "RelativeOrientationSensor": false,
      "RemotePlayback": false,
      "ReportBody": false,
      "ReportingObserver": false,
      "Request": false,
      "ResizeObserver": false,
      "ResizeObserverEntry": false,
      "ResizeObserverSize": false,
      "Response": false,
      "RestrictionTarget": false,
      "SVGAElement": false,
      "SVGAngle": false,
      "SVGAnimateElement": false,
      "SVGAnimateMotionElement": false,
      "SVGAnimateTransformElement": false,
      "SVGAnimatedAngle": false,
      "SVGAnimatedBoolean": false,
      "SVGAnimatedEnumeration": false,
      "SVGAnimatedInteger": false,
      "SVGAnimatedLength": false,
      "SVGAnimatedLengthList": false,
      "SVGAnimatedNumber": false,
      "SVGAnimatedNumberList": false,
      "SVGAnimatedPreserveAspectRatio": false,
      "SVGAnimatedRect": false,
      "SVGAnimatedString": false,
      "SVGAnimatedTransformList": false,
      "SVGAnimationElement": false,
      "SVGCircleElement": false,
      "SVGClipPathElement": false,
      "SVGComponentTransferFunctionElement": false,
      "SVGDefsElement": false,
      "SVGDescElement": false,
      "SVGElement": false,
      "SVGEllipseElement": false,
      "SVGFEBlendElement": false,
      "SVGFEColorMatrixElement": false,
      "SVGFEComponentTransferElement": false,
      "SVGFECompositeElement": false,
      "SVGFEConvolveMatrixElement": false,
      "SVGFEDiffuseLightingElement": false,
      "SVGFEDisplacementMapElement": false,
      "SVGFEDistantLightElement": false,
      "SVGFEDropShadowElement": false,
      "SVGFEFloodElement": false,
      "SVGFEFuncAElement": false,
      "SVGFEFuncBElement": false,
      "SVGFEFuncGElement": false,
      "SVGFEFuncRElement": false,
      "SVGFEGaussianBlurElement": false,
      "SVGFEImageElement": false,
      "SVGFEMergeElement": false,
      "SVGFEMergeNodeElement": false,
      "SVGFEMorphologyElement": false,
      "SVGFEOffsetElement": false,
      "SVGFEPointLightElement": false,
      "SVGFESpecularLightingElement": false,
      "SVGFESpotLightElement": false,
      "SVGFETileElement": false,
      "SVGFETurbulenceElement": false,
      "SVGFilterElement": false,
      "SVGForeignObjectElement": false,
      "SVGGElement": false,
      "SVGGeometryElement": false,
      "SVGGradientElement": false,
      "SVGGraphicsElement": false,
      "SVGImageElement": false,
      "SVGLength": false,
      "SVGLengthList": false,
      "SVGLineElement": false,
      "SVGLinearGradientElement": false,
      "SVGMPathElement": false,
      "SVGMarkerElement": false,
      "SVGMaskElement": false,
      "SVGMatrix": false,
      "SVGMetadataElement": false,
      "SVGNumber": false,
      "SVGNumberList": false,
      "SVGPathElement": false,
      "SVGPatternElement": false,
      "SVGPoint": false,
      "SVGPointList": false,
      "SVGPolygonElement": false,
      "SVGPolylineElement": false,
      "SVGPreserveAspectRatio": false,
      "SVGRadialGradientElement": false,
      "SVGRect": false,
      "SVGRectElement": false,
      "SVGSVGElement": false,
      "SVGScriptElement": false,
      "SVGSetElement": false,
      "SVGStopElement": false,
      "SVGStringList": false,
      "SVGStyleElement": false,
      "SVGSwitchElement": false,
      "SVGSymbolElement": false,
      "SVGTSpanElement": false,
      "SVGTextContentElement": false,
      "SVGTextElement": false,
      "SVGTextPathElement": false,
      "SVGTextPositioningElement": false,
      "SVGTitleElement": false,
      "SVGTransform": false,
      "SVGTransformList": false,
      "SVGUnitTypes": false,
      "SVGUseElement": false,
      "SVGViewElement": false,
      "Scheduler": false,
      "Scheduling": false,
      "Screen": false,
      "ScreenDetailed": false,
      "ScreenDetails": false,
      "ScreenOrientation": false,
      "ScriptProcessorNode": false,
      "ScrollTimeline": false,
      "SecurityPolicyViolationEvent": false,
      "Selection": false,
      "Sensor": false,
      "SensorErrorEvent": false,
      "Serial": false,
      "SerialPort": false,
      "ServiceWorker": false,
      "ServiceWorkerContainer": false,
      "ServiceWorkerRegistration": false,
      "ShadowRoot": false,
      "SharedStorage": false,
      "SharedStorageAppendMethod": false,
      "SharedStorageClearMethod": false,
      "SharedStorageDeleteMethod": false,
      "SharedStorageModifierMethod": false,
      "SharedStorageSetMethod": false,
      "SharedStorageWorklet": false,
      "SharedWorker": false,
      "SnapEvent": false,
      "SourceBuffer": false,
      "SourceBufferList": false,
      "SpeechGrammar": false,
      "SpeechGrammarList": false,
      "SpeechRecognition": false,
      "SpeechRecognitionErrorEvent": false,
      "SpeechRecognitionEvent": false,
      "SpeechSynthesis": false,
      "SpeechSynthesisErrorEvent": false,
      "SpeechSynthesisEvent": false,
      "SpeechSynthesisUtterance": false,
      "SpeechSynthesisVoice": false,
      "StaticRange": false,
      "StereoPannerNode": false,
      "Storage": false,
      "StorageBucket": false,
      "StorageBucketManager": false,
      "StorageEvent": false,
      "StorageManager": false,
      "StylePropertyMap": false,
      "StylePropertyMapReadOnly": false,
      "StyleSheet": false,
      "StyleSheetList": false,
      "SubmitEvent": false,
      "Subscriber": false,
      "SubtleCrypto": false,
      "Summarizer": false,
      "SuppressedError": false,
      "SyncManager": false,
      "TEMPORARY": false,
      "TaskAttributionTiming": false,
      "TaskController": false,
      "TaskPriorityChangeEvent": false,
      "TaskSignal": false,
      "Text": false,
      "TextDecoder": false,
      "TextDecoderStream": false,
      "TextEncoder": false,
      "TextEncoderStream": false,
      "TextEvent": false,
      "TextFormat": false,
      "TextFormatUpdateEvent": false,
      "TextMetrics": false,
      "TextTrack": false,
      "TextTrackCue": false,
      "TextTrackCueList": false,
      "TextTrackList": false,
      "TextUpdateEvent": false,
      "TimeEvent": false,
      "TimeRanges": false,
      "ToggleEvent": false,
      "Touch": false,
      "TouchEvent": false,
      "TouchList": false,
      "TrackEvent": false,
      "TransformStream": false,
      "TransformStreamDefaultController": false,
      "TransitionEvent": false,
      "Translator": false,
      "TreeWalker": false,
      "TrustedHTML": false,
      "TrustedScript": false,
      "TrustedScriptURL": false,
      "TrustedTypePolicy": false,
      "TrustedTypePolicyFactory": false,
      "UIEvent": false,
      "URL": false,
      "URLPattern": false,
      "URLSearchParams": false,
      "USB": false,
      "USBAlternateInterface": false,
      "USBConfiguration": false,
      "USBConnectionEvent": false,
      "USBDevice": false,
      "USBEndpoint": false,
      "USBInTransferResult": false,
      "USBInterface": false,
      "USBIsochronousInTransferPacket": false,
      "USBIsochronousInTransferResult": false,
      "USBIsochronousOutTransferPacket": false,
      "USBIsochronousOutTransferResult": false,
      "USBOutTransferResult": false,
      "UserActivation": false,
      "VTTCue": false,
      "VTTRegion": false,
      "ValidityState": false,
      "VideoColorSpace": false,
      "VideoDecoder": false,
      "VideoEncoder": false,
      "VideoFrame": false,
      "VideoPlaybackQuality": false,
      "ViewTimeline": false,
      "ViewTransition": false,
      "ViewTransitionTypeSet": false,
      "Viewport": false,
      "VirtualKeyboard": false,
      "VirtualKeyboardGeometryChangeEvent": false,
      "VisibilityStateEntry": false,
      "VisualViewport": false,
      "WGSLLanguageFeatures": false,
      "WakeLock": false,
      "WakeLockSentinel": false,
      "WaveShaperNode": false,
      "WebAssembly": false,
      "WebGL2RenderingContext": false,
      "WebGLActiveInfo": false,
      "WebGLBuffer": false,
      "WebGLContextEvent": false,
      "WebGLFramebuffer": false,
      "WebGLObject": false,
      "WebGLProgram": false,
      "WebGLQuery": false,
      "WebGLRenderbuffer": false,
      "WebGLRenderingContext": false,
      "WebGLSampler": false,
      "WebGLShader": false,
      "WebGLShaderPrecisionFormat": false,
      "WebGLSync": false,
      "WebGLTexture": false,
      "WebGLTransformFeedback": false,
      "WebGLUniformLocation": false,
      "WebGLVertexArrayObject": false,
      "WebSocket": false,
      "WebSocketError": false,
      "WebSocketStream": false,
      "WebTransport": false,
      "WebTransportBidirectionalStream": false,
      "WebTransportDatagramDuplexStream": false,
      "WebTransportError": false,
      "WebTransportReceiveStream": false,
      "WebTransportSendStream": false,
      "WheelEvent": false,
      "Window": false,
      "WindowControlsOverlay": false,
      "WindowControlsOverlayGeometryChangeEvent": false,
      "Worker": false,
      "Worklet": false,
      "WorkletGlobalScope": false,
      "WritableStream": false,
      "WritableStreamDefaultController": false,
      "WritableStreamDefaultWriter": false,
      "XMLDocument": false,
      "XMLHttpRequest": false,
      "XMLHttpRequestEventTarget": false,
      "XMLHttpRequestUpload": false,
      "XMLSerializer": false,
      "XPathEvaluator": false,
      "XPathExpression": false,
      "XPathResult": false,
      "XRAnchor": false,
      "XRAnchorSet": false,
      "XRBoundedReferenceSpace": false,
      "XRCPUDepthInformation": false,
      "XRCamera": false,
      "XRDOMOverlayState": false,
      "XRDepthInformation": false,
      "XRFrame": false,
      "XRHand": false,
      "XRHitTestResult": false,
      "XRHitTestSource": false,
      "XRInputSource": false,
      "XRInputSourceArray": false,
      "XRInputSourceEvent": false,
      "XRInputSourcesChangeEvent": false,
      "XRJointPose": false,
      "XRJointSpace": false,
      "XRLayer": false,
      "XRLightEstimate": false,
      "XRLightProbe": false,
      "XRPose": false,
      "XRRay": false,
      "XRReferenceSpace": false,
      "XRReferenceSpaceEvent": false,
      "XRRenderState": false,
      "XRRigidTransform": false,
      "XRSession": false,
      "XRSessionEvent": false,
      "XRSpace": false,
      "XRSystem": false,
      "XRTransientInputHitTestResult": false,
      "XRTransientInputHitTestSource": false,
      "XRView": false,
      "XRViewerPose": false,
      "XRViewport": false,
      "XRWebGLBinding": false,
      "XRWebGLDepthInformation": false,
      "XRWebGLLayer": false,
      "XSLTProcessor": false,
      "addEventListener": false,
      "ai": false,
      "alert": false,
      "atob": false,
      "blur": false,
      "btoa": false,
      "caches": false,
      "cancelAnimationFrame": false,
      "cancelIdleCallback": false,
      "clearInterval": false,
      "clearTimeout": false,
      "clientInformation": false,
      "close": false,
      "closed": false,
      "confirm": false,
      "console": false,
      "cookieStore": false,
      "createImageBitmap": false,
      "credentialless": false,
      "crossOriginIsolated": false,
      "crypto": false,
      "currentFrame": false,
      "currentTime": false,
      "customElements": false,
      "devicePixelRatio": false,
      "dispatchEvent": false,
      "document": false,
      "documentPictureInPicture": false,
      "event": false,
      "external": false,
      "fence": false,
      "fetch": false,
      "fetchLater": false,
      "find": false,
      "focus": false,
      "frameElement": false,
      "frames": false,
      "getComputedStyle": false,
      "getScreenDetails": false,
      "getSelection": false,
      "history": false,
      "indexedDB": false,
      "innerHeight": false,
      "innerWidth": false,
      "isSecureContext": false,
      "launchQueue": false,
      "length": false,
      "localStorage": false,
      "location": true,
      "locationbar": false,
      "matchMedia": false,
      "menubar": false,
      "model": false,
      "moveBy": false,
      "moveTo": false,
      "name": false,
      "navigation": false,
      "navigator": false,
      "offscreenBuffering": false,
      "onabort": true,
      "onafterprint": true,
      "onanimationcancel": true,
      "onanimationend": true,
      "onanimationiteration": true,
      "onanimationstart": true,
      "onappinstalled": true,
      "onauxclick": true,
      "onbeforeinput": true,
      "onbeforeinstallprompt": true,
      "onbeforematch": true,
      "onbeforeprint": true,
      "onbeforetoggle": true,
      "onbeforeunload": true,
      "onbeforexrselect": true,
      "onblur": true,
      "oncancel": true,
      "oncanplay": true,
      "oncanplaythrough": true,
      "onchange": true,
      "onclick": true,
      "onclose": true,
      "oncommand": true,
      "oncontentvisibilityautostatechange": true,
      "oncontextlost": true,
      "oncontextmenu": true,
      "oncontextrestored": true,
      "oncopy": true,
      "oncuechange": true,
      "oncut": true,
      "ondblclick": true,
      "ondevicemotion": true,
      "ondeviceorientation": true,
      "ondeviceorientationabsolute": true,
      "ondrag": true,
      "ondragend": true,
      "ondragenter": true,
      "ondragleave": true,
      "ondragover": true,
      "ondragstart": true,
      "ondrop": true,
      "ondurationchange": true,
      "onemptied": true,
      "onended": true,
      "onerror": true,
      "onfocus": true,
      "onformdata": true,
      "ongamepadconnected": true,
      "ongamepaddisconnected": true,
      "ongotpointercapture": true,
      "onhashchange": true,
      "oninput": true,
      "oninvalid": true,
      "onkeydown": true,
      "onkeypress": true,
      "onkeyup": true,
      "onlanguagechange": true,
      "onload": true,
      "onloadeddata": true,
      "onloadedmetadata": true,
      "onloadstart": true,
      "onlostpointercapture": true,
      "onmessage": true,
      "onmessageerror": true,
      "onmousedown": true,
      "onmouseenter": true,
      "onmouseleave": true,
      "onmousemove": true,
      "onmouseout": true,
      "onmouseover": true,
      "onmouseup": true,
      "onmousewheel": true,
      "onoffline": true,
      "ononline": true,
      "onpagehide": true,
      "onpagereveal": true,
      "onpageshow": true,
      "onpageswap": true,
      "onpaste": true,
      "onpause": true,
      "onplay": true,
      "onplaying": true,
      "onpointercancel": true,
      "onpointerdown": true,
      "onpointerenter": true,
      "onpointerleave": true,
      "onpointermove": true,
      "onpointerout": true,
      "onpointerover": true,
      "onpointerrawupdate": true,
      "onpointerup": true,
      "onpopstate": true,
      "onprogress": true,
      "onratechange": true,
      "onrejectionhandled": true,
      "onreset": true,
      "onresize": true,
      "onscroll": true,
      "onscrollend": true,
      "onscrollsnapchange": true,
      "onscrollsnapchanging": true,
      "onsearch": true,
      "onsecuritypolicyviolation": true,
      "onseeked": true,
      "onseeking": true,
      "onselect": true,
      "onselectionchange": true,
      "onselectstart": true,
      "onslotchange": true,
      "onstalled": true,
      "onstorage": true,
      "onsubmit": true,
      "onsuspend": true,
      "ontimeupdate": true,
      "ontoggle": true,
      "ontransitioncancel": true,
      "ontransitionend": true,
      "ontransitionrun": true,
      "ontransitionstart": true,
      "onunhandledrejection": true,
      "onunload": true,
      "onvolumechange": true,
      "onwaiting": true,
      "onwheel": true,
      "open": false,
      "opener": false,
      "origin": false,
      "originAgentCluster": false,
      "outerHeight": false,
      "outerWidth": false,
      "pageXOffset": false,
      "pageYOffset": false,
      "parent": false,
      "performance": false,
      "personalbar": false,
      "postMessage": false,
      "print": false,
      "prompt": false,
      "queryLocalFonts": false,
      "queueMicrotask": false,
      "registerProcessor": false,
      "removeEventListener": false,
      "reportError": false,
      "requestAnimationFrame": false,
      "requestIdleCallback": false,
      "resizeBy": false,
      "resizeTo": false,
      "sampleRate": false,
      "scheduler": false,
      "screen": false,
      "screenLeft": false,
      "screenTop": false,
      "screenX": false,
      "screenY": false,
      "scroll": false,
      "scrollBy": false,
      "scrollTo": false,
      "scrollX": false,
      "scrollY": false,
      "scrollbars": false,
      "self": false,
      "sessionStorage": false,
      "setInterval": false,
      "setTimeout": false,
      "sharedStorage": false,
      "showDirectoryPicker": false,
      "showOpenFilePicker": false,
      "showSaveFilePicker": false,
      "speechSynthesis": false,
      "status": false,
      "statusbar": false,
      "stop": false,
      "structuredClone": false,
      "styleMedia": false,
      "toolbar": false,
      "top": false,
      "trustedTypes": false,
      "viewport": false,
      "visualViewport": false,
      "when": false,
      "window": false,
    },
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true,
      },
      "jsxPragma": null,
    },
  },
  "name": "foundry/react",
  "rules": {
    "react/button-has-type": "off",
    "react/display-name": "off",
    "react/forbid-elements": "off",
    "react/jsx-boolean-value": "off",
    "react/jsx-child-element-spacing": "off",
    "react/jsx-closing-bracket-location": "off",
    "react/jsx-closing-tag-location": "off",
    "react/jsx-curly-brace-presence": "off",
    "react/jsx-curly-newline": "off",
    "react/jsx-curly-spacing": "off",
    "react/jsx-equals-spacing": "off",
    "react/jsx-first-prop-new-line": "off",
    "react/jsx-fragments": "off",
    "react/jsx-indent": "off",
    "react/jsx-indent-props": "off",
    "react/jsx-key": "off",
    "react/jsx-max-props-per-line": "off",
    "react/jsx-newline": "off",
    "react/jsx-no-comment-textnodes": "off",
    "react/jsx-no-duplicate-props": "off",
    "react/jsx-no-target-blank": "off",
    "react/jsx-no-useless-fragment": "off",
    "react/jsx-one-expression-per-line": "off",
    "react/jsx-props-no-multi-spaces": "off",
    "react/jsx-space-before-closing": "off",
    "react/jsx-tag-spacing": "off",
    "react/jsx-wrap-multilines": "off",
    "react/no-array-index-key": "off",
    "react/no-children-prop": "off",
    "react/no-danger": "off",
    "react/no-danger-with-children": "off",
    "react/prop-types": "off",
    "react/void-dom-elements-no-children": "off",
  },
  "settings": {
    "react": {
      "version": "detect",
    },
  },
}
`;

exports[`eslint > configs > should match the snapshot for the storybook preset 1`] = `
{
  "files": [
    "**/.storybook/**/*",
    "**/*.{story,stories}.*",
  ],
  "name": "foundry/storybook",
  "rules": {
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "import-x/no-anonymous-default-export": "off",
    "import-x/no-extraneous-dependencies": "off",
    "import-x/no-relative-packages": "off",
  },
}
`;

exports[`eslint > configs > should match the snapshot for the tests preset 1`] = `
{
  "files": [
    "**/test/**",
    "**/tests/**",
    "**/spec/**",
    "**/__tests__/**",
    "**/__mocks__/**",
    "**/__fixtures__/**/*",
    "**/*Fixtures.*",
    "**/test.*",
    "**/test-*.*",
    "**/*{.,_}{test,spec}.*",
    "**/jest.*",
    "**/vite.*",
    "**/vitest.*",
    "**/setupTests.*",
    "**/test-utils.*",
  ],
  "languageOptions": {
    "globals": {
      "AbortController": false,
      "AbortSignal": false,
      "AsyncDisposableStack": false,
      "Blob": false,
      "BroadcastChannel": false,
      "Buffer": false,
      "ByteLengthQueuingStrategy": false,
      "CloseEvent": false,
      "CompressionStream": false,
      "CountQueuingStrategy": false,
      "Crypto": false,
      "CryptoKey": false,
      "CustomEvent": false,
      "DOMException": false,
      "DecompressionStream": false,
      "DisposableStack": false,
      "Event": false,
      "EventTarget": false,
      "File": false,
      "FormData": false,
      "Headers": false,
      "MessageChannel": false,
      "MessageEvent": false,
      "MessagePort": false,
      "Navigator": false,
      "Performance": false,
      "PerformanceEntry": false,
      "PerformanceMark": false,
      "PerformanceMeasure": false,
      "PerformanceObserver": false,
      "PerformanceObserverEntryList": false,
      "PerformanceResourceTiming": false,
      "ReadableByteStreamController": false,
      "ReadableStream": false,
      "ReadableStreamBYOBReader": false,
      "ReadableStreamBYOBRequest": false,
      "ReadableStreamDefaultController": false,
      "ReadableStreamDefaultReader": false,
      "Request": false,
      "Response": false,
      "SubtleCrypto": false,
      "SuppressedError": false,
      "TextDecoder": false,
      "TextDecoderStream": false,
      "TextEncoder": false,
      "TextEncoderStream": false,
      "TransformStream": false,
      "TransformStreamDefaultController": false,
      "URL": false,
      "URLPattern": false,
      "URLSearchParams": false,
      "WebAssembly": false,
      "WebSocket": false,
      "WritableStream": false,
      "WritableStreamDefaultController": false,
      "WritableStreamDefaultWriter": false,
      "__dirname": false,
      "__filename": false,
      "atob": false,
      "btoa": false,
      "clearImmediate": false,
      "clearInterval": false,
      "clearTimeout": false,
      "console": false,
      "crypto": false,
      "exports": true,
      "fetch": false,
      "global": false,
      "module": false,
      "navigator": false,
      "performance": false,
      "process": false,
      "queueMicrotask": false,
      "require": false,
      "setImmediate": false,
      "setInterval": false,
      "setTimeout": false,
      "structuredClone": false,
    },
  },
  "name": "foundry/tests",
  "rules": {
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/unbound-method": "off",
    "compat/compat": "off",
    "import-x/no-extraneous-dependencies": "off",
    "jest/max-nested-describe": "off",
    "jest/no-disabled-tests": "off",
    "jest/no-done-callback": "off",
    "jest/no-duplicate-hooks": "off",
    "jest/no-export": "off",
    "jest/no-focused-tests": "off",
    "jest/no-standalone-expect": "off",
  },
}
`;

exports[`eslint > configs > should match the snapshot for the typescript preset 1`] = `
{
  "files": [
    "**/*.{js,jsx,cjs,mjs}",
    "**/*.{ts,tsx,cts,mts}",
  ],
  "languageOptions": {
    "parser": {
      "meta": {
        "name": "typescript-eslint/parser",
        "version": "8.44.1",
      },
      "parseForESLint": [Function],
    },
    "parserOptions": {
      "ecmaFeatures": {
        "impliedStrict": true,
      },
    },
    "sourceType": "module",
  },
  "name": "foundry/typescript",
  "plugins": {
    "@typescript-eslint": {
      "configs": {
        "all": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/adjacent-overload-signatures": "error",
            "@typescript-eslint/array-type": "error",
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/ban-ts-comment": "error",
            "@typescript-eslint/ban-tslint-comment": "error",
            "@typescript-eslint/class-literal-property-style": "error",
            "@typescript-eslint/class-methods-use-this": "error",
            "@typescript-eslint/consistent-generic-constructors": "error",
            "@typescript-eslint/consistent-indexed-object-style": "error",
            "@typescript-eslint/consistent-return": "error",
            "@typescript-eslint/consistent-type-assertions": "error",
            "@typescript-eslint/consistent-type-definitions": "error",
            "@typescript-eslint/consistent-type-exports": "error",
            "@typescript-eslint/consistent-type-imports": "error",
            "@typescript-eslint/default-param-last": "error",
            "@typescript-eslint/dot-notation": "error",
            "@typescript-eslint/explicit-function-return-type": "error",
            "@typescript-eslint/explicit-member-accessibility": "error",
            "@typescript-eslint/explicit-module-boundary-types": "error",
            "@typescript-eslint/init-declarations": "error",
            "@typescript-eslint/max-params": "error",
            "@typescript-eslint/member-ordering": "error",
            "@typescript-eslint/method-signature-style": "error",
            "@typescript-eslint/naming-convention": "error",
            "@typescript-eslint/no-array-constructor": "error",
            "@typescript-eslint/no-array-delete": "error",
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-confusing-non-null-assertion": "error",
            "@typescript-eslint/no-confusing-void-expression": "error",
            "@typescript-eslint/no-deprecated": "error",
            "@typescript-eslint/no-dupe-class-members": "error",
            "@typescript-eslint/no-duplicate-enum-values": "error",
            "@typescript-eslint/no-duplicate-type-constituents": "error",
            "@typescript-eslint/no-dynamic-delete": "error",
            "@typescript-eslint/no-empty-function": "error",
            "@typescript-eslint/no-empty-object-type": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-extraneous-class": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implied-eval": "error",
            "@typescript-eslint/no-import-type-side-effects": "error",
            "@typescript-eslint/no-inferrable-types": "error",
            "@typescript-eslint/no-invalid-this": "error",
            "@typescript-eslint/no-invalid-void-type": "error",
            "@typescript-eslint/no-loop-func": "error",
            "@typescript-eslint/no-magic-numbers": "error",
            "@typescript-eslint/no-meaningless-void-operator": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-misused-spread": "error",
            "@typescript-eslint/no-mixed-enums": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-non-null-assertion": "error",
            "@typescript-eslint/no-redeclare": "error",
            "@typescript-eslint/no-redundant-type-constituents": "error",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-restricted-imports": "error",
            "@typescript-eslint/no-restricted-types": "error",
            "@typescript-eslint/no-shadow": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
            "@typescript-eslint/no-unnecessary-condition": "error",
            "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
            "@typescript-eslint/no-unnecessary-qualifier": "error",
            "@typescript-eslint/no-unnecessary-template-expression": "error",
            "@typescript-eslint/no-unnecessary-type-arguments": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unnecessary-type-conversion": "error",
            "@typescript-eslint/no-unnecessary-type-parameters": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-declaration-merging": "error",
            "@typescript-eslint/no-unsafe-enum-comparison": "error",
            "@typescript-eslint/no-unsafe-function-type": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-unsafe-type-assertion": "error",
            "@typescript-eslint/no-unsafe-unary-minus": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/no-use-before-define": "error",
            "@typescript-eslint/no-useless-constructor": "error",
            "@typescript-eslint/no-useless-empty-export": "error",
            "@typescript-eslint/no-wrapper-object-types": "error",
            "@typescript-eslint/non-nullable-type-assertion-style": "error",
            "@typescript-eslint/only-throw-error": "error",
            "@typescript-eslint/parameter-properties": "error",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-destructuring": "error",
            "@typescript-eslint/prefer-enum-initializers": "error",
            "@typescript-eslint/prefer-find": "error",
            "@typescript-eslint/prefer-for-of": "error",
            "@typescript-eslint/prefer-function-type": "error",
            "@typescript-eslint/prefer-includes": "error",
            "@typescript-eslint/prefer-literal-enum-member": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/prefer-nullish-coalescing": "error",
            "@typescript-eslint/prefer-optional-chain": "error",
            "@typescript-eslint/prefer-promise-reject-errors": "error",
            "@typescript-eslint/prefer-readonly": "error",
            "@typescript-eslint/prefer-readonly-parameter-types": "error",
            "@typescript-eslint/prefer-reduce-type-parameter": "error",
            "@typescript-eslint/prefer-regexp-exec": "error",
            "@typescript-eslint/prefer-return-this-type": "error",
            "@typescript-eslint/prefer-string-starts-ends-with": "error",
            "@typescript-eslint/promise-function-async": "error",
            "@typescript-eslint/related-getter-setter-pairs": "error",
            "@typescript-eslint/require-array-sort-compare": "error",
            "@typescript-eslint/require-await": "error",
            "@typescript-eslint/restrict-plus-operands": "error",
            "@typescript-eslint/restrict-template-expressions": "error",
            "@typescript-eslint/return-await": "error",
            "@typescript-eslint/strict-boolean-expressions": "error",
            "@typescript-eslint/switch-exhaustiveness-check": "error",
            "@typescript-eslint/triple-slash-reference": "error",
            "@typescript-eslint/unbound-method": "error",
            "@typescript-eslint/unified-signatures": "error",
            "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
            "class-methods-use-this": "off",
            "consistent-return": "off",
            "default-param-last": "off",
            "dot-notation": "off",
            "init-declarations": "off",
            "max-params": "off",
            "no-array-constructor": "off",
            "no-dupe-class-members": "off",
            "no-empty-function": "off",
            "no-implied-eval": "off",
            "no-invalid-this": "off",
            "no-loop-func": "off",
            "no-magic-numbers": "off",
            "no-redeclare": "off",
            "no-restricted-imports": "off",
            "no-return-await": "off",
            "no-shadow": "off",
            "no-throw-literal": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "no-use-before-define": "off",
            "no-useless-constructor": "off",
            "prefer-destructuring": "off",
            "prefer-promise-reject-errors": "off",
            "require-await": "off",
          },
        },
        "base": {
          "parser": "@typescript-eslint/parser",
          "parserOptions": {
            "sourceType": "module",
          },
          "plugins": [
            "@typescript-eslint",
          ],
        },
        "disable-type-checked": {
          "parserOptions": {
            "program": null,
            "project": false,
            "projectService": false,
          },
          "rules": {
            "@typescript-eslint/await-thenable": "off",
            "@typescript-eslint/consistent-return": "off",
            "@typescript-eslint/consistent-type-exports": "off",
            "@typescript-eslint/dot-notation": "off",
            "@typescript-eslint/naming-convention": "off",
            "@typescript-eslint/no-array-delete": "off",
            "@typescript-eslint/no-base-to-string": "off",
            "@typescript-eslint/no-confusing-void-expression": "off",
            "@typescript-eslint/no-deprecated": "off",
            "@typescript-eslint/no-duplicate-type-constituents": "off",
            "@typescript-eslint/no-floating-promises": "off",
            "@typescript-eslint/no-for-in-array": "off",
            "@typescript-eslint/no-implied-eval": "off",
            "@typescript-eslint/no-meaningless-void-operator": "off",
            "@typescript-eslint/no-misused-promises": "off",
            "@typescript-eslint/no-misused-spread": "off",
            "@typescript-eslint/no-mixed-enums": "off",
            "@typescript-eslint/no-redundant-type-constituents": "off",
            "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
            "@typescript-eslint/no-unnecessary-condition": "off",
            "@typescript-eslint/no-unnecessary-qualifier": "off",
            "@typescript-eslint/no-unnecessary-template-expression": "off",
            "@typescript-eslint/no-unnecessary-type-arguments": "off",
            "@typescript-eslint/no-unnecessary-type-assertion": "off",
            "@typescript-eslint/no-unnecessary-type-conversion": "off",
            "@typescript-eslint/no-unnecessary-type-parameters": "off",
            "@typescript-eslint/no-unsafe-argument": "off",
            "@typescript-eslint/no-unsafe-assignment": "off",
            "@typescript-eslint/no-unsafe-call": "off",
            "@typescript-eslint/no-unsafe-enum-comparison": "off",
            "@typescript-eslint/no-unsafe-member-access": "off",
            "@typescript-eslint/no-unsafe-return": "off",
            "@typescript-eslint/no-unsafe-type-assertion": "off",
            "@typescript-eslint/no-unsafe-unary-minus": "off",
            "@typescript-eslint/non-nullable-type-assertion-style": "off",
            "@typescript-eslint/only-throw-error": "off",
            "@typescript-eslint/prefer-destructuring": "off",
            "@typescript-eslint/prefer-find": "off",
            "@typescript-eslint/prefer-includes": "off",
            "@typescript-eslint/prefer-nullish-coalescing": "off",
            "@typescript-eslint/prefer-optional-chain": "off",
            "@typescript-eslint/prefer-promise-reject-errors": "off",
            "@typescript-eslint/prefer-readonly": "off",
            "@typescript-eslint/prefer-readonly-parameter-types": "off",
            "@typescript-eslint/prefer-reduce-type-parameter": "off",
            "@typescript-eslint/prefer-regexp-exec": "off",
            "@typescript-eslint/prefer-return-this-type": "off",
            "@typescript-eslint/prefer-string-starts-ends-with": "off",
            "@typescript-eslint/promise-function-async": "off",
            "@typescript-eslint/related-getter-setter-pairs": "off",
            "@typescript-eslint/require-array-sort-compare": "off",
            "@typescript-eslint/require-await": "off",
            "@typescript-eslint/restrict-plus-operands": "off",
            "@typescript-eslint/restrict-template-expressions": "off",
            "@typescript-eslint/return-await": "off",
            "@typescript-eslint/strict-boolean-expressions": "off",
            "@typescript-eslint/switch-exhaustiveness-check": "off",
            "@typescript-eslint/unbound-method": "off",
            "@typescript-eslint/use-unknown-in-catch-callback-variable": "off",
          },
        },
        "eslint-recommended": {
          "overrides": [
            {
              "files": [
                "*.ts",
                "*.tsx",
                "*.mts",
                "*.cts",
              ],
              "rules": {
                "constructor-super": "off",
                "getter-return": "off",
                "no-class-assign": "off",
                "no-const-assign": "off",
                "no-dupe-args": "off",
                "no-dupe-class-members": "off",
                "no-dupe-keys": "off",
                "no-func-assign": "off",
                "no-import-assign": "off",
                "no-new-native-nonconstructor": "off",
                "no-new-symbol": "off",
                "no-obj-calls": "off",
                "no-redeclare": "off",
                "no-setter-return": "off",
                "no-this-before-super": "off",
                "no-undef": "off",
                "no-unreachable": "off",
                "no-unsafe-negation": "off",
                "no-var": "error",
                "no-with": "off",
                "prefer-const": "error",
                "prefer-rest-params": "error",
                "prefer-spread": "error",
              },
            },
          ],
        },
        "flat/all": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/all",
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/class-methods-use-this": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-return": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/consistent-type-exports": "error",
              "@typescript-eslint/consistent-type-imports": "error",
              "@typescript-eslint/default-param-last": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/explicit-function-return-type": "error",
              "@typescript-eslint/explicit-member-accessibility": "error",
              "@typescript-eslint/explicit-module-boundary-types": "error",
              "@typescript-eslint/init-declarations": "error",
              "@typescript-eslint/max-params": "error",
              "@typescript-eslint/member-ordering": "error",
              "@typescript-eslint/method-signature-style": "error",
              "@typescript-eslint/naming-convention": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-dupe-class-members": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-import-type-side-effects": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/no-invalid-this": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-loop-func": "error",
              "@typescript-eslint/no-magic-numbers": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redeclare": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-restricted-imports": "error",
              "@typescript-eslint/no-restricted-types": "error",
              "@typescript-eslint/no-shadow": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
              "@typescript-eslint/no-unnecessary-qualifier": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-conversion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-type-assertion": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-use-before-define": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-useless-empty-export": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/parameter-properties": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-destructuring": "error",
              "@typescript-eslint/prefer-enum-initializers": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-readonly": "error",
              "@typescript-eslint/prefer-readonly-parameter-types": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "@typescript-eslint/promise-function-async": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-array-sort-compare": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/return-await": "error",
              "@typescript-eslint/strict-boolean-expressions": "error",
              "@typescript-eslint/switch-exhaustiveness-check": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "class-methods-use-this": "off",
              "consistent-return": "off",
              "default-param-last": "off",
              "dot-notation": "off",
              "init-declarations": "off",
              "max-params": "off",
              "no-array-constructor": "off",
              "no-dupe-class-members": "off",
              "no-empty-function": "off",
              "no-implied-eval": "off",
              "no-invalid-this": "off",
              "no-loop-func": "off",
              "no-magic-numbers": "off",
              "no-redeclare": "off",
              "no-restricted-imports": "off",
              "no-return-await": "off",
              "no-shadow": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-use-before-define": "off",
              "no-useless-constructor": "off",
              "prefer-destructuring": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
        ],
        "flat/base": {
          "languageOptions": {
            "parser": {
              "meta": {
                "name": "typescript-eslint/parser",
                "version": "8.44.1",
              },
              "parseForESLint": [Function],
            },
            "sourceType": "module",
          },
          "name": "typescript-eslint/base",
          "plugins": {
            "@typescript-eslint": [Circular],
          },
        },
        "flat/disable-type-checked": {
          "languageOptions": {
            "parserOptions": {
              "program": null,
              "project": false,
              "projectService": false,
            },
          },
          "name": "typescript-eslint/disable-type-checked",
          "rules": {
            "@typescript-eslint/await-thenable": "off",
            "@typescript-eslint/consistent-return": "off",
            "@typescript-eslint/consistent-type-exports": "off",
            "@typescript-eslint/dot-notation": "off",
            "@typescript-eslint/naming-convention": "off",
            "@typescript-eslint/no-array-delete": "off",
            "@typescript-eslint/no-base-to-string": "off",
            "@typescript-eslint/no-confusing-void-expression": "off",
            "@typescript-eslint/no-deprecated": "off",
            "@typescript-eslint/no-duplicate-type-constituents": "off",
            "@typescript-eslint/no-floating-promises": "off",
            "@typescript-eslint/no-for-in-array": "off",
            "@typescript-eslint/no-implied-eval": "off",
            "@typescript-eslint/no-meaningless-void-operator": "off",
            "@typescript-eslint/no-misused-promises": "off",
            "@typescript-eslint/no-misused-spread": "off",
            "@typescript-eslint/no-mixed-enums": "off",
            "@typescript-eslint/no-redundant-type-constituents": "off",
            "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
            "@typescript-eslint/no-unnecessary-condition": "off",
            "@typescript-eslint/no-unnecessary-qualifier": "off",
            "@typescript-eslint/no-unnecessary-template-expression": "off",
            "@typescript-eslint/no-unnecessary-type-arguments": "off",
            "@typescript-eslint/no-unnecessary-type-assertion": "off",
            "@typescript-eslint/no-unnecessary-type-conversion": "off",
            "@typescript-eslint/no-unnecessary-type-parameters": "off",
            "@typescript-eslint/no-unsafe-argument": "off",
            "@typescript-eslint/no-unsafe-assignment": "off",
            "@typescript-eslint/no-unsafe-call": "off",
            "@typescript-eslint/no-unsafe-enum-comparison": "off",
            "@typescript-eslint/no-unsafe-member-access": "off",
            "@typescript-eslint/no-unsafe-return": "off",
            "@typescript-eslint/no-unsafe-type-assertion": "off",
            "@typescript-eslint/no-unsafe-unary-minus": "off",
            "@typescript-eslint/non-nullable-type-assertion-style": "off",
            "@typescript-eslint/only-throw-error": "off",
            "@typescript-eslint/prefer-destructuring": "off",
            "@typescript-eslint/prefer-find": "off",
            "@typescript-eslint/prefer-includes": "off",
            "@typescript-eslint/prefer-nullish-coalescing": "off",
            "@typescript-eslint/prefer-optional-chain": "off",
            "@typescript-eslint/prefer-promise-reject-errors": "off",
            "@typescript-eslint/prefer-readonly": "off",
            "@typescript-eslint/prefer-readonly-parameter-types": "off",
            "@typescript-eslint/prefer-reduce-type-parameter": "off",
            "@typescript-eslint/prefer-regexp-exec": "off",
            "@typescript-eslint/prefer-return-this-type": "off",
            "@typescript-eslint/prefer-string-starts-ends-with": "off",
            "@typescript-eslint/promise-function-async": "off",
            "@typescript-eslint/related-getter-setter-pairs": "off",
            "@typescript-eslint/require-array-sort-compare": "off",
            "@typescript-eslint/require-await": "off",
            "@typescript-eslint/restrict-plus-operands": "off",
            "@typescript-eslint/restrict-template-expressions": "off",
            "@typescript-eslint/return-await": "off",
            "@typescript-eslint/strict-boolean-expressions": "off",
            "@typescript-eslint/switch-exhaustiveness-check": "off",
            "@typescript-eslint/unbound-method": "off",
            "@typescript-eslint/use-unknown-in-catch-callback-variable": "off",
          },
        },
        "flat/eslint-recommended": {
          "files": [
            "**/*.ts",
            "**/*.tsx",
            "**/*.mts",
            "**/*.cts",
          ],
          "name": "typescript-eslint/eslint-recommended",
          "rules": {
            "constructor-super": "off",
            "getter-return": "off",
            "no-class-assign": "off",
            "no-const-assign": "off",
            "no-dupe-args": "off",
            "no-dupe-class-members": "off",
            "no-dupe-keys": "off",
            "no-func-assign": "off",
            "no-import-assign": "off",
            "no-new-native-nonconstructor": "off",
            "no-new-symbol": "off",
            "no-obj-calls": "off",
            "no-redeclare": "off",
            "no-setter-return": "off",
            "no-this-before-super": "off",
            "no-undef": "off",
            "no-unreachable": "off",
            "no-unsafe-negation": "off",
            "no-var": "error",
            "no-with": "off",
            "prefer-const": "error",
            "prefer-rest-params": "error",
            "prefer-spread": "error",
          },
        },
        "flat/recommended": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/recommended",
            "rules": {
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
            },
          },
        ],
        "flat/recommended-type-checked": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/recommended-type-checked",
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
        ],
        "flat/recommended-type-checked-only": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/recommended-type-checked-only",
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
        ],
        "flat/strict": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/strict",
            "rules": {
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unified-signatures": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
            },
          },
        ],
        "flat/strict-type-checked": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/strict-type-checked",
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-conversion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
        ],
        "flat/strict-type-checked-only": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/strict-type-checked-only",
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-conversion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
        ],
        "flat/stylistic": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/stylistic",
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "no-empty-function": "off",
            },
          },
        ],
        "flat/stylistic-type-checked": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/stylistic-type-checked",
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
              "no-empty-function": "off",
            },
          },
        ],
        "flat/stylistic-type-checked-only": [
          {
            "languageOptions": {
              "parser": {
                "meta": {
                  "name": "typescript-eslint/parser",
                  "version": "8.44.1",
                },
                "parseForESLint": [Function],
              },
              "sourceType": "module",
            },
            "name": "typescript-eslint/base",
            "plugins": {
              "@typescript-eslint": [Circular],
            },
          },
          {
            "files": [
              "**/*.ts",
              "**/*.tsx",
              "**/*.mts",
              "**/*.cts",
            ],
            "name": "typescript-eslint/eslint-recommended",
            "rules": {
              "constructor-super": "off",
              "getter-return": "off",
              "no-class-assign": "off",
              "no-const-assign": "off",
              "no-dupe-args": "off",
              "no-dupe-class-members": "off",
              "no-dupe-keys": "off",
              "no-func-assign": "off",
              "no-import-assign": "off",
              "no-new-native-nonconstructor": "off",
              "no-new-symbol": "off",
              "no-obj-calls": "off",
              "no-redeclare": "off",
              "no-setter-return": "off",
              "no-this-before-super": "off",
              "no-undef": "off",
              "no-unreachable": "off",
              "no-unsafe-negation": "off",
              "no-var": "error",
              "no-with": "off",
              "prefer-const": "error",
              "prefer-rest-params": "error",
              "prefer-spread": "error",
            },
          },
          {
            "name": "typescript-eslint/stylistic-type-checked-only",
            "rules": {
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
            },
          },
        ],
        "recommended": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/ban-ts-comment": "error",
            "@typescript-eslint/no-array-constructor": "error",
            "@typescript-eslint/no-duplicate-enum-values": "error",
            "@typescript-eslint/no-empty-object-type": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unsafe-declaration-merging": "error",
            "@typescript-eslint/no-unsafe-function-type": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/no-wrapper-object-types": "error",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/triple-slash-reference": "error",
            "no-array-constructor": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
          },
        },
        "recommended-requiring-type-checking": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/ban-ts-comment": "error",
            "@typescript-eslint/no-array-constructor": "error",
            "@typescript-eslint/no-array-delete": "error",
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-duplicate-enum-values": "error",
            "@typescript-eslint/no-duplicate-type-constituents": "error",
            "@typescript-eslint/no-empty-object-type": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implied-eval": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-redundant-type-constituents": "error",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-declaration-merging": "error",
            "@typescript-eslint/no-unsafe-enum-comparison": "error",
            "@typescript-eslint/no-unsafe-function-type": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-unsafe-unary-minus": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/no-wrapper-object-types": "error",
            "@typescript-eslint/only-throw-error": "error",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/prefer-promise-reject-errors": "error",
            "@typescript-eslint/require-await": "error",
            "@typescript-eslint/restrict-plus-operands": "error",
            "@typescript-eslint/restrict-template-expressions": "error",
            "@typescript-eslint/triple-slash-reference": "error",
            "@typescript-eslint/unbound-method": "error",
            "no-array-constructor": "off",
            "no-implied-eval": "off",
            "no-throw-literal": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "prefer-promise-reject-errors": "off",
            "require-await": "off",
          },
        },
        "recommended-type-checked": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/ban-ts-comment": "error",
            "@typescript-eslint/no-array-constructor": "error",
            "@typescript-eslint/no-array-delete": "error",
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-duplicate-enum-values": "error",
            "@typescript-eslint/no-duplicate-type-constituents": "error",
            "@typescript-eslint/no-empty-object-type": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implied-eval": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-redundant-type-constituents": "error",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-declaration-merging": "error",
            "@typescript-eslint/no-unsafe-enum-comparison": "error",
            "@typescript-eslint/no-unsafe-function-type": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-unsafe-unary-minus": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/no-wrapper-object-types": "error",
            "@typescript-eslint/only-throw-error": "error",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/prefer-promise-reject-errors": "error",
            "@typescript-eslint/require-await": "error",
            "@typescript-eslint/restrict-plus-operands": "error",
            "@typescript-eslint/restrict-template-expressions": "error",
            "@typescript-eslint/triple-slash-reference": "error",
            "@typescript-eslint/unbound-method": "error",
            "no-array-constructor": "off",
            "no-implied-eval": "off",
            "no-throw-literal": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "prefer-promise-reject-errors": "off",
            "require-await": "off",
          },
        },
        "recommended-type-checked-only": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/no-array-delete": "error",
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-duplicate-type-constituents": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implied-eval": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-redundant-type-constituents": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-enum-comparison": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-unsafe-unary-minus": "error",
            "@typescript-eslint/only-throw-error": "error",
            "@typescript-eslint/prefer-promise-reject-errors": "error",
            "@typescript-eslint/require-await": "error",
            "@typescript-eslint/restrict-plus-operands": "error",
            "@typescript-eslint/restrict-template-expressions": "error",
            "@typescript-eslint/unbound-method": "error",
            "no-implied-eval": "off",
            "no-throw-literal": "off",
            "prefer-promise-reject-errors": "off",
            "require-await": "off",
          },
        },
        "strict": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/ban-ts-comment": [
              "error",
              {
                "minimumDescriptionLength": 10,
              },
            ],
            "@typescript-eslint/no-array-constructor": "error",
            "@typescript-eslint/no-duplicate-enum-values": "error",
            "@typescript-eslint/no-dynamic-delete": "error",
            "@typescript-eslint/no-empty-object-type": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-extraneous-class": "error",
            "@typescript-eslint/no-invalid-void-type": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-non-null-assertion": "error",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unsafe-declaration-merging": "error",
            "@typescript-eslint/no-unsafe-function-type": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/no-useless-constructor": "error",
            "@typescript-eslint/no-wrapper-object-types": "error",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-literal-enum-member": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/triple-slash-reference": "error",
            "@typescript-eslint/unified-signatures": "error",
            "no-array-constructor": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "no-useless-constructor": "off",
          },
        },
        "strict-type-checked": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/ban-ts-comment": [
              "error",
              {
                "minimumDescriptionLength": 10,
              },
            ],
            "@typescript-eslint/no-array-constructor": "error",
            "@typescript-eslint/no-array-delete": "error",
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-confusing-void-expression": "error",
            "@typescript-eslint/no-deprecated": "error",
            "@typescript-eslint/no-duplicate-enum-values": "error",
            "@typescript-eslint/no-duplicate-type-constituents": "error",
            "@typescript-eslint/no-dynamic-delete": "error",
            "@typescript-eslint/no-empty-object-type": "error",
            "@typescript-eslint/no-explicit-any": "error",
            "@typescript-eslint/no-extra-non-null-assertion": "error",
            "@typescript-eslint/no-extraneous-class": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implied-eval": "error",
            "@typescript-eslint/no-invalid-void-type": "error",
            "@typescript-eslint/no-meaningless-void-operator": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-misused-spread": "error",
            "@typescript-eslint/no-mixed-enums": "error",
            "@typescript-eslint/no-namespace": "error",
            "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
            "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
            "@typescript-eslint/no-non-null-assertion": "error",
            "@typescript-eslint/no-redundant-type-constituents": "error",
            "@typescript-eslint/no-require-imports": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
            "@typescript-eslint/no-unnecessary-condition": "error",
            "@typescript-eslint/no-unnecessary-template-expression": "error",
            "@typescript-eslint/no-unnecessary-type-arguments": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-type-constraint": "error",
            "@typescript-eslint/no-unnecessary-type-conversion": "error",
            "@typescript-eslint/no-unnecessary-type-parameters": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-declaration-merging": "error",
            "@typescript-eslint/no-unsafe-enum-comparison": "error",
            "@typescript-eslint/no-unsafe-function-type": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-unsafe-unary-minus": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-unused-vars": "error",
            "@typescript-eslint/no-useless-constructor": "error",
            "@typescript-eslint/no-wrapper-object-types": "error",
            "@typescript-eslint/only-throw-error": "error",
            "@typescript-eslint/prefer-as-const": "error",
            "@typescript-eslint/prefer-literal-enum-member": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/prefer-promise-reject-errors": "error",
            "@typescript-eslint/prefer-reduce-type-parameter": "error",
            "@typescript-eslint/prefer-return-this-type": "error",
            "@typescript-eslint/related-getter-setter-pairs": "error",
            "@typescript-eslint/require-await": "error",
            "@typescript-eslint/restrict-plus-operands": [
              "error",
              {
                "allowAny": false,
                "allowBoolean": false,
                "allowNullish": false,
                "allowNumberAndString": false,
                "allowRegExp": false,
              },
            ],
            "@typescript-eslint/restrict-template-expressions": [
              "error",
              {
                "allowAny": false,
                "allowBoolean": false,
                "allowNever": false,
                "allowNullish": false,
                "allowNumber": false,
                "allowRegExp": false,
              },
            ],
            "@typescript-eslint/return-await": [
              "error",
              "error-handling-correctness-only",
            ],
            "@typescript-eslint/triple-slash-reference": "error",
            "@typescript-eslint/unbound-method": "error",
            "@typescript-eslint/unified-signatures": "error",
            "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
            "no-array-constructor": "off",
            "no-implied-eval": "off",
            "no-return-await": "off",
            "no-throw-literal": "off",
            "no-unused-expressions": "off",
            "no-unused-vars": "off",
            "no-useless-constructor": "off",
            "prefer-promise-reject-errors": "off",
            "require-await": "off",
          },
        },
        "strict-type-checked-only": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/await-thenable": "error",
            "@typescript-eslint/no-array-delete": "error",
            "@typescript-eslint/no-base-to-string": "error",
            "@typescript-eslint/no-confusing-void-expression": "error",
            "@typescript-eslint/no-deprecated": "error",
            "@typescript-eslint/no-duplicate-type-constituents": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-for-in-array": "error",
            "@typescript-eslint/no-implied-eval": "error",
            "@typescript-eslint/no-meaningless-void-operator": "error",
            "@typescript-eslint/no-misused-promises": "error",
            "@typescript-eslint/no-misused-spread": "error",
            "@typescript-eslint/no-mixed-enums": "error",
            "@typescript-eslint/no-redundant-type-constituents": "error",
            "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
            "@typescript-eslint/no-unnecessary-condition": "error",
            "@typescript-eslint/no-unnecessary-template-expression": "error",
            "@typescript-eslint/no-unnecessary-type-arguments": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-type-conversion": "error",
            "@typescript-eslint/no-unnecessary-type-parameters": "error",
            "@typescript-eslint/no-unsafe-argument": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-enum-comparison": "error",
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "@typescript-eslint/no-unsafe-unary-minus": "error",
            "@typescript-eslint/only-throw-error": "error",
            "@typescript-eslint/prefer-promise-reject-errors": "error",
            "@typescript-eslint/prefer-reduce-type-parameter": "error",
            "@typescript-eslint/prefer-return-this-type": "error",
            "@typescript-eslint/related-getter-setter-pairs": "error",
            "@typescript-eslint/require-await": "error",
            "@typescript-eslint/restrict-plus-operands": [
              "error",
              {
                "allowAny": false,
                "allowBoolean": false,
                "allowNullish": false,
                "allowNumberAndString": false,
                "allowRegExp": false,
              },
            ],
            "@typescript-eslint/restrict-template-expressions": [
              "error",
              {
                "allowAny": false,
                "allowBoolean": false,
                "allowNever": false,
                "allowNullish": false,
                "allowNumber": false,
                "allowRegExp": false,
              },
            ],
            "@typescript-eslint/return-await": [
              "error",
              "error-handling-correctness-only",
            ],
            "@typescript-eslint/unbound-method": "error",
            "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
            "no-implied-eval": "off",
            "no-return-await": "off",
            "no-throw-literal": "off",
            "prefer-promise-reject-errors": "off",
            "require-await": "off",
          },
        },
        "stylistic": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/adjacent-overload-signatures": "error",
            "@typescript-eslint/array-type": "error",
            "@typescript-eslint/ban-tslint-comment": "error",
            "@typescript-eslint/class-literal-property-style": "error",
            "@typescript-eslint/consistent-generic-constructors": "error",
            "@typescript-eslint/consistent-indexed-object-style": "error",
            "@typescript-eslint/consistent-type-assertions": "error",
            "@typescript-eslint/consistent-type-definitions": "error",
            "@typescript-eslint/no-confusing-non-null-assertion": "error",
            "@typescript-eslint/no-empty-function": "error",
            "@typescript-eslint/no-inferrable-types": "error",
            "@typescript-eslint/prefer-for-of": "error",
            "@typescript-eslint/prefer-function-type": "error",
            "no-empty-function": "off",
          },
        },
        "stylistic-type-checked": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/adjacent-overload-signatures": "error",
            "@typescript-eslint/array-type": "error",
            "@typescript-eslint/ban-tslint-comment": "error",
            "@typescript-eslint/class-literal-property-style": "error",
            "@typescript-eslint/consistent-generic-constructors": "error",
            "@typescript-eslint/consistent-indexed-object-style": "error",
            "@typescript-eslint/consistent-type-assertions": "error",
            "@typescript-eslint/consistent-type-definitions": "error",
            "@typescript-eslint/dot-notation": "error",
            "@typescript-eslint/no-confusing-non-null-assertion": "error",
            "@typescript-eslint/no-empty-function": "error",
            "@typescript-eslint/no-inferrable-types": "error",
            "@typescript-eslint/non-nullable-type-assertion-style": "error",
            "@typescript-eslint/prefer-find": "error",
            "@typescript-eslint/prefer-for-of": "error",
            "@typescript-eslint/prefer-function-type": "error",
            "@typescript-eslint/prefer-includes": "error",
            "@typescript-eslint/prefer-nullish-coalescing": "error",
            "@typescript-eslint/prefer-optional-chain": "error",
            "@typescript-eslint/prefer-regexp-exec": "error",
            "@typescript-eslint/prefer-string-starts-ends-with": "error",
            "dot-notation": "off",
            "no-empty-function": "off",
          },
        },
        "stylistic-type-checked-only": {
          "extends": [
            "./configs/eslintrc/base",
            "./configs/eslintrc/eslint-recommended",
          ],
          "rules": {
            "@typescript-eslint/dot-notation": "error",
            "@typescript-eslint/non-nullable-type-assertion-style": "error",
            "@typescript-eslint/prefer-find": "error",
            "@typescript-eslint/prefer-includes": "error",
            "@typescript-eslint/prefer-nullish-coalescing": "error",
            "@typescript-eslint/prefer-optional-chain": "error",
            "@typescript-eslint/prefer-regexp-exec": "error",
            "@typescript-eslint/prefer-string-starts-ends-with": "error",
            "dot-notation": "off",
          },
        },
      },
      "meta": {
        "name": "@typescript-eslint/eslint-plugin",
        "version": "8.44.1",
      },
      "rules": {
        "adjacent-overload-signatures": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Require that function overload signatures be consecutive",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
            },
            "messages": {
              "adjacentSignature": "All {{name}} signatures should be adjacent.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "array-type": {
          "create": [Function],
          "defaultOptions": [
            {
              "default": "array",
            },
          ],
          "meta": {
            "docs": {
              "description": "Require consistently using either \`T[]\` or \`Array<T>\` for arrays",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/array-type",
            },
            "fixable": "code",
            "messages": {
              "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
              "errorStringArrayReadonly": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}' instead.",
              "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
              "errorStringArraySimpleReadonly": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}' instead.",
              "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
              "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
            },
            "schema": [
              {
                "$defs": {
                  "arrayOption": {
                    "enum": [
                      "array",
                      "generic",
                      "array-simple",
                    ],
                    "type": "string",
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "default": {
                    "$ref": "#/items/0/$defs/arrayOption",
                    "description": "The array type expected for mutable cases.",
                  },
                  "readonly": {
                    "$ref": "#/items/0/$defs/arrayOption",
                    "description": "The array type expected for readonly cases. If omitted, the value for \`default\` will be used.",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "await-thenable": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow awaiting a value that is not a Thenable",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/await-thenable",
            },
            "hasSuggestions": true,
            "messages": {
              "await": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
              "awaitUsingOfNonAsyncDisposable": "Unexpected \`await using\` of a value that is not async disposable.",
              "convertToOrdinaryFor": "Convert to an ordinary \`for...of\` loop.",
              "forAwaitOfNonAsyncIterable": "Unexpected \`for await...of\` of a value that is not async iterable.",
              "invalidPromiseAggregatorInput": "Unexpected iterable of non-Promise (non-"Thenable") values passed to promise aggregator.",
              "removeAwait": "Remove unnecessary \`await\`.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "ban-ts-comment": {
          "create": [Function],
          "defaultOptions": [
            {
              "minimumDescriptionLength": 3,
              "ts-check": false,
              "ts-expect-error": "allow-with-description",
              "ts-ignore": true,
              "ts-nocheck": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow \`@ts-<directive>\` comments or require descriptions after directives",
              "recommended": {
                "recommended": true,
                "strict": [
                  {
                    "minimumDescriptionLength": 10,
                  },
                ],
              },
              "url": "https://typescript-eslint.io/rules/ban-ts-comment",
            },
            "hasSuggestions": true,
            "messages": {
              "replaceTsIgnoreWithTsExpectError": "Replace "@ts-ignore" with "@ts-expect-error".",
              "tsDirectiveComment": "Do not use "@ts-{{directive}}" because it alters compilation errors.",
              "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the "@ts-{{directive}}" directive must match the {{format}} format.",
              "tsDirectiveCommentRequiresDescription": "Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
              "tsIgnoreInsteadOfExpectError": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
            },
            "schema": [
              {
                "$defs": {
                  "directiveConfigSchema": {
                    "oneOf": [
                      {
                        "default": true,
                        "type": "boolean",
                      },
                      {
                        "enum": [
                          "allow-with-description",
                        ],
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "descriptionFormat": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "minimumDescriptionLength": {
                    "description": "A minimum character length for descriptions when \`allow-with-description\` is enabled.",
                    "type": "number",
                  },
                  "ts-check": {
                    "$ref": "#/items/0/$defs/directiveConfigSchema",
                  },
                  "ts-expect-error": {
                    "$ref": "#/items/0/$defs/directiveConfigSchema",
                  },
                  "ts-ignore": {
                    "$ref": "#/items/0/$defs/directiveConfigSchema",
                  },
                  "ts-nocheck": {
                    "$ref": "#/items/0/$defs/directiveConfigSchema",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "ban-tslint-comment": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow \`// tslint:<rule-flag>\` comments",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
            },
            "fixable": "code",
            "messages": {
              "commentDetected": "tslint comment detected: "{{ text }}"",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "class-literal-property-style": {
          "create": [Function],
          "defaultOptions": [
            "fields",
          ],
          "meta": {
            "docs": {
              "description": "Enforce that literals on classes are exposed in a consistent style",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/class-literal-property-style",
            },
            "hasSuggestions": true,
            "messages": {
              "preferFieldStyle": "Literals should be exposed using readonly fields.",
              "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
              "preferGetterStyle": "Literals should be exposed using getters.",
              "preferGetterStyleSuggestion": "Replace the literals with getters.",
            },
            "schema": [
              {
                "description": "Which literal class member syntax to prefer.",
                "enum": [
                  "fields",
                  "getters",
                ],
                "type": "string",
              },
            ],
            "type": "problem",
          },
        },
        "class-methods-use-this": {
          "create": [Function],
          "defaultOptions": [
            {
              "enforceForClassFields": true,
              "exceptMethods": [],
              "ignoreClassesThatImplementAnInterface": false,
              "ignoreOverrideMethods": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce that class methods utilize \`this\`",
              "extendsBaseRule": true,
              "requiresTypeChecking": false,
              "url": "https://typescript-eslint.io/rules/class-methods-use-this",
            },
            "messages": {
              "missingThis": "Expected 'this' to be used by class {{name}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "enforceForClassFields": {
                    "description": "Enforces that functions used as instance field initializers utilize \`this\`.",
                    "type": "boolean",
                  },
                  "exceptMethods": {
                    "description": "Allows specified method names to be ignored with this rule.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "ignoreClassesThatImplementAnInterface": {
                    "description": "Whether to ignore class members that are defined within a class that \`implements\` a type.",
                    "oneOf": [
                      {
                        "description": "Ignore all classes that implement an interface",
                        "type": "boolean",
                      },
                      {
                        "description": "Ignore only the public fields of classes that implement an interface",
                        "enum": [
                          "public-fields",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                  "ignoreOverrideMethods": {
                    "description": "Whether to ignore members marked with the \`override\` modifier.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-generic-constructors": {
          "create": [Function],
          "defaultOptions": [
            "constructor",
          ],
          "meta": {
            "docs": {
              "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
            },
            "fixable": "code",
            "messages": {
              "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
              "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
            },
            "schema": [
              {
                "description": "Which constructor call syntax to prefer.",
                "enum": [
                  "type-annotation",
                  "constructor",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-indexed-object-style": {
          "create": [Function],
          "defaultOptions": [
            "record",
          ],
          "meta": {
            "docs": {
              "description": "Require or disallow the \`Record\` type",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "preferIndexSignature": "An index signature is preferred over a record.",
              "preferIndexSignatureSuggestion": "Change into an index signature instead of a record.",
              "preferRecord": "A record is preferred over an index signature.",
            },
            "schema": [
              {
                "description": "Which indexed object syntax to prefer.",
                "enum": [
                  "record",
                  "index-signature",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-return": {
          "create": [Function],
          "defaultOptions": [
            {
              "treatUndefinedAsUnspecified": false,
            },
          ],
          "meta": {
            "defaultOptions": [
              {
                "treatUndefinedAsUnspecified": false,
              },
            ],
            "docs": {
              "description": "Require \`return\` statements to either always or never specify values",
              "extendsBaseRule": true,
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/consistent-return",
            },
            "hasSuggestions": undefined,
            "messages": {
              "missingReturn": "Expected to return a value at the end of {{name}}.",
              "missingReturnValue": "{{name}} expected a return value.",
              "unexpectedReturnValue": "{{name}} expected no return value.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "treatUndefinedAsUnspecified": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-type-assertions": {
          "create": [Function],
          "defaultOptions": [
            {
              "arrayLiteralTypeAssertions": "allow",
              "assertionStyle": "as",
              "objectLiteralTypeAssertions": "allow",
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce consistent usage of type assertions",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
              "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
              "never": "Do not use any type assertions.",
              "replaceArrayTypeAssertionWithAnnotation": "Use const x: {{cast}} = [ ... ] instead.",
              "replaceArrayTypeAssertionWithSatisfies": "Use const x = [ ... ] satisfies {{cast}} instead.",
              "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
              "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
              "unexpectedArrayTypeAssertion": "Always prefer const x: T[] = [ ... ].",
              "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
            },
            "schema": [
              {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "assertionStyle": {
                        "description": "The expected assertion style to enforce.",
                        "enum": [
                          "never",
                        ],
                        "type": "string",
                      },
                    },
                    "required": [
                      "assertionStyle",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "arrayLiteralTypeAssertions": {
                        "description": "Whether to always prefer type declarations for array literals used as variable initializers, rather than type assertions.",
                        "enum": [
                          "allow",
                          "allow-as-parameter",
                          "never",
                        ],
                        "type": "string",
                      },
                      "assertionStyle": {
                        "description": "The expected assertion style to enforce.",
                        "enum": [
                          "as",
                          "angle-bracket",
                        ],
                        "type": "string",
                      },
                      "objectLiteralTypeAssertions": {
                        "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
                        "enum": [
                          "allow",
                          "allow-as-parameter",
                          "never",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-type-definitions": {
          "create": [Function],
          "defaultOptions": [
            "interface",
          ],
          "meta": {
            "docs": {
              "description": "Enforce type definitions to consistently use either \`interface\` or \`type\`",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
            },
            "fixable": "code",
            "messages": {
              "interfaceOverType": "Use an \`interface\` instead of a \`type\`.",
              "typeOverInterface": "Use a \`type\` instead of an \`interface\`.",
            },
            "schema": [
              {
                "description": "Which type definition syntax to prefer.",
                "enum": [
                  "interface",
                  "type",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-type-exports": {
          "create": [Function],
          "defaultOptions": [
            {
              "fixMixedExportsWithInlineTypeSpecifier": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce consistent usage of type exports",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/consistent-type-exports",
            },
            "fixable": "code",
            "messages": {
              "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using \`export type\`.",
              "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using \`export type\`.",
              "typeOverValue": "All exports in the declaration are only used as types. Use \`export type\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "fixMixedExportsWithInlineTypeSpecifier": {
                    "description": "Whether the rule will autofix "mixed" export cases using TS inline type specifiers.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "consistent-type-imports": {
          "create": [Function],
          "defaultOptions": [
            {
              "disallowTypeAnnotations": true,
              "fixStyle": "separate-type-imports",
              "prefer": "type-imports",
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce consistent usage of type imports",
              "url": "https://typescript-eslint.io/rules/consistent-type-imports",
            },
            "fixable": "code",
            "messages": {
              "avoidImportType": "Use an \`import\` instead of an \`import type\`.",
              "noImportTypeAnnotations": "\`import()\` type annotations are forbidden.",
              "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
              "typeOverValue": "All imports in the declaration are only used as types. Use \`import type\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "disallowTypeAnnotations": {
                    "description": "Whether to disallow type imports in type annotations (\`import()\`).",
                    "type": "boolean",
                  },
                  "fixStyle": {
                    "description": "The expected type modifier to be added when an import is detected as used only in the type position.",
                    "enum": [
                      "separate-type-imports",
                      "inline-type-imports",
                    ],
                    "type": "string",
                  },
                  "prefer": {
                    "description": "The expected import kind for type-only imports.",
                    "enum": [
                      "type-imports",
                      "no-type-imports",
                    ],
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "default-param-last": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce default parameters to be last",
              "extendsBaseRule": true,
              "frozen": true,
              "url": "https://typescript-eslint.io/rules/default-param-last",
            },
            "messages": {
              "shouldBeLast": "Default parameters should be last.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "dot-notation": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowIndexSignaturePropertyAccess": false,
              "allowKeywords": true,
              "allowPattern": "",
              "allowPrivateClassPropertyAccess": false,
              "allowProtectedClassPropertyAccess": false,
            },
          ],
          "meta": {
            "defaultOptions": [
              {
                "allowIndexSignaturePropertyAccess": false,
                "allowKeywords": true,
                "allowPattern": "",
                "allowPrivateClassPropertyAccess": false,
                "allowProtectedClassPropertyAccess": false,
              },
            ],
            "docs": {
              "description": "Enforce dot notation whenever possible",
              "extendsBaseRule": true,
              "frozen": true,
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/dot-notation",
            },
            "fixable": "code",
            "hasSuggestions": undefined,
            "messages": {
              "useBrackets": ".{{key}} is a syntax error.",
              "useDot": "[{{key}}] is better written in dot notation.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowIndexSignaturePropertyAccess": {
                    "description": "Whether to allow accessing properties matching an index signature with array notation.",
                    "type": "boolean",
                  },
                  "allowKeywords": {
                    "description": "Whether to allow keywords such as ["class"]\`.",
                    "type": "boolean",
                  },
                  "allowPattern": {
                    "description": "Regular expression of names to allow.",
                    "type": "string",
                  },
                  "allowPrivateClassPropertyAccess": {
                    "description": "Whether to allow accessing class members marked as \`private\` with array notation.",
                    "type": "boolean",
                  },
                  "allowProtectedClassPropertyAccess": {
                    "description": "Whether to allow accessing class members marked as \`protected\` with array notation.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "explicit-function-return-type": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
              "allowDirectConstAssertionInArrowFunctions": true,
              "allowExpressions": false,
              "allowFunctionsWithoutTypeParameters": false,
              "allowHigherOrderFunctions": true,
              "allowIIFEs": false,
              "allowTypedFunctionExpressions": true,
              "allowedNames": [],
            },
          ],
          "meta": {
            "docs": {
              "description": "Require explicit return types on functions and class methods",
              "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
            },
            "messages": {
              "missingReturnType": "Missing return type on function.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                    "description": "Whether to allow arrow functions that start with the \`void\` keyword.",
                    "type": "boolean",
                  },
                  "allowDirectConstAssertionInArrowFunctions": {
                    "description": "Whether to ignore arrow functions immediately returning a \`as const\` value.",
                    "type": "boolean",
                  },
                  "allowExpressions": {
                    "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                    "type": "boolean",
                  },
                  "allowFunctionsWithoutTypeParameters": {
                    "description": "Whether to ignore functions that don't have generic type parameters.",
                    "type": "boolean",
                  },
                  "allowHigherOrderFunctions": {
                    "description": "Whether to ignore functions immediately returning another function expression.",
                    "type": "boolean",
                  },
                  "allowIIFEs": {
                    "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                    "type": "boolean",
                  },
                  "allowTypedFunctionExpressions": {
                    "description": "Whether to ignore type annotations on the variable of function expressions.",
                    "type": "boolean",
                  },
                  "allowedNames": {
                    "description": "An array of function/method names that will not have their arguments or return values checked.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "explicit-member-accessibility": {
          "create": [Function],
          "defaultOptions": [
            {
              "accessibility": "explicit",
            },
          ],
          "meta": {
            "docs": {
              "description": "Require explicit accessibility modifiers on class properties and methods",
              "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
              "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
              "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
            },
            "schema": [
              {
                "$defs": {
                  "accessibilityLevel": {
                    "oneOf": [
                      {
                        "description": "Always require an accessor.",
                        "enum": [
                          "explicit",
                        ],
                        "type": "string",
                      },
                      {
                        "description": "Require an accessor except when public.",
                        "enum": [
                          "no-public",
                        ],
                        "type": "string",
                      },
                      {
                        "description": "Never check whether there is an accessor.",
                        "enum": [
                          "off",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "accessibility": {
                    "$ref": "#/items/0/$defs/accessibilityLevel",
                    "description": "Which accessibility modifier is required to exist or not exist.",
                  },
                  "ignoredMethodNames": {
                    "description": "Specific method names that may be ignored.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "overrides": {
                    "additionalProperties": false,
                    "description": "Changes to required accessibility modifiers for specific kinds of class members.",
                    "properties": {
                      "accessors": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                      },
                      "constructors": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                      },
                      "methods": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                      },
                      "parameterProperties": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                      },
                      "properties": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                      },
                    },
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "explicit-module-boundary-types": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowArgumentsExplicitlyTypedAsAny": false,
              "allowDirectConstAssertionInArrowFunctions": true,
              "allowHigherOrderFunctions": true,
              "allowOverloadFunctions": false,
              "allowTypedFunctionExpressions": true,
              "allowedNames": [],
            },
          ],
          "meta": {
            "docs": {
              "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
              "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
            },
            "messages": {
              "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
              "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
              "missingArgType": "Argument '{{name}}' should be typed.",
              "missingArgTypeUnnamed": "{{type}} argument should be typed.",
              "missingReturnType": "Missing return type on function.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowArgumentsExplicitlyTypedAsAny": {
                    "description": "Whether to ignore arguments that are explicitly typed as \`any\`.",
                    "type": "boolean",
                  },
                  "allowDirectConstAssertionInArrowFunctions": {
                    "description": "Whether to ignore return type annotations on body-less arrow functions that return an \`as const\` type assertion.
You must still type the parameters of the function.",
                    "type": "boolean",
                  },
                  "allowHigherOrderFunctions": {
                    "description": "Whether to ignore return type annotations on functions immediately returning another function expression.
You must still type the parameters of the function.",
                    "type": "boolean",
                  },
                  "allowOverloadFunctions": {
                    "description": "Whether to ignore return type annotations on functions with overload signatures.",
                    "type": "boolean",
                  },
                  "allowTypedFunctionExpressions": {
                    "description": "Whether to ignore type annotations on the variable of a function expression.",
                    "type": "boolean",
                  },
                  "allowedNames": {
                    "description": "An array of function/method names that will not have their arguments or return values checked.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "init-declarations": {
          "create": [Function],
          "defaultOptions": [
            "always",
          ],
          "meta": {
            "docs": {
              "description": "Require or disallow initialization in variable declarations",
              "extendsBaseRule": true,
              "frozen": true,
              "url": "https://typescript-eslint.io/rules/init-declarations",
            },
            "hasSuggestions": undefined,
            "messages": {
              "initialized": "Variable '{{idName}}' should be initialized on declaration.",
              "notInitialized": "Variable '{{idName}}' should not be initialized on declaration.",
            },
            "schema": {
              "anyOf": [
                {
                  "items": [
                    {
                      "enum": [
                        "always",
                      ],
                    },
                  ],
                  "maxItems": 1,
                  "minItems": 0,
                  "type": "array",
                },
                {
                  "items": [
                    {
                      "enum": [
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "ignoreForLoopInit": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "maxItems": 2,
                  "minItems": 0,
                  "type": "array",
                },
              ],
            },
            "type": "suggestion",
          },
        },
        "max-params": {
          "create": [Function],
          "defaultOptions": [
            {
              "countVoidThis": false,
              "max": 3,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce a maximum number of parameters in function definitions",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/max-params",
            },
            "messages": {
              "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "countVoidThis": {
                    "description": "Whether to count a \`this\` declaration when the type is \`void\`.",
                    "type": "boolean",
                  },
                  "max": {
                    "description": "A maximum number of parameters in function definitions.",
                    "minimum": 0,
                    "type": "integer",
                  },
                  "maximum": {
                    "description": "(deprecated) A maximum number of parameters in function definitions.",
                    "minimum": 0,
                    "type": "integer",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "member-ordering": {
          "create": [Function],
          "defaultOptions": [
            {
              "default": {
                "memberTypes": [
                  "signature",
                  "call-signature",
                  "public-static-field",
                  "protected-static-field",
                  "private-static-field",
                  "#private-static-field",
                  "public-decorated-field",
                  "protected-decorated-field",
                  "private-decorated-field",
                  "public-instance-field",
                  "protected-instance-field",
                  "private-instance-field",
                  "#private-instance-field",
                  "public-abstract-field",
                  "protected-abstract-field",
                  "public-field",
                  "protected-field",
                  "private-field",
                  "#private-field",
                  "static-field",
                  "instance-field",
                  "abstract-field",
                  "decorated-field",
                  "field",
                  "static-initialization",
                  "public-constructor",
                  "protected-constructor",
                  "private-constructor",
                  "constructor",
                  "public-static-accessor",
                  "protected-static-accessor",
                  "private-static-accessor",
                  "#private-static-accessor",
                  "public-decorated-accessor",
                  "protected-decorated-accessor",
                  "private-decorated-accessor",
                  "public-instance-accessor",
                  "protected-instance-accessor",
                  "private-instance-accessor",
                  "#private-instance-accessor",
                  "public-abstract-accessor",
                  "protected-abstract-accessor",
                  "public-accessor",
                  "protected-accessor",
                  "private-accessor",
                  "#private-accessor",
                  "static-accessor",
                  "instance-accessor",
                  "abstract-accessor",
                  "decorated-accessor",
                  "accessor",
                  "public-static-get",
                  "protected-static-get",
                  "private-static-get",
                  "#private-static-get",
                  "public-decorated-get",
                  "protected-decorated-get",
                  "private-decorated-get",
                  "public-instance-get",
                  "protected-instance-get",
                  "private-instance-get",
                  "#private-instance-get",
                  "public-abstract-get",
                  "protected-abstract-get",
                  "public-get",
                  "protected-get",
                  "private-get",
                  "#private-get",
                  "static-get",
                  "instance-get",
                  "abstract-get",
                  "decorated-get",
                  "get",
                  "public-static-set",
                  "protected-static-set",
                  "private-static-set",
                  "#private-static-set",
                  "public-decorated-set",
                  "protected-decorated-set",
                  "private-decorated-set",
                  "public-instance-set",
                  "protected-instance-set",
                  "private-instance-set",
                  "#private-instance-set",
                  "public-abstract-set",
                  "protected-abstract-set",
                  "public-set",
                  "protected-set",
                  "private-set",
                  "#private-set",
                  "static-set",
                  "instance-set",
                  "abstract-set",
                  "decorated-set",
                  "set",
                  "public-static-method",
                  "protected-static-method",
                  "private-static-method",
                  "#private-static-method",
                  "public-decorated-method",
                  "protected-decorated-method",
                  "private-decorated-method",
                  "public-instance-method",
                  "protected-instance-method",
                  "private-instance-method",
                  "#private-instance-method",
                  "public-abstract-method",
                  "protected-abstract-method",
                  "public-method",
                  "protected-method",
                  "private-method",
                  "#private-method",
                  "static-method",
                  "instance-method",
                  "abstract-method",
                  "decorated-method",
                  "method",
                ],
              },
            },
          ],
          "meta": {
            "docs": {
              "description": "Require a consistent member declaration order",
              "frozen": true,
              "url": "https://typescript-eslint.io/rules/member-ordering",
            },
            "messages": {
              "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
              "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
              "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
            },
            "schema": [
              {
                "$defs": {
                  "allItems": {
                    "enum": [
                      "readonly-signature",
                      "signature",
                      "readonly-field",
                      "public-readonly-field",
                      "public-decorated-readonly-field",
                      "decorated-readonly-field",
                      "static-readonly-field",
                      "public-static-readonly-field",
                      "instance-readonly-field",
                      "public-instance-readonly-field",
                      "abstract-readonly-field",
                      "public-abstract-readonly-field",
                      "protected-readonly-field",
                      "protected-decorated-readonly-field",
                      "protected-static-readonly-field",
                      "protected-instance-readonly-field",
                      "protected-abstract-readonly-field",
                      "private-readonly-field",
                      "private-decorated-readonly-field",
                      "private-static-readonly-field",
                      "private-instance-readonly-field",
                      "#private-readonly-field",
                      "#private-static-readonly-field",
                      "#private-instance-readonly-field",
                      "field",
                      "public-field",
                      "public-decorated-field",
                      "decorated-field",
                      "static-field",
                      "public-static-field",
                      "instance-field",
                      "public-instance-field",
                      "abstract-field",
                      "public-abstract-field",
                      "protected-field",
                      "protected-decorated-field",
                      "protected-static-field",
                      "protected-instance-field",
                      "protected-abstract-field",
                      "private-field",
                      "private-decorated-field",
                      "private-static-field",
                      "private-instance-field",
                      "#private-field",
                      "#private-static-field",
                      "#private-instance-field",
                      "method",
                      "public-method",
                      "public-decorated-method",
                      "decorated-method",
                      "static-method",
                      "public-static-method",
                      "instance-method",
                      "public-instance-method",
                      "abstract-method",
                      "public-abstract-method",
                      "protected-method",
                      "protected-decorated-method",
                      "protected-static-method",
                      "protected-instance-method",
                      "protected-abstract-method",
                      "private-method",
                      "private-decorated-method",
                      "private-static-method",
                      "private-instance-method",
                      "#private-method",
                      "#private-static-method",
                      "#private-instance-method",
                      "call-signature",
                      "constructor",
                      "public-constructor",
                      "protected-constructor",
                      "private-constructor",
                      "accessor",
                      "public-accessor",
                      "public-decorated-accessor",
                      "decorated-accessor",
                      "static-accessor",
                      "public-static-accessor",
                      "instance-accessor",
                      "public-instance-accessor",
                      "abstract-accessor",
                      "public-abstract-accessor",
                      "protected-accessor",
                      "protected-decorated-accessor",
                      "protected-static-accessor",
                      "protected-instance-accessor",
                      "protected-abstract-accessor",
                      "private-accessor",
                      "private-decorated-accessor",
                      "private-static-accessor",
                      "private-instance-accessor",
                      "#private-accessor",
                      "#private-static-accessor",
                      "#private-instance-accessor",
                      "get",
                      "public-get",
                      "public-decorated-get",
                      "decorated-get",
                      "static-get",
                      "public-static-get",
                      "instance-get",
                      "public-instance-get",
                      "abstract-get",
                      "public-abstract-get",
                      "protected-get",
                      "protected-decorated-get",
                      "protected-static-get",
                      "protected-instance-get",
                      "protected-abstract-get",
                      "private-get",
                      "private-decorated-get",
                      "private-static-get",
                      "private-instance-get",
                      "#private-get",
                      "#private-static-get",
                      "#private-instance-get",
                      "set",
                      "public-set",
                      "public-decorated-set",
                      "decorated-set",
                      "static-set",
                      "public-static-set",
                      "instance-set",
                      "public-instance-set",
                      "abstract-set",
                      "public-abstract-set",
                      "protected-set",
                      "protected-decorated-set",
                      "protected-static-set",
                      "protected-instance-set",
                      "protected-abstract-set",
                      "private-set",
                      "private-decorated-set",
                      "private-static-set",
                      "private-instance-set",
                      "#private-set",
                      "#private-static-set",
                      "#private-instance-set",
                      "static-initialization",
                      "static-static-initialization",
                      "public-static-static-initialization",
                      "instance-static-initialization",
                      "public-instance-static-initialization",
                      "abstract-static-initialization",
                      "public-abstract-static-initialization",
                      "protected-static-static-initialization",
                      "protected-instance-static-initialization",
                      "protected-abstract-static-initialization",
                      "private-static-static-initialization",
                      "private-instance-static-initialization",
                      "#private-static-static-initialization",
                      "#private-instance-static-initialization",
                    ],
                    "type": "string",
                  },
                  "baseConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "never",
                        ],
                        "type": "string",
                      },
                      {
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/items/0/$defs/allItems",
                            },
                            {
                              "items": {
                                "$ref": "#/items/0/$defs/allItems",
                              },
                              "type": "array",
                            },
                          ],
                        },
                        "type": "array",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "memberTypes": {
                            "oneOf": [
                              {
                                "items": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/items/0/$defs/allItems",
                                    },
                                    {
                                      "items": {
                                        "$ref": "#/items/0/$defs/allItems",
                                      },
                                      "type": "array",
                                    },
                                  ],
                                },
                                "type": "array",
                              },
                              {
                                "enum": [
                                  "never",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          "optionalityOrder": {
                            "$ref": "#/items/0/$defs/optionalityOrderOptions",
                          },
                          "order": {
                            "$ref": "#/items/0/$defs/orderOptions",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  "optionalityOrderOptions": {
                    "enum": [
                      "optional-first",
                      "required-first",
                    ],
                    "type": "string",
                  },
                  "orderOptions": {
                    "enum": [
                      "alphabetically",
                      "alphabetically-case-insensitive",
                      "as-written",
                      "natural",
                      "natural-case-insensitive",
                    ],
                    "type": "string",
                  },
                  "typeItems": {
                    "enum": [
                      "readonly-signature",
                      "signature",
                      "readonly-field",
                      "field",
                      "method",
                      "constructor",
                    ],
                    "type": "string",
                  },
                  "typesConfig": {
                    "oneOf": [
                      {
                        "enum": [
                          "never",
                        ],
                        "type": "string",
                      },
                      {
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/items/0/$defs/typeItems",
                            },
                            {
                              "items": {
                                "$ref": "#/items/0/$defs/typeItems",
                              },
                              "type": "array",
                            },
                          ],
                        },
                        "type": "array",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "memberTypes": {
                            "oneOf": [
                              {
                                "items": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/items/0/$defs/typeItems",
                                    },
                                    {
                                      "items": {
                                        "$ref": "#/items/0/$defs/typeItems",
                                      },
                                      "type": "array",
                                    },
                                  ],
                                },
                                "type": "array",
                              },
                              {
                                "enum": [
                                  "never",
                                ],
                                "type": "string",
                              },
                            ],
                          },
                          "optionalityOrder": {
                            "$ref": "#/items/0/$defs/optionalityOrderOptions",
                          },
                          "order": {
                            "$ref": "#/items/0/$defs/orderOptions",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "classExpressions": {
                    "$ref": "#/items/0/$defs/baseConfig",
                  },
                  "classes": {
                    "$ref": "#/items/0/$defs/baseConfig",
                  },
                  "default": {
                    "$ref": "#/items/0/$defs/baseConfig",
                  },
                  "interfaces": {
                    "$ref": "#/items/0/$defs/typesConfig",
                  },
                  "typeLiterals": {
                    "$ref": "#/items/0/$defs/typesConfig",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "method-signature-style": {
          "create": [Function],
          "defaultOptions": [
            "property",
          ],
          "meta": {
            "docs": {
              "description": "Enforce using a particular method signature syntax",
              "url": "https://typescript-eslint.io/rules/method-signature-style",
            },
            "fixable": "code",
            "messages": {
              "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
              "errorProperty": "Function property signature is forbidden. Use a method shorthand instead.",
            },
            "schema": [
              {
                "enum": [
                  "property",
                  "method",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "naming-convention": {
          "create": [Function],
          "defaultOptions": [
            {
              "format": [
                "camelCase",
              ],
              "leadingUnderscore": "allow",
              "selector": "default",
              "trailingUnderscore": "allow",
            },
            {
              "format": [
                "camelCase",
                "PascalCase",
              ],
              "selector": "import",
            },
            {
              "format": [
                "camelCase",
                "UPPER_CASE",
              ],
              "leadingUnderscore": "allow",
              "selector": "variable",
              "trailingUnderscore": "allow",
            },
            {
              "format": [
                "PascalCase",
              ],
              "selector": "typeLike",
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce naming conventions for everything across a codebase",
              "frozen": true,
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/naming-convention",
            },
            "messages": {
              "doesNotMatchFormat": "{{type}} name \`{{name}}\` must match one of the following formats: {{formats}}",
              "doesNotMatchFormatTrimmed": "{{type}} name \`{{name}}\` trimmed as \`{{processedName}}\` must match one of the following formats: {{formats}}",
              "missingAffix": "{{type}} name \`{{name}}\` must have one of the following {{position}}es: {{affixes}}",
              "missingUnderscore": "{{type}} name \`{{name}}\` must have {{count}} {{position}} underscore(s).",
              "satisfyCustom": "{{type}} name \`{{name}}\` must {{regexMatch}} the RegExp: {{regex}}",
              "unexpectedUnderscore": "{{type}} name \`{{name}}\` must not have a {{position}} underscore.",
            },
            "schema": {
              "$defs": {
                "formatOptionsConfig": {
                  "oneOf": [
                    {
                      "additionalItems": false,
                      "items": {
                        "$ref": "#/$defs/predefinedFormats",
                      },
                      "type": "array",
                    },
                    {
                      "type": "null",
                    },
                  ],
                },
                "matchRegexConfig": {
                  "additionalProperties": false,
                  "properties": {
                    "match": {
                      "type": "boolean",
                    },
                    "regex": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "match",
                    "regex",
                  ],
                  "type": "object",
                },
                "predefinedFormats": {
                  "enum": [
                    "camelCase",
                    "strictCamelCase",
                    "PascalCase",
                    "StrictPascalCase",
                    "snake_case",
                    "UPPER_CASE",
                  ],
                  "type": "string",
                },
                "prefixSuffixConfig": {
                  "additionalItems": false,
                  "items": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "type": "array",
                },
                "typeModifiers": {
                  "enum": [
                    "boolean",
                    "string",
                    "number",
                    "function",
                    "array",
                  ],
                  "type": "string",
                },
                "underscoreOptions": {
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble",
                  ],
                  "type": "string",
                },
              },
              "additionalItems": false,
              "items": {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "description": "Multiple selectors in one config",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "const",
                            "readonly",
                            "static",
                            "public",
                            "protected",
                            "private",
                            "#private",
                            "abstract",
                            "destructured",
                            "global",
                            "exported",
                            "unused",
                            "requiresQuotes",
                            "override",
                            "async",
                            "default",
                            "namespace",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "default",
                            "variableLike",
                            "memberLike",
                            "typeLike",
                            "method",
                            "property",
                            "accessor",
                            "variable",
                            "function",
                            "parameter",
                            "parameterProperty",
                            "classicAccessor",
                            "enumMember",
                            "classMethod",
                            "objectLiteralMethod",
                            "typeMethod",
                            "classProperty",
                            "objectLiteralProperty",
                            "typeProperty",
                            "autoAccessor",
                            "class",
                            "interface",
                            "typeAlias",
                            "enum",
                            "typeParameter",
                            "import",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'default'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "const",
                            "readonly",
                            "static",
                            "public",
                            "protected",
                            "private",
                            "#private",
                            "abstract",
                            "destructured",
                            "global",
                            "exported",
                            "unused",
                            "requiresQuotes",
                            "override",
                            "async",
                            "default",
                            "namespace",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "default",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'variableLike'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "unused",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "variableLike",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'variable'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "const",
                            "destructured",
                            "exported",
                            "global",
                            "unused",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "variable",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'function'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "exported",
                            "global",
                            "unused",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "function",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'parameter'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "destructured",
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "parameter",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'memberLike'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "#private",
                            "protected",
                            "public",
                            "readonly",
                            "requiresQuotes",
                            "static",
                            "override",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "memberLike",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'classProperty'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "#private",
                            "protected",
                            "public",
                            "readonly",
                            "requiresQuotes",
                            "static",
                            "override",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "classProperty",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'objectLiteralProperty'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "public",
                            "requiresQuotes",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "objectLiteralProperty",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'typeProperty'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "public",
                            "readonly",
                            "requiresQuotes",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "typeProperty",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'parameterProperty'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "private",
                            "protected",
                            "public",
                            "readonly",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "parameterProperty",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'property'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "#private",
                            "protected",
                            "public",
                            "readonly",
                            "requiresQuotes",
                            "static",
                            "override",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "property",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'classMethod'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "#private",
                            "protected",
                            "public",
                            "requiresQuotes",
                            "static",
                            "override",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "classMethod",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'objectLiteralMethod'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "public",
                            "requiresQuotes",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "objectLiteralMethod",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'typeMethod'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "public",
                            "requiresQuotes",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "typeMethod",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'method'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "#private",
                            "protected",
                            "public",
                            "requiresQuotes",
                            "static",
                            "override",
                            "async",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "method",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'classicAccessor'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "protected",
                            "public",
                            "requiresQuotes",
                            "static",
                            "override",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "classicAccessor",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'autoAccessor'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "protected",
                            "public",
                            "requiresQuotes",
                            "static",
                            "override",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "autoAccessor",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'accessor'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "private",
                            "protected",
                            "public",
                            "requiresQuotes",
                            "static",
                            "override",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "accessor",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "types": {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/typeModifiers",
                        },
                        "type": "array",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'enumMember'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "requiresQuotes",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "enumMember",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'typeLike'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "exported",
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "typeLike",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'class'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "abstract",
                            "exported",
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "class",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'interface'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "exported",
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "interface",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'typeAlias'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "exported",
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "typeAlias",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'enum'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "exported",
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "enum",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'typeParameter'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "unused",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "typeParameter",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "description": "Selector 'import'",
                    "properties": {
                      "custom": {
                        "$ref": "#/$defs/matchRegexConfig",
                      },
                      "failureMessage": {
                        "type": "string",
                      },
                      "filter": {
                        "oneOf": [
                          {
                            "minLength": 1,
                            "type": "string",
                          },
                          {
                            "$ref": "#/$defs/matchRegexConfig",
                          },
                        ],
                      },
                      "format": {
                        "$ref": "#/$defs/formatOptionsConfig",
                      },
                      "leadingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                      "modifiers": {
                        "additionalItems": false,
                        "items": {
                          "enum": [
                            "default",
                            "namespace",
                          ],
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "prefix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "selector": {
                        "enum": [
                          "import",
                        ],
                        "type": "string",
                      },
                      "suffix": {
                        "$ref": "#/$defs/prefixSuffixConfig",
                      },
                      "trailingUnderscore": {
                        "$ref": "#/$defs/underscoreOptions",
                      },
                    },
                    "required": [
                      "selector",
                      "format",
                    ],
                    "type": "object",
                  },
                ],
              },
              "type": "array",
            },
            "type": "suggestion",
          },
        },
        "no-array-constructor": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow generic \`Array\` constructors",
              "extendsBaseRule": true,
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-array-constructor",
            },
            "fixable": "code",
            "messages": {
              "useLiteral": "The array literal notation [] is preferable.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-array-delete": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow using the \`delete\` operator on array values",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-array-delete",
            },
            "hasSuggestions": true,
            "messages": {
              "noArrayDelete": "Using the \`delete\` operator with an array expression is unsafe.",
              "useSplice": "Use \`array.splice()\` instead.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-base-to-string": {
          "create": [Function],
          "defaultOptions": [
            {
              "checkUnknown": false,
              "ignoredTypeNames": [
                "Error",
                "RegExp",
                "URL",
                "URLSearchParams",
              ],
            },
          ],
          "meta": {
            "docs": {
              "description": "Require \`.toString()\` and \`.toLocaleString()\` to only be called on objects which provide useful information when stringified",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-base-to-string",
            },
            "messages": {
              "baseArrayJoin": "Using \`join()\` for {{name}} {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
              "baseToString": "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "checkUnknown": {
                    "description": "Whether to also check values of type \`unknown\`",
                    "type": "boolean",
                  },
                  "ignoredTypeNames": {
                    "description": "Stringified regular expressions of type names to ignore.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-confusing-non-null-assertion": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow non-null assertion in locations that may be confusing",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
            },
            "hasSuggestions": true,
            "messages": {
              "confusingAssign": "Confusing combination of non-null assertion and assignment like \`a! = b\`, which looks very similar to \`a != b\`.",
              "confusingEqual": "Confusing combination of non-null assertion and equality test like \`a! == b\`, which looks very similar to \`a !== b\`.",
              "confusingOperator": "Confusing combination of non-null assertion and \`{{operator}}\` operator like \`a! {{operator}} b\`, which might be misinterpreted as \`!(a {{operator}} b)\`.",
              "notNeedInAssign": "Remove unnecessary non-null assertion (!) in assignment left-hand side.",
              "notNeedInEqualTest": "Remove unnecessary non-null assertion (!) in equality test.",
              "notNeedInOperator": "Remove possibly unnecessary non-null assertion (!) in the left operand of the \`{{operator}}\` operator.",
              "wrapUpLeft": "Wrap the left-hand side in parentheses to avoid confusion with "{{operator}}" operator.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-confusing-void-expression": {
          "create": [Function],
          "defaultOptions": [
            {
              "ignoreArrowShorthand": false,
              "ignoreVoidOperator": false,
              "ignoreVoidReturningFunctions": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require expressions of type void to appear in statement position",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
              "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
              "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the \`void\` operator.",
              "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the \`return\` statement.",
              "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the \`return\` statement.",
              "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the \`void\` operator.",
              "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the \`void\` operator.",
              "voidExprWrapVoid": "Mark with an explicit \`void\` operator.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreArrowShorthand": {
                    "description": "Whether to ignore "shorthand" \`() =>\` arrow functions: those without \`{ ... }\` braces.",
                    "type": "boolean",
                  },
                  "ignoreVoidOperator": {
                    "description": "Whether to ignore returns that start with the \`void\` operator.",
                    "type": "boolean",
                  },
                  "ignoreVoidReturningFunctions": {
                    "description": "Whether to ignore returns from functions with explicit \`void\` return types and functions with contextual \`void\` return types.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-deprecated": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow using code marked as \`@deprecated\`",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-deprecated",
            },
            "messages": {
              "deprecated": "\`{{name}}\` is deprecated.",
              "deprecatedWithReason": "\`{{name}}\` is deprecated. {{reason}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Type specifiers that can be allowed.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-dupe-class-members": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow duplicate class members",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
            },
            "hasSuggestions": undefined,
            "messages": {
              "unexpected": "Duplicate name '{{name}}'.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-duplicate-enum-values": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow duplicate enum member values",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
            },
            "hasSuggestions": false,
            "messages": {
              "duplicateValue": "Duplicate enum member value {{value}}.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-duplicate-type-constituents": {
          "create": [Function],
          "defaultOptions": [
            {
              "ignoreIntersections": false,
              "ignoreUnions": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow duplicate constituents of union or intersection types",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
            },
            "fixable": "code",
            "messages": {
              "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
              "unnecessary": "Explicit undefined is unnecessary on an optional parameter.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreIntersections": {
                    "description": "Whether to ignore \`&\` intersections.",
                    "type": "boolean",
                  },
                  "ignoreUnions": {
                    "description": "Whether to ignore \`|\` unions.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-dynamic-delete": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow using the \`delete\` operator on computed key expressions",
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
            },
            "fixable": "code",
            "messages": {
              "dynamicDelete": "Do not delete dynamically computed property keys.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-empty-function": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
            },
          ],
          "meta": {
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "docs": {
              "description": "Disallow empty functions",
              "extendsBaseRule": true,
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/no-empty-function",
            },
            "hasSuggestions": true,
            "messages": {
              "suggestComment": "Add comment inside empty {{name}}.",
              "unexpected": "Unexpected empty {{name}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Locations and kinds of functions that are allowed to be empty.",
                    "items": {
                      "enum": [
                        "functions",
                        "arrowFunctions",
                        "generatorFunctions",
                        "methods",
                        "generatorMethods",
                        "getters",
                        "setters",
                        "constructors",
                        "private-constructors",
                        "protected-constructors",
                        "asyncFunctions",
                        "asyncMethods",
                        "decoratedFunctions",
                        "overrideMethods",
                      ],
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-empty-interface": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowSingleExtends": false,
            },
          ],
          "meta": {
            "deprecated": {
              "deprecatedSince": "8.0.0",
              "replacedBy": [
                {
                  "rule": {
                    "name": "@typescript-eslint/no-empty-object-type",
                    "url": "https://typescript-eslint.io/rules/no-empty-object-type",
                  },
                },
              ],
              "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977",
            },
            "docs": {
              "description": "Disallow the declaration of empty interfaces",
              "url": "https://typescript-eslint.io/rules/no-empty-interface",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "noEmpty": "An empty interface is equivalent to \`{}\`.",
              "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype.",
            },
            "replacedBy": [
              "@typescript-eslint/no-empty-object-type",
            ],
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowSingleExtends": {
                    "description": "Whether to allow empty interfaces that extend a single other interface.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-empty-object-type": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowInterfaces": "never",
              "allowObjectTypes": "never",
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow accidentally using the "empty object" type",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-empty-object-type",
            },
            "hasSuggestions": true,
            "messages": {
              "noEmptyInterface": "An empty interface declaration allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
              "noEmptyInterfaceWithSuper": "An interface declaring no members is equivalent to its supertype.",
              "noEmptyObject": "The \`{}\` ("empty object") type allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
              "replaceEmptyInterface": "Replace empty interface with \`{{replacement}}\`.",
              "replaceEmptyInterfaceWithSuper": "Replace empty interface with a type alias.",
              "replaceEmptyObjectType": "Replace \`{}\` with \`{{replacement}}\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowInterfaces": {
                    "description": "Whether to allow empty interfaces.",
                    "enum": [
                      "always",
                      "never",
                      "with-single-extends",
                    ],
                    "type": "string",
                  },
                  "allowObjectTypes": {
                    "description": "Whether to allow empty object type literals.",
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  "allowWithName": {
                    "description": "A stringified regular expression to allow interfaces and object type aliases with the configured name.",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-explicit-any": {
          "create": [Function],
          "defaultOptions": [
            {
              "fixToUnknown": false,
              "ignoreRestArgs": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow the \`any\` type",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-explicit-any",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "suggestNever": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
              "suggestPropertyKey": "Use \`PropertyKey\` instead, this is more explicit than \`keyof any\`.",
              "suggestUnknown": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
              "unexpectedAny": "Unexpected any. Specify a different type.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "fixToUnknown": {
                    "description": "Whether to enable auto-fixing in which the \`any\` type is converted to the \`unknown\` type.",
                    "type": "boolean",
                  },
                  "ignoreRestArgs": {
                    "description": "Whether to ignore rest parameter arrays.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-extra-non-null-assertion": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow extra non-null assertions",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
            },
            "fixable": "code",
            "messages": {
              "noExtraNonNullAssertion": "Forbidden extra non-null assertion.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-extraneous-class": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowConstructorOnly": false,
              "allowEmpty": false,
              "allowStaticOnly": false,
              "allowWithDecorator": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow classes used as namespaces",
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/no-extraneous-class",
            },
            "messages": {
              "empty": "Unexpected empty class.",
              "onlyConstructor": "Unexpected class with only a constructor.",
              "onlyStatic": "Unexpected class with only static properties.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowConstructorOnly": {
                    "description": "Whether to allow extraneous classes that contain only a constructor.",
                    "type": "boolean",
                  },
                  "allowEmpty": {
                    "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                    "type": "boolean",
                  },
                  "allowStaticOnly": {
                    "description": "Whether to allow extraneous classes that only contain static members.",
                    "type": "boolean",
                  },
                  "allowWithDecorator": {
                    "description": "Whether to allow extraneous classes that include a decorator.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-floating-promises": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowForKnownSafeCalls": [],
              "allowForKnownSafePromises": [],
              "checkThenables": false,
              "ignoreIIFE": false,
              "ignoreVoid": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require Promise-like statements to be handled appropriately",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-floating-promises",
            },
            "hasSuggestions": true,
            "messages": {
              "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
              "floatingFixAwait": "Add await operator.",
              "floatingFixVoid": "Add void operator to ignore.",
              "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
              "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
              "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
              "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator. A rejection handler that is not a function will be ignored.",
              "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowForKnownSafeCalls": {
                    "description": "Type specifiers of functions whose calls are safe to float.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                  "allowForKnownSafePromises": {
                    "description": "Type specifiers that are known to be safe to float.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                  "checkThenables": {
                    "description": "Whether to check all "Thenable"s, not just the built-in Promise type.",
                    "type": "boolean",
                  },
                  "ignoreIIFE": {
                    "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                    "type": "boolean",
                  },
                  "ignoreVoid": {
                    "description": "Whether to ignore \`void\` expressions.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-for-in-array": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow iterating over an array with a for-in loop",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-for-in-array",
            },
            "messages": {
              "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-implied-eval": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow the use of \`eval()\`-like functions",
              "extendsBaseRule": true,
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-implied-eval",
            },
            "messages": {
              "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
              "noImpliedEvalError": "Implied eval. Consider passing a function.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-import-type-side-effects": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
              "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
            },
            "fixable": "code",
            "messages": {
              "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-inferrable-types": {
          "create": [Function],
          "defaultOptions": [
            {
              "ignoreParameters": false,
              "ignoreProperties": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/no-inferrable-types",
            },
            "fixable": "code",
            "messages": {
              "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreParameters": {
                    "description": "Whether to ignore function parameters.",
                    "type": "boolean",
                  },
                  "ignoreProperties": {
                    "description": "Whether to ignore class properties.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-invalid-this": {
          "create": [Function],
          "defaultOptions": [
            {
              "capIsConstructor": true,
            },
          ],
          "meta": {
            "defaultOptions": [
              {
                "capIsConstructor": true,
              },
            ],
            "docs": {
              "description": "Disallow \`this\` keywords outside of classes or class-like objects",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-invalid-this",
            },
            "hasSuggestions": undefined,
            "messages": {
              "unexpectedThis": "Unexpected 'this'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "capIsConstructor": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-invalid-void-type": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowAsThisParameter": false,
              "allowInGenericTypeArguments": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow \`void\` type outside of generic or return types",
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
            },
            "messages": {
              "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
              "invalidVoidNotReturn": "void is only valid as a return type.",
              "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
              "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of \`this\` parameter.",
              "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a \`this\` parameter.",
              "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAsThisParameter": {
                    "description": "Whether a \`this\` parameter of a function may be \`void\`.",
                    "type": "boolean",
                  },
                  "allowInGenericTypeArguments": {
                    "description": "Whether \`void\` can be used as a valid value for generic type parameters.",
                    "oneOf": [
                      {
                        "description": "Whether \`void\` can be used as a valid value for all generic type parameters.",
                        "type": "boolean",
                      },
                      {
                        "description": "Allowlist of types that may accept \`void\` as a generic type parameter.",
                        "items": {
                          "type": "string",
                        },
                        "minItems": 1,
                        "type": "array",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-loop-func": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow function declarations that contain unsafe references inside loop statements",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-loop-func",
            },
            "hasSuggestions": undefined,
            "messages": {
              "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-loss-of-precision": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "deprecated": {
              "deprecatedSince": "8.0.0",
              "replacedBy": [
                {
                  "rule": {
                    "name": "no-loss-of-precision",
                    "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision",
                  },
                },
              ],
              "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832",
            },
            "docs": {
              "description": "Disallow literal numbers that lose precision",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
            },
            "hasSuggestions": undefined,
            "messages": {
              "noLossOfPrecision": "This number literal will lose precision at runtime.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-magic-numbers": {
          "create": [Function],
          "defaultOptions": [
            {
              "detectObjects": false,
              "enforceConst": false,
              "ignore": [],
              "ignoreArrayIndexes": false,
              "ignoreEnums": false,
              "ignoreNumericLiteralTypes": false,
              "ignoreReadonlyClassProperties": false,
              "ignoreTypeIndexes": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow magic numbers",
              "extendsBaseRule": true,
              "frozen": true,
              "url": "https://typescript-eslint.io/rules/no-magic-numbers",
            },
            "messages": {
              "noMagic": "No magic number: {{raw}}.",
              "useConst": "Number constants declarations must use 'const'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "detectObjects": {
                    "default": false,
                    "type": "boolean",
                  },
                  "enforceConst": {
                    "default": false,
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "anyOf": [
                        {
                          "type": "number",
                        },
                        {
                          "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$",
                          "type": "string",
                        },
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreArrayIndexes": {
                    "default": false,
                    "type": "boolean",
                  },
                  "ignoreClassFieldInitialValues": {
                    "default": false,
                    "type": "boolean",
                  },
                  "ignoreDefaultValues": {
                    "default": false,
                    "type": "boolean",
                  },
                  "ignoreEnums": {
                    "default": false,
                    "description": "Whether enums used in TypeScript are considered okay.",
                    "type": "boolean",
                  },
                  "ignoreNumericLiteralTypes": {
                    "default": false,
                    "description": "Whether numbers used in TypeScript numeric literal types are considered okay.",
                    "type": "boolean",
                  },
                  "ignoreReadonlyClassProperties": {
                    "default": false,
                    "description": "Whether \`readonly\` class properties are considered okay.",
                    "type": "boolean",
                  },
                  "ignoreTypeIndexes": {
                    "default": false,
                    "description": "Whether numbers used to index types are okay.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-meaningless-void-operator": {
          "create": [Function],
          "defaultOptions": [
            {
              "checkNever": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow the \`void\` operator except when used to discard a value",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
              "removeVoid": "Remove 'void'",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "checkNever": {
                    "description": "Whether to suggest removing \`void\` when the argument has type \`never\`.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-misused-new": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce valid definition of \`new\` and \`constructor\`",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-misused-new",
            },
            "messages": {
              "errorMessageClass": "Class cannot have method named \`new\`.",
              "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-misused-promises": {
          "create": [Function],
          "defaultOptions": [
            {
              "checksConditionals": true,
              "checksSpreads": true,
              "checksVoidReturn": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow Promises in places not designed to handle them",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-misused-promises",
            },
            "messages": {
              "conditional": "Expected non-Promise value in a boolean conditional.",
              "predicate": "Expected a non-Promise value to be returned.",
              "spread": "Expected a non-Promise value to be spreaded in an object.",
              "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
              "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
              "voidReturnInheritedMethod": "Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.",
              "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
              "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
              "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "checksConditionals": {
                    "description": "Whether to warn when a Promise is provided to conditional statements.",
                    "type": "boolean",
                  },
                  "checksSpreads": {
                    "description": "Whether to warn when \`...\` spreading a \`Promise\`.",
                    "type": "boolean",
                  },
                  "checksVoidReturn": {
                    "description": "Whether to warn when a Promise is returned from a function typed as returning \`void\`.",
                    "oneOf": [
                      {
                        "description": "Whether to disable checking all asynchronous functions.",
                        "type": "boolean",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Which forms of functions may have checking disabled.",
                        "properties": {
                          "arguments": {
                            "description": "Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns \`void\`.",
                            "type": "boolean",
                          },
                          "attributes": {
                            "description": "Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns \`void\`.",
                            "type": "boolean",
                          },
                          "inheritedMethods": {
                            "description": "Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return \`void\`.",
                            "type": "boolean",
                          },
                          "properties": {
                            "description": "Disables checking an asynchronous function passed as an object property expected to be a function that returns \`void\`.",
                            "type": "boolean",
                          },
                          "returns": {
                            "description": "Disables checking an asynchronous function returned in a function whose return type is a function that returns \`void\`.",
                            "type": "boolean",
                          },
                          "variables": {
                            "description": "Disables checking an asynchronous function used as a variable whose return type is a function that returns \`void\`.",
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-misused-spread": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow using the spread operator when it might cause unexpected behavior",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-misused-spread",
            },
            "hasSuggestions": true,
            "messages": {
              "addAwait": "Add await operator.",
              "noArraySpreadInObject": "Using the spread operator on an array in an object will result in a list of indices.",
              "noClassDeclarationSpreadInObject": "Using the spread operator on class declarations will spread only their static properties, and will lose their class prototype.",
              "noClassInstanceSpreadInObject": "Using the spread operator on class instances will lose their class prototype.",
              "noFunctionSpreadInObject": "Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?",
              "noIterableSpreadInObject": "Using the spread operator on an Iterable in an object can cause unexpected behavior.",
              "noMapSpreadInObject": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use \`Object.fromEntries(map)\` instead?",
              "noPromiseSpreadInObject": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
              "noStringSpread": "Using the spread operator on a string can mishandle special characters, as can \`.split("")\`.
- \`...\` produces Unicode code points, which will decompose complex emojis into individual emojis
- .split("") produces UTF-16 code units, which breaks rich characters in many languages
Consider using \`Intl.Segmenter\` for locale-aware string decomposition.
Otherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.",
              "replaceMapSpreadInObject": "Replace map spread in object with \`Object.fromEntries()\`",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "An array of type specifiers that are known to be safe to spread.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-mixed-enums": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow enums from having both number and string members",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-mixed-enums",
            },
            "messages": {
              "mixed": "Mixing number and string enums can be confusing.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-namespace": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowDeclarations": false,
              "allowDefinitionFiles": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow TypeScript namespaces",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-namespace",
            },
            "messages": {
              "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowDeclarations": {
                    "description": "Whether to allow \`declare\` with custom TypeScript namespaces.",
                    "type": "boolean",
                  },
                  "allowDefinitionFiles": {
                    "description": "Whether to allow \`declare\` with custom TypeScript namespaces inside definition files.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-non-null-asserted-nullish-coalescing": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
            },
            "hasSuggestions": true,
            "messages": {
              "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
              "suggestRemovingNonNull": "Remove the non-null assertion.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-non-null-asserted-optional-chain": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow non-null assertions after an optional chain expression",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
            },
            "hasSuggestions": true,
            "messages": {
              "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
              "suggestRemovingNonNull": "You should remove the non-null assertion.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-non-null-assertion": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow non-null assertions using the \`!\` postfix operator",
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
            },
            "hasSuggestions": true,
            "messages": {
              "noNonNull": "Forbidden non-null assertion.",
              "suggestOptionalChain": "Consider using the optional chain operator \`?.\` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-redeclare": {
          "create": [Function],
          "defaultOptions": [
            {
              "builtinGlobals": true,
              "ignoreDeclarationMerge": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow variable redeclaration",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-redeclare",
            },
            "messages": {
              "redeclared": "'{{id}}' is already defined.",
              "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
              "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "builtinGlobals": {
                    "description": "Whether to report shadowing of built-in global variables.",
                    "type": "boolean",
                  },
                  "ignoreDeclarationMerge": {
                    "description": "Whether to ignore declaration merges between certain TypeScript declaration types.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-redundant-type-constituents": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow members of unions and intersections that do nothing or override type information",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
            },
            "messages": {
              "errorTypeOverrides": "'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.",
              "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
              "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
              "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
              "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-require-imports": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
              "allowAsImport": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow invocation of \`require()\`",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-require-imports",
            },
            "messages": {
              "noRequireImports": "A \`require()\` style import is forbidden.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Patterns of import paths to allow requiring from.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "allowAsImport": {
                    "description": "Allows \`require\` statements in import declarations.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-restricted-imports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow specified modules when loaded by \`import\`",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-restricted-imports",
            },
            "fixable": undefined,
            "messages": {
              "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
              "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
              "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
              "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
              "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
              "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
              "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
              "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
              "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}",
              "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
              "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
              "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
              "path": "'{{importSource}}' import is restricted from being used.",
              "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
              "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
              "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
              "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
              "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
              "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
              "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
              "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
              "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
            },
            "schema": {
              "anyOf": [
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowImportNames": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "allowTypeImports": {
                            "description": "Whether to allow type-only imports for a path.",
                            "type": "boolean",
                          },
                          "importNames": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                          "message": {
                            "minLength": 1,
                            "type": "string",
                          },
                          "name": {
                            "type": "string",
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "paths": {
                          "items": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowImportNames": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                  "allowTypeImports": {
                                    "description": "Whether to allow type-only imports for a path.",
                                    "type": "boolean",
                                  },
                                  "importNames": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                  },
                                  "message": {
                                    "minLength": 1,
                                    "type": "string",
                                  },
                                  "name": {
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "name",
                                ],
                                "type": "object",
                              },
                            ],
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "patterns": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "allowImportNamePattern": {
                                    "type": "string",
                                  },
                                  "allowImportNames": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "allowTypeImports": {
                                    "description": "Whether to allow type-only imports for a path.",
                                    "type": "boolean",
                                  },
                                  "caseSensitive": {
                                    "type": "boolean",
                                  },
                                  "group": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "importNamePattern": {
                                    "type": "string",
                                  },
                                  "importNames": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "message": {
                                    "minLength": 1,
                                    "type": "string",
                                  },
                                  "regex": {
                                    "type": "string",
                                  },
                                },
                                "required": undefined,
                                "type": "object",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
              ],
            },
            "type": "suggestion",
          },
        },
        "no-restricted-types": {
          "create": [Function],
          "defaultOptions": [
            {},
          ],
          "meta": {
            "docs": {
              "description": "Disallow certain types",
              "url": "https://typescript-eslint.io/rules/no-restricted-types",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "bannedTypeMessage": "Don't use \`{{name}}\` as a type.{{customMessage}}",
              "bannedTypeReplacement": "Replace \`{{name}}\` with \`{{replacement}}\`.",
            },
            "schema": [
              {
                "$defs": {
                  "banConfig": {
                    "oneOf": [
                      {
                        "description": "Bans the type with the default message.",
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                      {
                        "description": "Bans the type with a custom message.",
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "description": "Bans a type.",
                        "properties": {
                          "fixWith": {
                            "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                            "type": "string",
                          },
                          "message": {
                            "description": "Custom error message.",
                            "type": "string",
                          },
                          "suggest": {
                            "description": "Types to suggest replacing with.",
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "types": {
                    "additionalProperties": {
                      "$ref": "#/items/0/$defs/banConfig",
                    },
                    "description": "An object whose keys are the types you want to ban, and the values are error messages.",
                    "type": "object",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-shadow": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
              "builtinGlobals": false,
              "hoist": "functions-and-types",
              "ignoreFunctionTypeParameterNameValueShadow": true,
              "ignoreOnInitialization": false,
              "ignoreTypeValueShadow": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-shadow",
            },
            "messages": {
              "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
              "noShadowGlobal": "'{{name}}' is already a global variable.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Identifier names for which shadowing is allowed.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "builtinGlobals": {
                    "description": "Whether to report shadowing of built-in global variables.",
                    "type": "boolean",
                  },
                  "hoist": {
                    "description": "Whether to report shadowing before outer functions or variables are defined.",
                    "enum": [
                      "all",
                      "functions",
                      "functions-and-types",
                      "never",
                      "types",
                    ],
                    "type": "string",
                  },
                  "ignoreFunctionTypeParameterNameValueShadow": {
                    "description": "Whether to ignore function parameters named the same as a variable.",
                    "type": "boolean",
                  },
                  "ignoreOnInitialization": {
                    "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized.",
                    "type": "boolean",
                  },
                  "ignoreTypeValueShadow": {
                    "description": "Whether to ignore types named the same as a variable.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-this-alias": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowDestructuring": true,
              "allowedNames": [],
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow aliasing \`this\`",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-this-alias",
            },
            "messages": {
              "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
              "thisDestructure": "Unexpected aliasing of members of 'this' to local variables.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowDestructuring": {
                    "description": "Whether to ignore destructurings, such as \`const { props, state } = this\`.",
                    "type": "boolean",
                  },
                  "allowedNames": {
                    "description": "Names to ignore, such as ["self"] for \`const self = this;\`.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-type-alias": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowAliases": "never",
              "allowCallbacks": "never",
              "allowConditionalTypes": "never",
              "allowConstructors": "never",
              "allowGenerics": "never",
              "allowLiterals": "never",
              "allowMappedTypes": "never",
              "allowTupleTypes": "never",
            },
          ],
          "meta": {
            "deprecated": {
              "deprecatedSince": "6.0.0",
              "replacedBy": [
                {
                  "rule": {
                    "name": "@typescript-eslint/consistent-type-definitions",
                    "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
                  },
                },
              ],
              "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229",
            },
            "docs": {
              "description": "Disallow type aliases",
              "url": "https://typescript-eslint.io/rules/no-type-alias",
            },
            "messages": {
              "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
              "noTypeAlias": "Type {{alias}} are not allowed.",
            },
            "schema": [
              {
                "$defs": {
                  "expandedOptions": {
                    "enum": [
                      "always",
                      "never",
                      "in-unions",
                      "in-intersections",
                      "in-unions-and-intersections",
                    ],
                    "type": "string",
                  },
                  "simpleOptions": {
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "allowAliases": {
                    "$ref": "#/items/0/$defs/expandedOptions",
                    "description": "Whether to allow direct one-to-one type aliases.",
                  },
                  "allowCallbacks": {
                    "$ref": "#/items/0/$defs/simpleOptions",
                    "description": "Whether to allow type aliases for callbacks.",
                  },
                  "allowConditionalTypes": {
                    "$ref": "#/items/0/$defs/simpleOptions",
                    "description": "Whether to allow type aliases for conditional types.",
                  },
                  "allowConstructors": {
                    "$ref": "#/items/0/$defs/simpleOptions",
                    "description": "Whether to allow type aliases with constructors.",
                  },
                  "allowGenerics": {
                    "$ref": "#/items/0/$defs/simpleOptions",
                    "description": "Whether to allow type aliases with generic types.",
                  },
                  "allowLiterals": {
                    "$ref": "#/items/0/$defs/expandedOptions",
                    "description": "Whether to allow type aliases with object literal types.",
                  },
                  "allowMappedTypes": {
                    "$ref": "#/items/0/$defs/expandedOptions",
                    "description": "Whether to allow type aliases with mapped types.",
                  },
                  "allowTupleTypes": {
                    "$ref": "#/items/0/$defs/expandedOptions",
                    "description": "Whether to allow type aliases with tuple types.",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unnecessary-boolean-literal-compare": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowComparingNullableBooleansToFalse": true,
              "allowComparingNullableBooleansToTrue": true,
              "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow unnecessary equality comparisons against boolean literals",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
            },
            "fixable": "code",
            "messages": {
              "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
              "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
              "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
              "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
              "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
              "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowComparingNullableBooleansToFalse": {
                    "description": "Whether to allow comparisons between nullable boolean variables and \`false\`.",
                    "type": "boolean",
                  },
                  "allowComparingNullableBooleansToTrue": {
                    "description": "Whether to allow comparisons between nullable boolean variables and \`true\`.",
                    "type": "boolean",
                  },
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unnecessary-condition": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowConstantLoopConditions": "never",
              "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
              "checkTypePredicates": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow conditionals where the type is always truthy or always falsy",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
            },
            "hasSuggestions": true,
            "messages": {
              "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
              "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
              "alwaysNullish": "Unnecessary conditional, left-hand side of \`??\` operator is always \`null\` or \`undefined\`.",
              "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
              "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
              "comparisonBetweenLiteralTypes": "Unnecessary conditional, comparison is always {{trueOrFalse}}, since \`{{left}} {{operator}} {{right}}\` is {{trueOrFalse}}.",
              "never": "Unnecessary conditional, value is \`never\`.",
              "neverNullish": "Unnecessary conditional, expected left-hand side of \`??\` operator to be possibly null or undefined.",
              "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
              "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
              "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
              "suggestRemoveOptionalChain": "Remove unnecessary optional chain",
              "typeGuardAlreadyIsType": "Unnecessary conditional, expression already has the type being checked by the {{typeGuardOrAssertionFunction}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowConstantLoopConditions": {
                    "description": "Whether to ignore constant loop conditions, such as \`while (true)\`.",
                    "oneOf": [
                      {
                        "type": "boolean",
                      },
                      {
                        "enum": [
                          "always",
                          "never",
                          "only-allowed-literals",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                    "type": "boolean",
                  },
                  "checkTypePredicates": {
                    "description": "Whether to check the asserted argument of a type predicate function for unnecessary conditions",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unnecessary-parameter-property-assignment": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow unnecessary assignment of constructor property parameter",
              "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment",
            },
            "messages": {
              "unnecessaryAssign": "This assignment is unnecessary since it is already assigned by a parameter property.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unnecessary-qualifier": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow unnecessary namespace qualifiers",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
            },
            "fixable": "code",
            "messages": {
              "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unnecessary-template-expression": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow unnecessary template expressions",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression",
            },
            "fixable": "code",
            "messages": {
              "noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unnecessary-type-arguments": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow type arguments that are equal to the default",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
            },
            "fixable": "code",
            "messages": {
              "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unnecessary-type-assertion": {
          "create": [Function],
          "defaultOptions": [
            {},
          ],
          "meta": {
            "docs": {
              "description": "Disallow type assertions that do not change the type of an expression",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
            },
            "fixable": "code",
            "messages": {
              "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
              "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "checkLiteralConstAssertions": {
                    "description": "Whether to check literal const assertions.",
                    "type": "boolean",
                  },
                  "typesToIgnore": {
                    "description": "A list of type names to ignore.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unnecessary-type-constraint": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow unnecessary constraints on generic types",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
            },
            "hasSuggestions": true,
            "messages": {
              "removeUnnecessaryConstraint": "Remove the unnecessary \`{{constraint}}\` constraint.",
              "unnecessaryConstraint": "Constraining the generic type \`{{name}}\` to \`{{constraint}}\` does nothing and is unnecessary.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unnecessary-type-conversion": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow conversion idioms when they do not change the type or value of the expression",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-type-conversion",
            },
            "hasSuggestions": true,
            "messages": {
              "suggestRemove": "Remove the type conversion.",
              "suggestSatisfies": "Instead, assert that the value satisfies the {{type}} type.",
              "unnecessaryTypeConversion": "{{violation}} does not change the type or value of the {{type}}.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unnecessary-type-parameters": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow type parameters that aren't used multiple times",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters",
            },
            "hasSuggestions": true,
            "messages": {
              "replaceUsagesWithConstraint": "Replace all usages of type parameter with its constraint.",
              "sole": "Type parameter {{name}} is {{uses}} in the {{descriptor}} signature.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-argument": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow calling a function with a value with type \`any\`",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
            },
            "messages": {
              "unsafeArgument": "Unsafe argument of type {{sender}} assigned to a parameter of type {{receiver}}.",
              "unsafeArraySpread": "Unsafe spread of an {{sender}} array type.",
              "unsafeSpread": "Unsafe spread of an {{sender}} type.",
              "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is {{sender}} and is assigned to a parameter of type {{receiver}}.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-assignment": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow assigning a value with type \`any\` to variables and properties",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
            },
            "messages": {
              "anyAssignment": "Unsafe assignment of an {{sender}} value.",
              "anyAssignmentThis": "Unsafe assignment of an {{sender}} value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
              "unsafeArrayPattern": "Unsafe array destructuring of an {{sender}} array value.",
              "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an {{sender}} value.",
              "unsafeArraySpread": "Unsafe spread of an {{sender}} value in an array.",
              "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
              "unsafeObjectPattern": "Unsafe object destructuring of a property with an {{sender}} value.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-call": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow calling a value with type \`any\`",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-call",
            },
            "messages": {
              "unsafeCall": "Unsafe call of a(n) {{type}} typed value.",
              "unsafeCallThis": "Unsafe call of a(n) {{type}} typed value. \`this\` is typed as {{type}}.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
              "unsafeNew": "Unsafe construction of a(n) {{type}} typed value.",
              "unsafeTemplateTag": "Unsafe use of a(n) {{type}} typed template tag.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-declaration-merging": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow unsafe declaration merging",
              "recommended": "recommended",
              "requiresTypeChecking": false,
              "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
            },
            "messages": {
              "unsafeMerging": "Unsafe declaration merging between classes and interfaces.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-enum-comparison": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow comparing an enum value with a non-enum value",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
            },
            "hasSuggestions": true,
            "messages": {
              "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
              "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
              "replaceValueWithEnum": "Replace with an enum value comparison.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-unsafe-function-type": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow using the unsafe built-in Function type",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-unsafe-function-type",
            },
            "messages": {
              "bannedFunctionType": "The \`Function\` type accepts any function-like value.
Prefer explicitly defining any function parameters and return type.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-member-access": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow member access on a value with type \`any\`",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
            },
            "messages": {
              "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an {{type}} value.",
              "unsafeMemberExpression": "Unsafe member access {{property}} on an {{type}} value.",
              "unsafeThisMemberExpression": "Unsafe member access {{property}} on an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-return": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow returning a value with type \`any\` from a function",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-return",
            },
            "messages": {
              "unsafeReturn": "Unsafe return of a value of type {{type}}.",
              "unsafeReturnAssignment": "Unsafe return of type \`{{sender}}\` from function with return type \`{{receiver}}\`.",
              "unsafeReturnThis": "Unsafe return of a value of type \`{{type}}\`. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-type-assertion": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow type assertions that narrow a type",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion",
            },
            "messages": {
              "unsafeOfAnyTypeAssertion": "Unsafe assertion from {{type}} detected: consider using type guards or a safer assertion.",
              "unsafeToAnyTypeAssertion": "Unsafe assertion to {{type}} detected: consider using a more specific type to ensure safety.",
              "unsafeToUnconstrainedTypeAssertion": "Unsafe type assertion: '{{type}}' could be instantiated with an arbitrary type which could be unrelated to the original type.",
              "unsafeTypeAssertion": "Unsafe type assertion: type '{{type}}' is more narrow than the original type.",
              "unsafeTypeAssertionAssignableToConstraint": "Unsafe type assertion: the original type is assignable to the constraint of type '{{type}}', but '{{type}}' could be instantiated with a different subtype of its constraint.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unsafe-unary-minus": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Require unary negation to take a number",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
            },
            "messages": {
              "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unused-expressions": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowShortCircuit": false,
              "allowTaggedTemplates": false,
              "allowTernary": false,
            },
          ],
          "meta": {
            "defaultOptions": [
              {
                "allowShortCircuit": false,
                "allowTaggedTemplates": false,
                "allowTernary": false,
              },
            ],
            "docs": {
              "description": "Disallow unused expressions",
              "extendsBaseRule": true,
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-unused-expressions",
            },
            "hasSuggestions": undefined,
            "messages": {
              "unusedExpression": "Expected an assignment or function call and instead saw an expression.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowShortCircuit": {
                    "type": "boolean",
                  },
                  "allowTaggedTemplates": {
                    "type": "boolean",
                  },
                  "allowTernary": {
                    "type": "boolean",
                  },
                  "enforceForJSX": {
                    "type": "boolean",
                  },
                  "ignoreDirectives": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unused-vars": {
          "create": [Function],
          "defaultOptions": [
            {},
          ],
          "meta": {
            "docs": {
              "description": "Disallow unused variables",
              "extendsBaseRule": true,
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-unused-vars",
            },
            "messages": {
              "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
              "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
              "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
            },
            "schema": [
              {
                "oneOf": [
                  {
                    "enum": [
                      "all",
                      "local",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "args": {
                        "description": "Whether to check all, some, or no arguments.",
                        "enum": [
                          "all",
                          "after-used",
                          "none",
                        ],
                        "type": "string",
                      },
                      "argsIgnorePattern": {
                        "description": "Regular expressions of argument names to not check for usage.",
                        "type": "string",
                      },
                      "caughtErrors": {
                        "description": "Whether to check catch block arguments.",
                        "enum": [
                          "all",
                          "none",
                        ],
                        "type": "string",
                      },
                      "caughtErrorsIgnorePattern": {
                        "description": "Regular expressions of catch block argument names to not check for usage.",
                        "type": "string",
                      },
                      "destructuredArrayIgnorePattern": {
                        "description": "Regular expressions of destructured array variable names to not check for usage.",
                        "type": "string",
                      },
                      "ignoreClassWithStaticInitBlock": {
                        "description": "Whether to ignore classes with at least one static initialization block.",
                        "type": "boolean",
                      },
                      "ignoreRestSiblings": {
                        "description": "Whether to ignore sibling properties in \`...\` destructurings.",
                        "type": "boolean",
                      },
                      "reportUsedIgnorePattern": {
                        "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                        "type": "boolean",
                      },
                      "vars": {
                        "description": "Whether to check all variables or only locally-declared variables.",
                        "enum": [
                          "all",
                          "local",
                        ],
                        "type": "string",
                      },
                      "varsIgnorePattern": {
                        "description": "Regular expressions of variable names to not check for usage.",
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "problem",
          },
        },
        "no-use-before-define": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowNamedExports": false,
              "classes": true,
              "enums": true,
              "functions": true,
              "ignoreTypeReferences": true,
              "typedefs": true,
              "variables": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow the use of variables before they are defined",
              "extendsBaseRule": true,
              "url": "https://typescript-eslint.io/rules/no-use-before-define",
            },
            "messages": {
              "noUseBeforeDefine": "'{{name}}' was used before it was defined.",
            },
            "schema": [
              {
                "oneOf": [
                  {
                    "enum": [
                      "nofunc",
                    ],
                    "type": "string",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowNamedExports": {
                        "description": "Whether to ignore named exports.",
                        "type": "boolean",
                      },
                      "classes": {
                        "description": "Whether to ignore references to class declarations.",
                        "type": "boolean",
                      },
                      "enums": {
                        "description": "Whether to check references to enums.",
                        "type": "boolean",
                      },
                      "functions": {
                        "description": "Whether to ignore references to function declarations.",
                        "type": "boolean",
                      },
                      "ignoreTypeReferences": {
                        "description": "Whether to ignore type references, such as in type annotations and assertions.",
                        "type": "boolean",
                      },
                      "typedefs": {
                        "description": "Whether to check references to types.",
                        "type": "boolean",
                      },
                      "variables": {
                        "description": "Whether to ignore references to variables.",
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "problem",
          },
        },
        "no-useless-constructor": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow unnecessary constructors",
              "extendsBaseRule": true,
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/no-useless-constructor",
            },
            "hasSuggestions": true,
            "messages": {
              "noUselessConstructor": "Useless constructor.",
              "removeConstructor": "Remove the constructor.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-useless-empty-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow empty exports that don't change anything in a module file",
              "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
            },
            "fixable": "code",
            "hasSuggestions": false,
            "messages": {
              "uselessExport": "Empty export does nothing and can be removed.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-var-requires": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
            },
          ],
          "meta": {
            "deprecated": {
              "deprecatedSince": "8.0.0",
              "replacedBy": [
                {
                  "rule": {
                    "name": "@typescript-eslint/no-require-imports",
                    "url": "https://typescript-eslint.io/rules/no-require-imports",
                  },
                },
              ],
              "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334",
            },
            "docs": {
              "description": "Disallow \`require\` statements except in import statements",
              "url": "https://typescript-eslint.io/rules/no-var-requires",
            },
            "messages": {
              "noVarReqs": "Require statement not part of import statement.",
            },
            "replacedBy": [
              "@typescript-eslint/no-require-imports",
            ],
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Patterns of import paths to allow requiring from.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-wrapper-object-types": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow using confusing built-in primitive class wrappers",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/no-wrapper-object-types",
            },
            "fixable": "code",
            "messages": {
              "bannedClassType": "Prefer using the primitive \`{{preferred}}\` as a type name, rather than the upper-cased \`{{typeName}}\`.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "non-nullable-type-assertion-style": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce non-null assertions over explicit type assertions",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
            },
            "fixable": "code",
            "messages": {
              "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "only-throw-error": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
              "allowRethrowing": true,
              "allowThrowingAny": true,
              "allowThrowingUnknown": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow throwing non-\`Error\` values as exceptions",
              "extendsBaseRule": "no-throw-literal",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/only-throw-error",
            },
            "messages": {
              "object": "Expected an error object to be thrown.",
              "undef": "Do not throw undefined.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Type specifiers that can be thrown.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                  "allowRethrowing": {
                    "description": "Whether to allow rethrowing caught values that are not \`Error\` objects.",
                    "type": "boolean",
                  },
                  "allowThrowingAny": {
                    "description": "Whether to always allow throwing values typed as \`any\`.",
                    "type": "boolean",
                  },
                  "allowThrowingUnknown": {
                    "description": "Whether to always allow throwing values typed as \`unknown\`.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "parameter-properties": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
              "prefer": "class-property",
            },
          ],
          "meta": {
            "docs": {
              "description": "Require or disallow parameter properties in class constructors",
              "url": "https://typescript-eslint.io/rules/parameter-properties",
            },
            "messages": {
              "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
              "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property.",
            },
            "schema": [
              {
                "$defs": {
                  "modifier": {
                    "enum": [
                      "readonly",
                      "private",
                      "protected",
                      "public",
                      "private readonly",
                      "protected readonly",
                      "public readonly",
                    ],
                    "type": "string",
                  },
                },
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Whether to allow certain kinds of properties to be ignored.",
                    "items": {
                      "$ref": "#/items/0/$defs/modifier",
                    },
                    "type": "array",
                  },
                  "prefer": {
                    "description": "Whether to prefer class properties or parameter properties.",
                    "enum": [
                      "class-property",
                      "parameter-property",
                    ],
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "prefer-as-const": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce the use of \`as const\` over literal type",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/prefer-as-const",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "preferConstAssertion": "Expected a \`const\` instead of a literal type assertion.",
              "variableConstAssertion": "Expected a \`const\` assertion instead of a literal type annotation.",
              "variableSuggest": "You should use \`as const\` instead of type annotation.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-destructuring": {
          "create": [Function],
          "defaultOptions": [
            {
              "AssignmentExpression": {
                "array": true,
                "object": true,
              },
              "VariableDeclarator": {
                "array": true,
                "object": true,
              },
            },
            {},
          ],
          "meta": {
            "docs": {
              "description": "Require destructuring from arrays and/or objects",
              "extendsBaseRule": true,
              "frozen": true,
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-destructuring",
            },
            "fixable": "code",
            "hasSuggestions": undefined,
            "messages": {
              "preferDestructuring": "Use {{type}} destructuring.",
            },
            "schema": [
              {
                "oneOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "AssignmentExpression": {
                        "additionalProperties": false,
                        "properties": {
                          "array": {
                            "type": "boolean",
                          },
                          "object": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                      "VariableDeclarator": {
                        "additionalProperties": false,
                        "properties": {
                          "array": {
                            "type": "boolean",
                          },
                          "object": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "array": {
                        "type": "boolean",
                      },
                      "object": {
                        "type": "boolean",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
              {
                "additionalProperties": false,
                "properties": {
                  "enforceForDeclarationWithTypeAnnotation": {
                    "description": "Whether to enforce destructuring on variable declarations with type annotations.",
                    "type": "boolean",
                  },
                  "enforceForRenamedProperties": {
                    "description": "Whether to enforce destructuring that use a different variable name than the property name.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-enum-initializers": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Require each enum member value to be explicitly initialized",
              "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
            },
            "hasSuggestions": true,
            "messages": {
              "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
              "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-find": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-find",
            },
            "hasSuggestions": true,
            "messages": {
              "preferFind": "Prefer .find(...) instead of .filter(...)[0].",
              "preferFindSuggestion": "Use .find(...) instead of .filter(...)[0].",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-for-of": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce the use of \`for-of\` loop over the standard \`for\` loop where possible",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/prefer-for-of",
            },
            "messages": {
              "preferForOf": "Expected a \`for-of\` loop instead of a \`for\` loop with this simple iteration.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-function-type": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce using function types instead of interfaces with call signatures",
              "recommended": "stylistic",
              "url": "https://typescript-eslint.io/rules/prefer-function-type",
            },
            "fixable": "code",
            "messages": {
              "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
              "unexpectedThisOnFunctionOnlyInterface": "\`this\` refers to the function type '{{ interfaceName }}', did you intend to use a generic \`this\` parameter like \`<Self>(this: Self, ...) => Self\` instead?",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-includes": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce \`includes\` method over \`indexOf\` method",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-includes",
            },
            "fixable": "code",
            "messages": {
              "preferIncludes": "Use 'includes()' method instead.",
              "preferStringIncludes": "Use \`String#includes()\` method with a string instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-literal-enum-member": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowBitwiseExpressions": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require all enum members to be literal values",
              "recommended": "strict",
              "requiresTypeChecking": false,
              "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
            },
            "messages": {
              "notLiteral": "Explicit enum value must only be a literal value (string or number).",
              "notLiteralOrBitwiseExpression": "Explicit enum value must only be a literal value (string or number) or a bitwise expression.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowBitwiseExpressions": {
                    "description": "Whether to allow using bitwise expressions in enum initializers.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-namespace-keyword": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Require using \`namespace\` keyword over \`module\` keyword to declare custom TypeScript modules",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
            },
            "fixable": "code",
            "messages": {
              "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-nullish-coalescing": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
              "ignoreBooleanCoercion": false,
              "ignoreConditionalTests": true,
              "ignoreIfStatements": false,
              "ignoreMixedLogicalExpressions": false,
              "ignorePrimitives": {
                "bigint": false,
                "boolean": false,
                "number": false,
                "string": false,
              },
              "ignoreTernaryTests": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
            },
            "hasSuggestions": true,
            "messages": {
              "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
              "preferNullishOverAssignment": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of an assignment expression, as it is simpler to read.",
              "preferNullishOverOr": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of a logical {{ description }} (\`||{{ equals }}\`), as it is a safer operator.",
              "preferNullishOverTernary": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of a ternary expression, as it is simpler to read.",
              "suggestNullish": "Fix to nullish coalescing operator (\`??{{ equals }}\`).",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                    "type": "boolean",
                  },
                  "ignoreBooleanCoercion": {
                    "description": "Whether to ignore arguments to the \`Boolean\` constructor",
                    "type": "boolean",
                  },
                  "ignoreConditionalTests": {
                    "description": "Whether to ignore cases that are located within a conditional test.",
                    "type": "boolean",
                  },
                  "ignoreIfStatements": {
                    "description": "Whether to ignore any if statements that could be simplified by using the nullish coalescing operator.",
                    "type": "boolean",
                  },
                  "ignoreMixedLogicalExpressions": {
                    "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with \`&&\`).",
                    "type": "boolean",
                  },
                  "ignorePrimitives": {
                    "description": "Whether to ignore all (\`true\`) or some (an object with properties) primitive types.",
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "description": "Which primitives types may be ignored.",
                        "properties": {
                          "bigint": {
                            "description": "Ignore bigint primitive types.",
                            "type": "boolean",
                          },
                          "boolean": {
                            "description": "Ignore boolean primitive types.",
                            "type": "boolean",
                          },
                          "number": {
                            "description": "Ignore number primitive types.",
                            "type": "boolean",
                          },
                          "string": {
                            "description": "Ignore string primitive types.",
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                      {
                        "description": "Ignore all primitive types.",
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    ],
                  },
                  "ignoreTernaryTests": {
                    "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-optional-chain": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
              "checkAny": true,
              "checkBigInt": true,
              "checkBoolean": true,
              "checkNumber": true,
              "checkString": true,
              "checkUnknown": true,
              "requireNullish": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "optionalChainSuggest": "Change to an optional chain.",
              "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                    "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                    "type": "boolean",
                  },
                  "checkAny": {
                    "description": "Check operands that are typed as \`any\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                  "checkBigInt": {
                    "description": "Check operands that are typed as \`bigint\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                  "checkBoolean": {
                    "description": "Check operands that are typed as \`boolean\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                  "checkNumber": {
                    "description": "Check operands that are typed as \`number\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                  "checkString": {
                    "description": "Check operands that are typed as \`string\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                  "checkUnknown": {
                    "description": "Check operands that are typed as \`unknown\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                  "requireNullish": {
                    "description": "Skip operands that are not typed with \`null\` and/or \`undefined\` when inspecting "loose boolean" operands.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-promise-reject-errors": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowEmptyReject": false,
              "allowThrowingAny": false,
              "allowThrowingUnknown": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require using Error objects as Promise rejection reasons",
              "extendsBaseRule": true,
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors",
            },
            "messages": {
              "rejectAnError": "Expected the Promise rejection reason to be an Error.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowEmptyReject": {
                    "description": "Whether to allow calls to \`Promise.reject()\` with no arguments.",
                    "type": "boolean",
                  },
                  "allowThrowingAny": {
                    "description": "Whether to always allow throwing values typed as \`any\`.",
                    "type": "boolean",
                  },
                  "allowThrowingUnknown": {
                    "description": "Whether to always allow throwing values typed as \`unknown\`.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-readonly": {
          "create": [Function],
          "defaultOptions": [
            {
              "onlyInlineLambdas": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require private members to be marked as \`readonly\` if they're never modified outside of the constructor",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-readonly",
            },
            "fixable": "code",
            "messages": {
              "preferReadonly": "Member '{{name}}' is never reassigned; mark it as \`readonly\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "onlyInlineLambdas": {
                    "description": "Whether to restrict checking only to members immediately assigned a lambda value.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-readonly-parameter-types": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [],
              "checkParameterProperties": true,
              "ignoreInferredTypes": false,
              "treatMethodsAsReadonly": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require function parameters to be typed as \`readonly\` to prevent accidental mutation of inputs",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
            },
            "messages": {
              "shouldBeReadonly": "Parameter should be a read only type.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "An array of type specifiers to ignore.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                  "checkParameterProperties": {
                    "description": "Whether to check class parameter properties.",
                    "type": "boolean",
                  },
                  "ignoreInferredTypes": {
                    "description": "Whether to ignore parameters which don't explicitly specify a type.",
                    "type": "boolean",
                  },
                  "treatMethodsAsReadonly": {
                    "description": "Whether to treat all mutable methods as though they are readonly.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-reduce-type-parameter": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce using type parameter when calling \`Array#reduce\` instead of using a type assertion",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
            },
            "fixable": "code",
            "messages": {
              "preferTypeParameter": "Unnecessary assertion: Array#reduce accepts a type parameter for the default value.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "prefer-regexp-exec": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce \`RegExp#exec\` over \`String#match\` if no global flag is provided",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
            },
            "fixable": "code",
            "messages": {
              "regExpExecOverStringMatch": "Use the \`RegExp#exec()\` method instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-return-this-type": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce that \`this\` is used when only \`this\` type is returned",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
            },
            "fixable": "code",
            "messages": {
              "useThisType": "Use \`this\` type instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "prefer-string-starts-ends-with": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowSingleElementEquality": "never",
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce using \`String#startsWith\` and \`String#endsWith\` over other equivalent methods of checking substrings",
              "recommended": "stylistic",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
            },
            "fixable": "code",
            "messages": {
              "preferEndsWith": "Use the 'String#endsWith' method instead.",
              "preferStartsWith": "Use 'String#startsWith' method instead.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowSingleElementEquality": {
                    "description": "Whether to allow equality checks against the first or last element of a string.",
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-ts-expect-error": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "deprecated": {
              "deprecatedSince": "7.11.0",
              "replacedBy": [
                {
                  "rule": {
                    "name": "@typescript-eslint/ban-ts-comment",
                    "url": "https://typescript-eslint.io/rules/ban-ts-comment",
                  },
                },
              ],
              "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081",
            },
            "docs": {
              "description": "Enforce using \`@ts-expect-error\` over \`@ts-ignore\`",
              "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
            },
            "fixable": "code",
            "messages": {
              "preferExpectErrorComment": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
            },
            "replacedBy": [
              "@typescript-eslint/ban-ts-comment",
            ],
            "schema": [],
            "type": "problem",
          },
        },
        "promise-function-async": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowAny": true,
              "allowedPromiseNames": [],
              "checkArrowFunctions": true,
              "checkFunctionDeclarations": true,
              "checkFunctionExpressions": true,
              "checkMethodDeclarations": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require any function or method that returns a Promise to be marked async",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/promise-function-async",
            },
            "fixable": "code",
            "messages": {
              "missingAsync": "Functions that return promises must be async.",
              "missingAsyncHybridReturn": "Functions that return promises must be async. Consider adding an explicit return type annotation if the function is intended to return a union of promise and non-promise types.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAny": {
                    "description": "Whether to consider \`any\` and \`unknown\` to be Promises.",
                    "type": "boolean",
                  },
                  "allowedPromiseNames": {
                    "description": "Any extra names of classes or interfaces to be considered Promises.",
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "checkArrowFunctions": {
                    "description": "Whether to check arrow functions.",
                    "type": "boolean",
                  },
                  "checkFunctionDeclarations": {
                    "description": "Whether to check standalone function declarations.",
                    "type": "boolean",
                  },
                  "checkFunctionExpressions": {
                    "description": "Whether to check inline function expressions",
                    "type": "boolean",
                  },
                  "checkMethodDeclarations": {
                    "description": "Whether to check methods on classes and object literals.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "related-getter-setter-pairs": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce that \`get()\` types should be assignable to their equivalent \`set()\` type",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs",
            },
            "messages": {
              "mismatch": "\`get()\` type should be assignable to its equivalent \`set()\` type.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "require-array-sort-compare": {
          "create": [Function],
          "defaultOptions": [
            {
              "ignoreStringArrays": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require \`Array#sort\` and \`Array#toSorted\` calls to always provide a \`compareFunction\`",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
            },
            "messages": {
              "requireCompare": "Require 'compare' argument.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreStringArrays": {
                    "description": "Whether to ignore arrays in which all elements are strings.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "require-await": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Disallow async functions which do not return promises and have no \`await\` expression",
              "extendsBaseRule": true,
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/require-await",
            },
            "hasSuggestions": true,
            "messages": {
              "missingAwait": "{{name}} has no 'await' expression.",
              "removeAsync": "Remove 'async'.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "restrict-plus-operands": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowAny": true,
              "allowBoolean": true,
              "allowNullish": true,
              "allowNumberAndString": true,
              "allowRegExp": true,
              "skipCompoundAssignments": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require both operands of addition to be the same type and be \`bigint\`, \`number\`, or \`string\`",
              "recommended": {
                "recommended": true,
                "strict": [
                  {
                    "allowAny": false,
                    "allowBoolean": false,
                    "allowNullish": false,
                    "allowNumberAndString": false,
                    "allowRegExp": false,
                  },
                ],
              },
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
            },
            "messages": {
              "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got \`{{left}}\` + \`{{right}}\`.",
              "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got \`{{type}}\`.",
              "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got \`{{left}}\` + \`{{right}}\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAny": {
                    "description": "Whether to allow \`any\` typed values.",
                    "type": "boolean",
                  },
                  "allowBoolean": {
                    "description": "Whether to allow \`boolean\` typed values.",
                    "type": "boolean",
                  },
                  "allowNullish": {
                    "description": "Whether to allow potentially \`null\` or \`undefined\` typed values.",
                    "type": "boolean",
                  },
                  "allowNumberAndString": {
                    "description": "Whether to allow \`bigint\`/\`number\` typed values and \`string\` typed values to be added together.",
                    "type": "boolean",
                  },
                  "allowRegExp": {
                    "description": "Whether to allow \`regexp\` typed values.",
                    "type": "boolean",
                  },
                  "skipCompoundAssignments": {
                    "description": "Whether to skip compound assignments such as \`+=\`.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "restrict-template-expressions": {
          "create": [Function],
          "defaultOptions": [
            {
              "allow": [
                {
                  "from": "lib",
                  "name": [
                    "Error",
                    "URL",
                    "URLSearchParams",
                  ],
                },
              ],
              "allowAny": true,
              "allowBoolean": true,
              "allowNullish": true,
              "allowNumber": true,
              "allowRegExp": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce template literal expressions to be of \`string\` type",
              "recommended": {
                "recommended": true,
                "strict": [
                  {
                    "allowAny": false,
                    "allowBoolean": false,
                    "allowNever": false,
                    "allowNullish": false,
                    "allowNumber": false,
                    "allowRegExp": false,
                  },
                ],
              },
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
            },
            "messages": {
              "invalidType": "Invalid type "{{type}}" of template literal expression.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "description": "Types to allow in template expressions.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "file",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "path": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "lib",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                          },
                          "required": [
                            "from",
                            "name",
                          ],
                          "type": "object",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "from": {
                              "enum": [
                                "package",
                              ],
                              "type": "string",
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "items": {
                                    "type": "string",
                                  },
                                  "minItems": 1,
                                  "type": "array",
                                  "uniqueItems": true,
                                },
                              ],
                            },
                            "package": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "from",
                            "name",
                            "package",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                  },
                  "allowAny": {
                    "description": "Whether to allow \`any\` typed values in template expressions.",
                    "type": "boolean",
                  },
                  "allowArray": {
                    "description": "Whether to allow \`array\` typed values in template expressions.",
                    "type": "boolean",
                  },
                  "allowBoolean": {
                    "description": "Whether to allow \`boolean\` typed values in template expressions.",
                    "type": "boolean",
                  },
                  "allowNever": {
                    "description": "Whether to allow \`never\` typed values in template expressions.",
                    "type": "boolean",
                  },
                  "allowNullish": {
                    "description": "Whether to allow \`nullish\` typed values in template expressions.",
                    "type": "boolean",
                  },
                  "allowNumber": {
                    "description": "Whether to allow \`number\` typed values in template expressions.",
                    "type": "boolean",
                  },
                  "allowRegExp": {
                    "description": "Whether to allow \`regexp\` typed values in template expressions.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "return-await": {
          "create": [Function],
          "defaultOptions": [
            "in-try-catch",
          ],
          "meta": {
            "docs": {
              "description": "Enforce consistent awaiting of returned promises",
              "recommended": {
                "strict": [
                  "error-handling-correctness-only",
                ],
              },
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/return-await",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
              "disallowedPromiseAwaitSuggestion": "Remove \`await\` before the expression. Use caution as this may impact control flow.",
              "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
              "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
              "requiredPromiseAwaitSuggestion": "Add \`await\` before the expression. Use caution as this may impact control flow.",
            },
            "schema": [
              {
                "oneOf": [
                  {
                    "description": "Requires that all returned promises be awaited.",
                    "enum": [
                      "always",
                    ],
                    "type": "string",
                  },
                  {
                    "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule does not enforce any particular behavior around whether returned promises are awaited.",
                    "enum": [
                      "error-handling-correctness-only",
                    ],
                    "type": "string",
                  },
                  {
                    "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule enforces that returned promises _must not_ be awaited.",
                    "enum": [
                      "in-try-catch",
                    ],
                    "type": "string",
                  },
                  {
                    "description": "Disallows awaiting any returned promises.",
                    "enum": [
                      "never",
                    ],
                    "type": "string",
                  },
                ],
                "type": "string",
              },
            ],
            "type": "problem",
          },
        },
        "sort-type-constituents": {
          "create": [Function],
          "defaultOptions": [
            {
              "caseSensitive": false,
              "checkIntersections": true,
              "checkUnions": true,
              "groupOrder": [
                "named",
                "keyword",
                "operator",
                "literal",
                "function",
                "import",
                "conditional",
                "object",
                "tuple",
                "intersection",
                "union",
                "nullish",
              ],
            },
          ],
          "meta": {
            "deprecated": {
              "deprecatedSince": "7.13.0",
              "replacedBy": [
                {
                  "plugin": {
                    "name": "eslint-plugin-perfectionist",
                    "url": "https://perfectionist.dev",
                  },
                  "rule": {
                    "name": "perfectionist/sort-intersection-types",
                    "url": "https://perfectionist.dev/rules/sort-intersection-types",
                  },
                },
                {
                  "plugin": {
                    "name": "eslint-plugin-perfectionist",
                    "url": "https://perfectionist.dev",
                  },
                  "rule": {
                    "name": "perfectionist/sort-union-types",
                    "url": "https://perfectionist.dev/rules/sort-union-types",
                  },
                },
              ],
              "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253",
            },
            "docs": {
              "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
              "url": "https://typescript-eslint.io/rules/sort-type-constituents",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "notSorted": "{{type}} type constituents must be sorted.",
              "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
              "suggestFix": "Sort constituents of type (removes all comments).",
            },
            "replacedBy": [
              "perfectionist/sort-intersection-types",
              "perfectionist/sort-union-types",
            ],
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "caseSensitive": {
                    "description": "Whether to sort using case sensitive string comparisons.",
                    "type": "boolean",
                  },
                  "checkIntersections": {
                    "description": "Whether to check intersection types (\`&\`).",
                    "type": "boolean",
                  },
                  "checkUnions": {
                    "description": "Whether to check union types (\`|\`).",
                    "type": "boolean",
                  },
                  "groupOrder": {
                    "description": "Ordering of the groups.",
                    "items": {
                      "enum": [
                        "conditional",
                        "function",
                        "import",
                        "intersection",
                        "keyword",
                        "nullish",
                        "literal",
                        "named",
                        "object",
                        "operator",
                        "tuple",
                        "union",
                      ],
                      "type": "string",
                    },
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "strict-boolean-expressions": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowAny": false,
              "allowNullableBoolean": false,
              "allowNullableEnum": false,
              "allowNullableNumber": false,
              "allowNullableObject": true,
              "allowNullableString": false,
              "allowNumber": true,
              "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
              "allowString": true,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow certain types in boolean expressions",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
            },
            "hasSuggestions": true,
            "messages": {
              "conditionErrorAny": "Unexpected any value in {{context}}. An explicit comparison or type conversion is required.",
              "conditionErrorNullableBoolean": "Unexpected nullable boolean value in {{context}}. Please handle the nullish case explicitly.",
              "conditionErrorNullableEnum": "Unexpected nullable enum value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
              "conditionErrorNullableNumber": "Unexpected nullable number value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
              "conditionErrorNullableObject": "Unexpected nullable object value in {{context}}. An explicit null check is required.",
              "conditionErrorNullableString": "Unexpected nullable string value in {{context}}. Please handle the nullish/empty cases explicitly.",
              "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
              "conditionErrorNumber": "Unexpected number value in {{context}}. An explicit zero/NaN check is required.",
              "conditionErrorObject": "Unexpected object value in {{context}}. The condition is always true.",
              "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
              "conditionErrorString": "Unexpected string value in {{context}}. An explicit empty string check is required.",
              "conditionFixCastBoolean": "Explicitly convert value to a boolean (\`Boolean(value)\`)",
              "conditionFixCompareArrayLengthNonzero": "Change condition to check array's length (\`value.length > 0\`)",
              "conditionFixCompareArrayLengthZero": "Change condition to check array's length (\`value.length === 0\`)",
              "conditionFixCompareEmptyString": "Change condition to check for empty string (\`value !== ""\`)",
              "conditionFixCompareFalse": "Change condition to check if false (\`value === false\`)",
              "conditionFixCompareNaN": "Change condition to check for NaN (\`!Number.isNaN(value)\`)",
              "conditionFixCompareNullish": "Change condition to check for null/undefined (\`value != null\`)",
              "conditionFixCompareStringLength": "Change condition to check string's length (\`value.length !== 0\`)",
              "conditionFixCompareTrue": "Change condition to check if true (\`value === true\`)",
              "conditionFixCompareZero": "Change condition to check for 0 (\`value !== 0\`)",
              "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (\`value ?? ""\`)",
              "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (\`value ?? false\`)",
              "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (\`value ?? 0\`)",
              "explicitBooleanReturnType": "Add an explicit \`boolean\` return type annotation.",
              "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
              "predicateCannotBeAsync": "Predicate function should not be 'async'; expected a boolean return type.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAny": {
                    "description": "Whether to allow \`any\`s in a boolean context.",
                    "type": "boolean",
                  },
                  "allowNullableBoolean": {
                    "description": "Whether to allow nullable \`boolean\`s in a boolean context.",
                    "type": "boolean",
                  },
                  "allowNullableEnum": {
                    "description": "Whether to allow nullable \`enum\`s in a boolean context.",
                    "type": "boolean",
                  },
                  "allowNullableNumber": {
                    "description": "Whether to allow nullable \`number\`s in a boolean context.",
                    "type": "boolean",
                  },
                  "allowNullableObject": {
                    "description": "Whether to allow nullable \`object\`s, \`symbol\`s, and functions in a boolean context.",
                    "type": "boolean",
                  },
                  "allowNullableString": {
                    "description": "Whether to allow nullable \`string\`s in a boolean context.",
                    "type": "boolean",
                  },
                  "allowNumber": {
                    "description": "Whether to allow \`number\`s in a boolean context.",
                    "type": "boolean",
                  },
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                    "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                    "type": "boolean",
                  },
                  "allowString": {
                    "description": "Whether to allow \`string\`s in a boolean context.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "switch-exhaustiveness-check": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowDefaultCaseForExhaustiveSwitch": true,
              "considerDefaultExhaustiveForUnions": false,
              "requireDefaultForNonUnion": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Require switch-case statements to be exhaustive",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
            },
            "hasSuggestions": true,
            "messages": {
              "addMissingCases": "Add branches for missing cases.",
              "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
              "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowDefaultCaseForExhaustiveSwitch": {
                    "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                    "type": "boolean",
                  },
                  "considerDefaultExhaustiveForUnions": {
                    "description": "If 'true', the 'default' clause is used to determine whether the switch statement is exhaustive for union type",
                    "type": "boolean",
                  },
                  "defaultCaseCommentPattern": {
                    "description": "Regular expression for a comment that can indicate an intentionally omitted default case.",
                    "type": "string",
                  },
                  "requireDefaultForNonUnion": {
                    "description": "If 'true', require a 'default' clause for switches on non-union types.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "triple-slash-reference": {
          "create": [Function],
          "defaultOptions": [
            {
              "lib": "always",
              "path": "never",
              "types": "prefer-import",
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
              "recommended": "recommended",
              "url": "https://typescript-eslint.io/rules/triple-slash-reference",
            },
            "messages": {
              "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use \`import\` style instead.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "lib": {
                    "description": "What to enforce for \`/// <reference lib="..." />\` references.",
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  "path": {
                    "description": "What to enforce for \`/// <reference path="..." />\` references.",
                    "enum": [
                      "always",
                      "never",
                    ],
                    "type": "string",
                  },
                  "types": {
                    "description": "What to enforce for \`/// <reference types="..." />\` references.",
                    "enum": [
                      "always",
                      "never",
                      "prefer-import",
                    ],
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "typedef": {
          "create": [Function],
          "defaultOptions": [
            {
              "arrayDestructuring": false,
              "arrowParameter": false,
              "memberVariableDeclaration": false,
              "objectDestructuring": false,
              "parameter": false,
              "propertyDeclaration": false,
              "variableDeclaration": false,
              "variableDeclarationIgnoreFunction": false,
            },
          ],
          "meta": {
            "deprecated": {
              "deprecatedSince": "8.33.0",
              "message": "This is an old rule that is no longer recommended for use.",
            },
            "docs": {
              "description": "Require type annotations in certain places",
              "url": "https://typescript-eslint.io/rules/typedef",
            },
            "messages": {
              "expectedTypedef": "Expected a type annotation.",
              "expectedTypedefNamed": "Expected {{name}} to have a type annotation.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "arrayDestructuring": {
                    "description": "Whether to enforce type annotations on variables declared using array destructuring.",
                    "type": "boolean",
                  },
                  "arrowParameter": {
                    "description": "Whether to enforce type annotations for parameters of arrow functions.",
                    "type": "boolean",
                  },
                  "memberVariableDeclaration": {
                    "description": "Whether to enforce type annotations on member variables of classes.",
                    "type": "boolean",
                  },
                  "objectDestructuring": {
                    "description": "Whether to enforce type annotations on variables declared using object destructuring.",
                    "type": "boolean",
                  },
                  "parameter": {
                    "description": "Whether to enforce type annotations for parameters of functions and methods.",
                    "type": "boolean",
                  },
                  "propertyDeclaration": {
                    "description": "Whether to enforce type annotations for properties of interfaces and types.",
                    "type": "boolean",
                  },
                  "variableDeclaration": {
                    "description": "Whether to enforce type annotations for variable declarations, excluding array and object destructuring.",
                    "type": "boolean",
                  },
                  "variableDeclarationIgnoreFunction": {
                    "description": "Whether to ignore variable declarations for non-arrow and arrow functions.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "unbound-method": {
          "create": [Function],
          "defaultOptions": [
            {
              "ignoreStatic": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Enforce unbound methods are called with their expected scope",
              "recommended": "recommended",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/unbound-method",
            },
            "messages": {
              "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
              "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreStatic": {
                    "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "unified-signatures": {
          "create": [Function],
          "defaultOptions": [
            {
              "ignoreDifferentlyNamedParameters": false,
              "ignoreOverloadsWithDifferentJSDoc": false,
            },
          ],
          "meta": {
            "docs": {
              "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
              "recommended": "strict",
              "url": "https://typescript-eslint.io/rules/unified-signatures",
            },
            "messages": {
              "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
              "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
              "singleParameterDifference": "{{failureStringStart}} taking \`{{type1}} | {{type2}}\`.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreDifferentlyNamedParameters": {
                    "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                    "type": "boolean",
                  },
                  "ignoreOverloadsWithDifferentJSDoc": {
                    "description": "Whether two overloads with different JSDoc comments should be considered different even if their parameter and return types are the same.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "use-unknown-in-catch-callback-variable": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "description": "Enforce typing arguments in Promise rejection callbacks as \`unknown\`",
              "recommended": "strict",
              "requiresTypeChecking": true,
              "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable",
            },
            "hasSuggestions": true,
            "messages": {
              "addUnknownRestTypeAnnotationSuggestion": "Add an explicit \`: [unknown]\` type annotation to the rejection callback rest variable.",
              "addUnknownTypeAnnotationSuggestion": "Add an explicit \`: unknown\` type annotation to the rejection callback variable.",
              "useUnknown": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable.",
              "useUnknownArrayDestructuringPattern": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable. The thrown error may not be iterable.",
              "useUnknownObjectDestructuringPattern": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable. The thrown error may be nullable, or may not have the expected shape.",
              "wrongRestTypeAnnotationSuggestion": "Change existing type annotation to \`: [unknown]\`.",
              "wrongTypeAnnotationSuggestion": "Change existing type annotation to \`: unknown\`.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
      },
    },
    "import-x": {
      "cjsRequire": [Function],
      "configs": {
        "electron": {
          "settings": {
            "import-x/core-modules": [
              "electron",
            ],
          },
        },
        "errors": {
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/default": 2,
            "import-x/export": 2,
            "import-x/named": 2,
            "import-x/namespace": 2,
            "import-x/no-unresolved": 2,
          },
        },
        "flat/electron": {
          "name": "import-x/electron",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/core-modules": [
              "electron",
            ],
          },
        },
        "flat/errors": {
          "name": "import-x/errors",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": 2,
            "import-x/export": 2,
            "import-x/named": 2,
            "import-x/namespace": 2,
            "import-x/no-unresolved": 2,
          },
        },
        "flat/react": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
          },
          "name": "import-x/react",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/extensions": [
              ".js",
              ".jsx",
              ".mjs",
              ".cjs",
            ],
          },
        },
        "flat/react-native": {
          "name": "import-x/react-native",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/resolver": {
              "node": {
                "extensions": [
                  ".js",
                  ".web.js",
                  ".ios.js",
                  ".android.js",
                ],
              },
            },
          },
        },
        "flat/recommended": {
          "name": "import-x/recommended",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": "error",
            "import-x/export": "error",
            "import-x/named": "error",
            "import-x/namespace": "error",
            "import-x/no-duplicates": "warn",
            "import-x/no-named-as-default": "warn",
            "import-x/no-named-as-default-member": "warn",
            "import-x/no-unresolved": "error",
          },
        },
        "flat/stage-0": {
          "name": "import-x/stage-0",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-deprecated": 1,
          },
        },
        "flat/typescript": {
          "name": "import-x/typescript",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/named": "off",
          },
          "settings": {
            "import-x/extensions": [
              ".ts",
              ".tsx",
              ".cts",
              ".mts",
              ".js",
              ".jsx",
              ".cjs",
              ".mjs",
            ],
            "import-x/external-module-folders": [
              "node_modules",
              "node_modules/@types",
            ],
            "import-x/parsers": {
              "@typescript-eslint/parser": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
              ],
            },
            "import-x/resolver": {
              "typescript": true,
            },
          },
        },
        "flat/warnings": {
          "name": "import-x/warnings",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-duplicates": 1,
            "import-x/no-named-as-default": 1,
            "import-x/no-named-as-default-member": 1,
            "import-x/no-rename-default": 1,
          },
        },
        "react": {
          "parserOptions": {
            "ecmaFeatures": {
              "jsx": true,
            },
          },
          "settings": {
            "import-x/extensions": [
              ".js",
              ".jsx",
            ],
          },
        },
        "react-native": {
          "settings": {
            "import-x/resolver": {
              "node": {
                "extensions": [
                  ".js",
                  ".web.js",
                  ".ios.js",
                  ".android.js",
                ],
              },
            },
          },
        },
        "recommended": {
          "parserOptions": {
            "ecmaVersion": 2018,
            "sourceType": "module",
          },
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/default": "error",
            "import-x/export": "error",
            "import-x/named": "error",
            "import-x/namespace": "error",
            "import-x/no-duplicates": "warn",
            "import-x/no-named-as-default": "warn",
            "import-x/no-named-as-default-member": "warn",
            "import-x/no-unresolved": "error",
          },
        },
        "stage-0": {
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/no-deprecated": 1,
          },
        },
        "typescript": {
          "rules": {
            "import-x/named": "off",
          },
          "settings": {
            "import-x/extensions": [
              ".ts",
              ".tsx",
              ".cts",
              ".mts",
              ".js",
              ".jsx",
              ".cjs",
              ".mjs",
            ],
            "import-x/external-module-folders": [
              "node_modules",
              "node_modules/@types",
            ],
            "import-x/parsers": {
              "@typescript-eslint/parser": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
              ],
            },
            "import-x/resolver": {
              "typescript": true,
            },
          },
        },
        "warnings": {
          "plugins": [
            "import-x",
          ],
          "rules": {
            "import-x/no-duplicates": 1,
            "import-x/no-named-as-default": 1,
            "import-x/no-named-as-default-member": 1,
            "import-x/no-rename-default": 1,
          },
        },
      },
      "createNodeResolver": [Function],
      "flatConfigs": {
        "electron": {
          "name": "import-x/electron",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/core-modules": [
              "electron",
            ],
          },
        },
        "errors": {
          "name": "import-x/errors",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": 2,
            "import-x/export": 2,
            "import-x/named": 2,
            "import-x/namespace": 2,
            "import-x/no-unresolved": 2,
          },
        },
        "react": {
          "languageOptions": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
          },
          "name": "import-x/react",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/extensions": [
              ".js",
              ".jsx",
              ".mjs",
              ".cjs",
            ],
          },
        },
        "react-native": {
          "name": "import-x/react-native",
          "plugins": {
            "import-x": [Circular],
          },
          "settings": {
            "import-x/resolver": {
              "node": {
                "extensions": [
                  ".js",
                  ".web.js",
                  ".ios.js",
                  ".android.js",
                ],
              },
            },
          },
        },
        "recommended": {
          "name": "import-x/recommended",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/default": "error",
            "import-x/export": "error",
            "import-x/named": "error",
            "import-x/namespace": "error",
            "import-x/no-duplicates": "warn",
            "import-x/no-named-as-default": "warn",
            "import-x/no-named-as-default-member": "warn",
            "import-x/no-unresolved": "error",
          },
        },
        "stage-0": {
          "name": "import-x/stage-0",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-deprecated": 1,
          },
        },
        "typescript": {
          "name": "import-x/typescript",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/named": "off",
          },
          "settings": {
            "import-x/extensions": [
              ".ts",
              ".tsx",
              ".cts",
              ".mts",
              ".js",
              ".jsx",
              ".cjs",
              ".mjs",
            ],
            "import-x/external-module-folders": [
              "node_modules",
              "node_modules/@types",
            ],
            "import-x/parsers": {
              "@typescript-eslint/parser": [
                ".ts",
                ".tsx",
                ".cts",
                ".mts",
              ],
            },
            "import-x/resolver": {
              "typescript": true,
            },
          },
        },
        "warnings": {
          "name": "import-x/warnings",
          "plugins": {
            "import-x": [Circular],
          },
          "rules": {
            "import-x/no-duplicates": 1,
            "import-x/no-named-as-default": 1,
            "import-x/no-named-as-default-member": 1,
            "import-x/no-rename-default": 1,
          },
        },
      },
      "importXResolverCompat": [Function],
      "meta": {
        "name": "eslint-plugin-import-x",
        "version": "4.16.1",
      },
      "rules": {
        "consistent-type-specifier-style": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce or ban the use of inline type-only markers for named imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/consistent-type-specifier-style.md",
            },
            "fixable": "code",
            "messages": {
              "inline": "Prefer using inline {{kind}} specifiers instead of a top-level {{kind}}-only import.",
              "topLevel": "Prefer using a top-level {{kind}}-only import instead of inline {{kind}} specifiers.",
            },
            "schema": [
              {
                "default": "prefer-top-level",
                "enum": [
                  "prefer-top-level",
                  "prefer-inline",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure a default export is present, given a default import.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/default.md",
            },
            "messages": {
              "noDefaultExport": "No default export found in imported module "{{module}}".",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "dynamic-import-chunkname": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/dynamic-import-chunkname.md",
            },
            "hasSuggestions": true,
            "messages": {
              "blockComment": "dynamic imports require a /* foo */ style comment, not a // foo comment",
              "chunknameFormat": "dynamic imports require a leading comment in the form /* {{format}} */",
              "leadingComment": "dynamic imports require a leading comment with the webpack chunkname",
              "paddedSpaces": "dynamic imports require a block comment padded with spaces - /* foo */",
              "webpackComment": "dynamic imports require a "webpack" comment with valid syntax",
              "webpackEagerModeNoChunkName": "dynamic imports using eager mode do not need a webpackChunkName",
              "webpackRemoveChunkName": "Remove webpackChunkName",
              "webpackRemoveEagerMode": "Remove webpackMode",
            },
            "schema": [
              {
                "properties": {
                  "allowEmpty": {
                    "type": "boolean",
                  },
                  "importFunctions": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "webpackChunknameFormat": {
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid any invalid exports, i.e. re-export of the same name.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/export.md",
            },
            "messages": {
              "multiDefault": "Multiple default exports.",
              "multiNamed": "Multiple exports of name '{{name}}'.",
              "noNamed": "No named exports found in module '{{module}}'.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "exports-last": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Ensure all exports appear after other statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/exports-last.md",
            },
            "messages": {
              "end": "Export statements should appear at the end of the file",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "extensions": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Ensure consistent use of file extension within the import path.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/extensions.md",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "addMissing": "Add "{{extension}}" file extension from "{{importPath}}" into "{{fixedImportPath}}"",
              "missing": "Missing file extension for "{{importPath}}"",
              "missingKnown": "Missing file extension "{{extension}}" for "{{importPath}}"",
              "removeUnexpected": "Remove unexpected "{{extension}}" file extension from "{{importPath}}" into "{{fixedImportPath}}"",
              "unexpected": "Unexpected use of file extension "{{extension}}" for "{{importPath}}"",
            },
            "schema": {
              "anyOf": [
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "always",
                        "ignorePackages",
                        "never",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "always",
                        "ignorePackages",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "properties": {
                        "checkTypeImports": {
                          "type": "boolean",
                        },
                        "fix": {
                          "type": "boolean",
                        },
                        "ignorePackages": {
                          "type": "boolean",
                        },
                        "pathGroupOverrides": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "action": {
                                "enum": [
                                  "enforce",
                                  "ignore",
                                ],
                                "type": "string",
                              },
                              "pattern": {
                                "type": "string",
                              },
                              "patternOptions": {
                                "type": "object",
                              },
                            },
                            "required": [
                              "pattern",
                              "action",
                            ],
                            "type": "object",
                          },
                          "type": "array",
                        },
                        "pattern": {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "ignorePackages",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "properties": {
                        "checkTypeImports": {
                          "type": "boolean",
                        },
                        "fix": {
                          "type": "boolean",
                        },
                        "ignorePackages": {
                          "type": "boolean",
                        },
                        "pathGroupOverrides": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "action": {
                                "enum": [
                                  "enforce",
                                  "ignore",
                                ],
                                "type": "string",
                              },
                              "pattern": {
                                "type": "string",
                              },
                              "patternOptions": {
                                "type": "object",
                              },
                            },
                            "required": [
                              "pattern",
                              "action",
                            ],
                            "type": "object",
                          },
                          "type": "array",
                        },
                        "pattern": {
                          "patternProperties": {
                            ".*": {
                              "enum": [
                                "always",
                                "ignorePackages",
                                "never",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "always",
                        "ignorePackages",
                        "never",
                      ],
                      "type": "string",
                    },
                    {
                      "patternProperties": {
                        ".*": {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "patternProperties": {
                        ".*": {
                          "enum": [
                            "always",
                            "ignorePackages",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
              ],
            },
            "type": "suggestion",
          },
        },
        "first": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Ensure all imports appear before other statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/first.md",
            },
            "fixable": "code",
            "messages": {
              "absolute": "Absolute imports should come before relative imports.",
              "order": "Import in body of module; reorder to top.",
            },
            "schema": [
              {
                "enum": [
                  "absolute-first",
                  "disable-absolute-first",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "group-exports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Prefer named exports to be grouped together in a single export declaration.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/group-exports.md",
            },
            "messages": {
              "AssignmentExpression": "Multiple CommonJS exports; consolidate all exports into a single assignment to \`module.exports\`",
              "ExportNamedDeclaration": "Multiple named export declarations; consolidate all named exports into a single export declaration",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "imports-first": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "deprecated": {
              "deprecatedSince": "2.0.0",
              "message": "Replaced by \`import-x/first\`.",
              "replacedBy": [
                {
                  "message": "Replaced by \`import-x/first\`.",
                  "rule": {
                    "name": "first",
                    "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/first.md",
                  },
                },
              ],
              "url": "https://github.com/import-js/eslint-plugin-import/blob/main/CHANGELOG.md#changed-24",
            },
            "docs": {
              "category": "Style guide",
              "description": "Replaced by \`import-x/first\`.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/imports-first.md",
            },
            "fixable": "code",
            "messages": {
              "absolute": "Absolute imports should come before relative imports.",
              "order": "Import in body of module; reorder to top.",
            },
            "schema": [
              {
                "enum": [
                  "absolute-first",
                  "disable-absolute-first",
                ],
                "type": "string",
              },
            ],
            "type": "suggestion",
          },
        },
        "max-dependencies": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce the maximum number of dependencies a module can have.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/max-dependencies.md",
            },
            "messages": {
              "max": "Maximum number of dependencies ({{max}}) exceeded.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "ignoreTypeImports": {
                    "type": "boolean",
                  },
                  "max": {
                    "type": "number",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "named": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure named imports correspond to a named export in the remote file.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/named.md",
            },
            "messages": {
              "notFound": "{{name}} not found in '{{path}}'",
              "notFoundDeep": "{{name}} not found via {{deepPath}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "commonjs": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "namespace": {
          "create": [Function],
          "defaultOptions": [
            {
              "allowComputed": false,
            },
          ],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/namespace.md",
            },
            "messages": {
              "computedReference": "Unable to validate computed reference to imported namespace '{{namespace}}'.",
              "namespaceMember": "Assignment to member of namespace '{{namespace}}'.",
              "noNamesFound": "No exported names found in module '{{module}}'.",
              "notFoundInNamespace": "'{{name}}' not found in imported namespace '{{namepath}}'.",
              "notFoundInNamespaceDeep": "'{{name}}' not found in deeply imported namespace '{{namepath}}'.",
              "topLevelNames": "Only destructure top-level names.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowComputed": {
                    "default": false,
                    "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "newline-after-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce a newline after import statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/newline-after-import.md",
            },
            "fixable": "whitespace",
            "messages": {
              "newline": "Expected {{count}} empty line{{lineSuffix}} after {{type}} statement not followed by another {{type}}.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "considerComments": {
                    "type": "boolean",
                  },
                  "count": {
                    "minimum": 1,
                    "type": "integer",
                  },
                  "exactCount": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "layout",
          },
        },
        "no-absolute-path": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid import of modules using absolute paths.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-absolute-path.md",
            },
            "fixable": "code",
            "messages": {
              "absolute": "Do not import modules using an absolute path",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-amd": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid AMD \`require\` and \`define\` calls.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-amd.md",
            },
            "messages": {
              "amd": "Expected imports instead of AMD {{type}}().",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-anonymous-default-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid anonymous values as default exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-anonymous-default-export.md",
            },
            "messages": {
              "anonymous": "Unexpected default export of anonymous {{type}}",
              "assign": "Assign {{type}} to a variable before exporting as module default",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowAnonymousClass": {
                    "description": "If \`false\`, will report default export of an anonymous class",
                    "type": "boolean",
                  },
                  "allowAnonymousFunction": {
                    "description": "If \`false\`, will report default export of an anonymous function",
                    "type": "boolean",
                  },
                  "allowArray": {
                    "description": "If \`false\`, will report default export of an array",
                    "type": "boolean",
                  },
                  "allowArrowFunction": {
                    "description": "If \`false\`, will report default export of an arrow function",
                    "type": "boolean",
                  },
                  "allowCallExpression": {
                    "description": "If \`false\`, will report default export of a function call",
                    "type": "boolean",
                  },
                  "allowLiteral": {
                    "description": "If \`false\`, will report default export of a literal",
                    "type": "boolean",
                  },
                  "allowNew": {
                    "description": "If \`false\`, will report default export of a class instantiation",
                    "type": "boolean",
                  },
                  "allowObject": {
                    "description": "If \`false\`, will report default export of an object expression",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-commonjs": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-commonjs.md",
            },
            "messages": {
              "export": "Expected "export" or "export default"",
              "import": "Expected "import" instead of "require()"",
            },
            "schema": {
              "anyOf": [
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "enum": [
                        "allow-primitive-modules",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "array",
                },
                {
                  "additionalItems": false,
                  "items": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowConditionalRequire": {
                          "type": "boolean",
                        },
                        "allowPrimitiveModules": {
                          "type": "boolean",
                        },
                        "allowRequire": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                  "type": "array",
                },
              ],
            },
            "type": "suggestion",
          },
        },
        "no-cycle": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid a module from importing a module with a dependency path back to itself.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-cycle.md",
            },
            "messages": {
              "cycle": "Dependency cycle detected",
              "cycleSource": "Dependency cycle via "{{source}}"",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allowUnsafeDynamicCyclicDependency": {
                    "default": false,
                    "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                    "type": "boolean",
                  },
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreExternal": {
                    "default": false,
                    "description": "ignore external modules",
                    "type": "boolean",
                  },
                  "maxDepth": {
                    "anyOf": [
                      {
                        "description": "maximum dependency depth to traverse",
                        "minimum": 1,
                        "type": "integer",
                      },
                      {
                        "enum": [
                          "∞",
                        ],
                        "type": "string",
                      },
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-default-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid default exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-default-export.md",
            },
            "messages": {
              "noAliasDefault": "Do not alias \`{{local}}\` as \`default\`. Just export \`{{local}}\` itself instead.",
              "preferNamed": "Prefer named exports.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-deprecated": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-deprecated.md",
            },
            "messages": {
              "deprecated": "Deprecated: consider to find an alternative.",
              "deprecatedDesc": "Deprecated: {{description}}",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-duplicates": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid repeated import of the same module in multiple places.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-duplicates.md",
            },
            "fixable": "code",
            "messages": {
              "duplicate": "'{{module}}' imported multiple times.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "considerQueryString": {
                    "type": "boolean",
                  },
                  "prefer-inline": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-dynamic-require": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid \`require()\` calls with expressions.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-dynamic-require.md",
            },
            "messages": {
              "import": "Calls to import() should use string literals",
              "require": "Calls to require() should use string literals",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "esmodule": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-empty-named-blocks": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid empty named import blocks.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-empty-named-blocks.md",
            },
            "fixable": "code",
            "hasSuggestions": true,
            "messages": {
              "emptyImport": "Remove empty import block",
              "emptyNamed": "Unexpected empty named import block",
              "unused": "Remove unused import",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-extraneous-dependencies": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid the use of extraneous packages.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-extraneous-dependencies.md",
            },
            "messages": {
              "devDep": "'{{packageName}}' should be listed in the project's dependencies, not devDependencies.",
              "missing": "'{{packageName}}' should be listed in the project's dependencies. Run 'npm i {{packageName}}' to add it",
              "optDep": "'{{packageName}}' should be listed in the project's dependencies, not optionalDependencies.",
              "pkgNotFound": "The package.json file could not be found.",
              "pkgUnparsable": "The package.json file could not be parsed: {{error}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "bundledDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "devDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "includeInternal": {
                    "type": [
                      "boolean",
                    ],
                  },
                  "includeTypes": {
                    "type": [
                      "boolean",
                    ],
                  },
                  "optionalDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "packageDir": {
                    "type": [
                      "string",
                      "array",
                    ],
                  },
                  "peerDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "whitelist": {
                    "type": [
                      "array",
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-import-module-exports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid import statements with CommonJS module.exports.",
              "recommended": true,
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-import-module-exports.md",
            },
            "fixable": "code",
            "messages": {
              "notAllowed": "Cannot use import declarations in modules that export using CommonJS (module.exports = 'foo' or exports.bar = 'hi')",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "exceptions": {
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-internal-modules": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid importing the submodules of other modules.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-internal-modules.md",
            },
            "messages": {
              "noAllowed": "Reaching to "{{importPath}}" is not allowed.",
            },
            "schema": [
              {
                "anyOf": [
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "forbid": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                    },
                    "type": "object",
                  },
                ],
              },
            ],
            "type": "suggestion",
          },
        },
        "no-mutable-exports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-mutable-exports.md",
            },
            "messages": {
              "noMutable": "Exporting mutable '{{kind}}' binding, use 'const' instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-named-as-default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid use of exported name as identifier of default export.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-as-default.md",
            },
            "messages": {
              "default": "Using exported name '{{name}}' as identifier for default export.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-named-as-default-member": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid use of exported name as property of default export.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-as-default-member.md",
            },
            "messages": {
              "member": "Caution: \`{{objectName}}\` also has a named export \`{{propName}}\`. Check if you meant to write \`import {{{propName}}} from '{{sourcePath}}'\` instead.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-named-default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid named default exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-default.md",
            },
            "messages": {
              "default": "Use default import syntax to import '{{importName}}'.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-named-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid named exports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-named-export.md",
            },
            "messages": {
              "noAllowed": "Named exports are not allowed.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
        "no-namespace": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-namespace.md",
            },
            "fixable": "code",
            "messages": {
              "noNamespace": "Unexpected namespace import.",
            },
            "schema": [
              {
                "properties": {
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-nodejs-modules": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid Node.js builtin modules.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-nodejs-modules.md",
            },
            "messages": {
              "builtin": "Do not import Node.js builtin module "{{moduleName}}"",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-relative-packages": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid importing packages through relative paths.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-relative-packages.md",
            },
            "fixable": "code",
            "messages": {
              "noAllowed": "Relative import from another package is not allowed. Use \`{{properImport}}\` instead of \`{{importPath}}\`",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-relative-parent-imports": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid importing modules from parent directories.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-relative-parent-imports.md",
            },
            "messages": {
              "noAllowed": "Relative imports from parent directories are not allowed. Please either pass what you're importing through at runtime (dependency injection), move \`{{filename}}\` to same directory as \`{{depPath}}\` or consider making \`{{depPath}}\` a package.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-rename-default": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid importing a default export by a different name.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-rename-default.md",
            },
            "messages": {
              "renameDefault": "Caution: \`{{importBasename}}\` has a default export \`{{defaultExportName}}\`. This {{requiresOrImports}} \`{{defaultExportName}}\` as \`{{importName}}\`. Check if you meant to write \`{{suggestion}}\` instead.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "commonjs": {
                    "default": false,
                    "type": "boolean",
                  },
                  "preventRenamingBindings": {
                    "default": true,
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-restricted-paths": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Enforce which files can be imported in a given folder.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-restricted-paths.md",
            },
            "messages": {
              "glob": "Restricted path exceptions must be glob patterns when \`from\` contains glob patterns",
              "mixedGlob": "Restricted path \`from\` must contain either only glob patterns or none",
              "path": "Restricted path exceptions must be descendants of the configured \`from\` path for that zone.",
              "zone": "Unexpected path "{{importPath}}" imported in restricted zone.{{extra}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "basePath": {
                    "type": "string",
                  },
                  "zones": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "except": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        "from": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                        "message": {
                          "type": "string",
                        },
                        "target": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-self-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid a module from importing itself.",
              "recommended": true,
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-self-import.md",
            },
            "messages": {
              "self": "Module imports itself.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "no-unassigned-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Forbid unassigned imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unassigned-import.md",
            },
            "messages": {
              "unassigned": "Imported module should be assigned",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "allow": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "devDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "optionalDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                  "peerDependencies": {
                    "type": [
                      "boolean",
                      "array",
                    ],
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-unresolved": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Ensure imports point to a file/module that can be resolved.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unresolved.md",
            },
            "messages": {
              "casingMismatch": "Casing of {{module}} does not match the underlying filesystem.",
              "unresolved": "Unable to resolve path to module '{{module}}'.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "amd": {
                    "type": "boolean",
                  },
                  "caseSensitive": {
                    "default": true,
                    "type": "boolean",
                  },
                  "caseSensitiveStrict": {
                    "type": "boolean",
                  },
                  "commonjs": {
                    "type": "boolean",
                  },
                  "esmodule": {
                    "type": "boolean",
                  },
                  "ignore": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "no-unused-modules": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Helpful warnings",
              "description": "Forbid modules without exports, or exports without matching import in another module.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-unused-modules.md",
            },
            "messages": {
              "notFound": "No exports found",
              "unused": "exported declaration '{{value}}' not used within other modules",
            },
            "schema": [
              {
                "anyOf": [
                  {
                    "properties": {
                      "src": {
                        "minItems": 1,
                        "type": "array",
                      },
                      "unusedExports": {
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    },
                    "required": [
                      "unusedExports",
                    ],
                    "type": "object",
                  },
                  {
                    "properties": {
                      "missingExports": {
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    },
                    "required": [
                      "missingExports",
                    ],
                    "type": "object",
                  },
                ],
                "properties": {
                  "ignoreExports": {
                    "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "ignoreUnusedTypeExports": {
                    "description": "ignore type exports without any usage",
                    "type": "boolean",
                  },
                  "missingExports": {
                    "description": "report modules without any exports",
                    "type": "boolean",
                  },
                  "src": {
                    "description": "files/paths to be analyzed (only for unused exports)",
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "unusedExports": {
                    "description": "report exports without any usage",
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-useless-path-segments": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid unnecessary path segments in import and require statements.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-useless-path-segments.md",
            },
            "fixable": "code",
            "messages": {
              "useless": "Useless path segments for "{{importPath}}", should be "{{proposedPath}}"",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "commonjs": {
                    "type": "boolean",
                  },
                  "noUselessIndex": {
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "no-webpack-loader-syntax": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Static analysis",
              "description": "Forbid webpack loader syntax in imports.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/no-webpack-loader-syntax.md",
            },
            "messages": {
              "unexpected": "Unexpected '!' in '{{name}}'. Do not use import syntax to configure webpack loaders.",
            },
            "schema": [],
            "type": "problem",
          },
        },
        "order": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce a convention in module import order.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/order.md",
            },
            "fixable": "code",
            "messages": {
              "error": "{{error}}",
              "noLineBetweenGroups": "There should be no empty line between import groups",
              "noLineBetweenSingleLineImport": "There should be no empty lines between this single-line import and the single-line import that follows it",
              "noLineWithinGroup": "There should be no empty line within import group",
              "oneLineBetweenGroups": "There should be at least one empty line between import groups",
              "oneLineBetweenTheMultiLineImport": "There should be at least one empty line between this import and the multi-line import that follows it",
              "oneLineBetweenThisMultiLineImport": "There should be at least one empty line between this multi-line import and the import that follows it",
              "order": "{{secondImport}} should occur {{order}} {{firstImport}}",
            },
            "schema": [
              {
                "additionalProperties": false,
                "dependencies": {
                  "consolidateIslands": {
                    "anyOf": [
                      {
                        "properties": {
                          "newlines-between": {
                            "enum": [
                              "always-and-inside-groups",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "newlines-between",
                        ],
                        "type": "object",
                      },
                      {
                        "properties": {
                          "newlines-between-types": {
                            "enum": [
                              "always-and-inside-groups",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "newlines-between-types",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "newlines-between-types": {
                    "properties": {
                      "sortTypesGroup": {
                        "enum": [
                          true,
                        ],
                        "type": "boolean",
                      },
                    },
                    "required": [
                      "sortTypesGroup",
                    ],
                    "type": "object",
                  },
                },
                "properties": {
                  "alphabetize": {
                    "additionalProperties": false,
                    "properties": {
                      "caseInsensitive": {
                        "default": false,
                        "type": "boolean",
                      },
                      "order": {
                        "default": "ignore",
                        "enum": [
                          "ignore",
                          "asc",
                          "desc",
                        ],
                        "type": "string",
                      },
                      "orderImportKind": {
                        "default": "ignore",
                        "enum": [
                          "ignore",
                          "asc",
                          "desc",
                        ],
                        "type": "string",
                      },
                    },
                    "type": "object",
                  },
                  "consolidateIslands": {
                    "enum": [
                      "inside-groups",
                      "never",
                    ],
                    "type": "string",
                  },
                  "distinctGroup": {
                    "default": true,
                    "type": "boolean",
                  },
                  "groups": {
                    "type": "array",
                  },
                  "named": {
                    "default": false,
                    "oneOf": [
                      {
                        "type": "boolean",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "cjsExports": {
                            "type": "boolean",
                          },
                          "enabled": {
                            "type": "boolean",
                          },
                          "export": {
                            "type": "boolean",
                          },
                          "import": {
                            "type": "boolean",
                          },
                          "require": {
                            "type": "boolean",
                          },
                          "types": {
                            "enum": [
                              "mixed",
                              "types-first",
                              "types-last",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    ],
                  },
                  "newlines-between": {
                    "enum": [
                      "ignore",
                      "always",
                      "always-and-inside-groups",
                      "never",
                    ],
                    "type": "string",
                  },
                  "newlines-between-types": {
                    "enum": [
                      "ignore",
                      "always",
                      "always-and-inside-groups",
                      "never",
                    ],
                    "type": "string",
                  },
                  "pathGroups": {
                    "items": {
                      "additionalProperties": false,
                      "properties": {
                        "group": {
                          "enum": [
                            "builtin",
                            "external",
                            "internal",
                            "unknown",
                            "parent",
                            "sibling",
                            "index",
                            "object",
                            "type",
                          ],
                          "type": "string",
                        },
                        "pattern": {
                          "type": "string",
                        },
                        "patternOptions": {
                          "type": "object",
                        },
                        "position": {
                          "enum": [
                            "after",
                            "before",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "pattern",
                        "group",
                      ],
                      "type": "object",
                    },
                    "type": "array",
                  },
                  "pathGroupsExcludedImportTypes": {
                    "type": "array",
                  },
                  "sortTypesGroup": {
                    "default": false,
                    "type": "boolean",
                  },
                  "warnOnUnassignedImports": {
                    "default": false,
                    "type": "boolean",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-default-export": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Prefer a default export if module exports a single name or multiple names.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/prefer-default-export.md",
            },
            "messages": {
              "any": "Prefer default export to be present on every file that has export.",
              "single": "Prefer default export on a file with single export.",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "target": {
                    "default": "single",
                    "enum": [
                      "single",
                      "any",
                    ],
                    "type": "string",
                  },
                },
                "type": "object",
              },
            ],
            "type": "suggestion",
          },
        },
        "prefer-namespace-import": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Style guide",
              "description": "Enforce using namespace imports for specific modules, like \`react\`/\`react-dom\`, etc.",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/prefer-namespace-import.md",
            },
            "fixable": "code",
            "messages": {
              "preferNamespaceImport": "Prefer importing {{specifier}} as 'import * as {{specifier}} from "{{source}}"';",
            },
            "schema": [
              {
                "additionalProperties": false,
                "properties": {
                  "patterns": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                },
                "type": "object",
              },
            ],
            "type": "problem",
          },
        },
        "unambiguous": {
          "create": [Function],
          "defaultOptions": [],
          "meta": {
            "docs": {
              "category": "Module systems",
              "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
              "url": "https://github.com/un-ts/eslint-plugin-import-x/blob/v4.16.1/docs/rules/unambiguous.md",
            },
            "messages": {
              "module": "This module could be parsed as a valid script.",
            },
            "schema": [],
            "type": "suggestion",
          },
        },
      },
    },
  },
  "rules": {
    "@typescript-eslint/adjacent-overload-signatures": "off",
    "@typescript-eslint/array-type": "off",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/consistent-type-definitions": "off",
    "@typescript-eslint/consistent-type-exports": "off",
    "@typescript-eslint/consistent-type-imports": "off",
    "@typescript-eslint/default-param-last": "off",
    "@typescript-eslint/dot-notation": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "format": [
          "camelCase",
          "PascalCase",
          "UPPER_CASE",
        ],
        "leadingUnderscore": "allow",
        "selector": "variable",
      },
      {
        "format": [
          "camelCase",
          "PascalCase",
        ],
        "selector": "function",
      },
      {
        "format": [
          "PascalCase",
        ],
        "selector": "typeLike",
      },
    ],
    "@typescript-eslint/no-array-constructor": "off",
    "@typescript-eslint/no-array-delete": "error",
    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-dupe-class-members": "off",
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/no-duplicate-type-constituents": "error",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-empty-object-type": [
      "error",
      {
        "allowInterfaces": "with-single-extends",
        "allowObjectTypes": "never",
      },
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-extra-non-null-assertion": "off",
    "@typescript-eslint/no-extraneous-class": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-for-in-array": "error",
    "@typescript-eslint/no-implied-eval": "error",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/no-invalid-void-type": "off",
    "@typescript-eslint/no-loop-func": "error",
    "@typescript-eslint/no-loss-of-precision": "off",
    "@typescript-eslint/no-magic-numbers": "off",
    "@typescript-eslint/no-misused-new": "off",
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-namespace": "off",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-redeclare": "off",
    "@typescript-eslint/no-redundant-type-constituents": "error",
    "@typescript-eslint/no-require-imports": "off",
    "@typescript-eslint/no-restricted-imports": "off",
    "@typescript-eslint/no-restricted-types": "off",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-this-alias": "off",
    "@typescript-eslint/no-throw-literal": "off",
    "@typescript-eslint/no-unnecessary-condition": "off",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-unnecessary-type-constraint": "off",
    "@typescript-eslint/no-unsafe-argument": "error",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-declaration-merging": "off",
    "@typescript-eslint/no-unsafe-enum-comparison": "error",
    "@typescript-eslint/no-unsafe-function-type": "off",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/no-unsafe-unary-minus": "error",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": false,
        "allowTaggedTemplates": false,
        "allowTernary": false,
      },
    ],
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-useless-constructor": "off",
    "@typescript-eslint/no-useless-empty-export": "off",
    "@typescript-eslint/no-wrapper-object-types": "error",
    "@typescript-eslint/only-throw-error": "off",
    "@typescript-eslint/parameter-properties": "off",
    "@typescript-eslint/prefer-as-const": "off",
    "@typescript-eslint/prefer-enum-initializers": "off",
    "@typescript-eslint/prefer-for-of": "off",
    "@typescript-eslint/prefer-function-type": "off",
    "@typescript-eslint/prefer-literal-enum-member": "off",
    "@typescript-eslint/prefer-namespace-keyword": "off",
    "@typescript-eslint/prefer-optional-chain": "off",
    "@typescript-eslint/prefer-promise-reject-errors": "error",
    "@typescript-eslint/prefer-readonly": "off",
    "@typescript-eslint/quotes": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/restrict-plus-operands": "error",
    "@typescript-eslint/restrict-template-expressions": "error",
    "@typescript-eslint/switch-exhaustiveness-check": "off",
    "@typescript-eslint/triple-slash-reference": "error",
    "@typescript-eslint/unbound-method": "error",
    "@typescript-eslint/unified-signatures": "off",
    "array-callback-return": "off",
    "arrow-body-style": [
      "error",
      "as-needed",
      {
        "requireReturnForObjectLiteral": false,
      },
    ],
    "block-scoped-var": "error",
    "camelcase": "off",
    "class-methods-use-this": [
      "error",
      {
        "exceptMethods": [],
      },
    ],
    "consistent-return": "error",
    "constructor-super": "off",
    "curly": "off",
    "default-case": "off",
    "default-case-last": "off",
    "default-param-last": "off",
    "dot-notation": "off",
    "eqeqeq": "off",
    "for-direction": "off",
    "func-style": [
      "error",
      "declaration",
      {
        "allowArrowFunctions": true,
        "allowTypeAnnotation": true,
      },
    ],
    "getter-return": "off",
    "grouped-accessor-pairs": "off",
    "guard-for-in": "off",
    "import-x/default": "error",
    "import-x/export": "error",
    "import-x/extensions": "off",
    "import-x/first": "error",
    "import-x/named": "off",
    "import-x/namespace": "error",
    "import-x/newline-after-import": "error",
    "import-x/no-absolute-path": "error",
    "import-x/no-amd": "error",
    "import-x/no-deprecated": "warn",
    "import-x/no-duplicates": "error",
    "import-x/no-dynamic-require": "error",
    "import-x/no-empty-named-blocks": "error",
    "import-x/no-import-module-exports": [
      "error",
      {
        "exceptions": [],
      },
    ],
    "import-x/no-mutable-exports": "error",
    "import-x/no-named-as-default": "error",
    "import-x/no-named-as-default-member": "off",
    "import-x/no-named-default": "error",
    "import-x/no-relative-packages": "error",
    "import-x/no-self-import": "error",
    "import-x/no-unresolved": "off",
    "import-x/no-useless-path-segments": [
      "error",
      {
        "commonjs": true,
      },
    ],
    "import-x/no-webpack-loader-syntax": "error",
    "import-x/order": "off",
    "import-x/prefer-default-export": "off",
    "max-classes-per-file": [
      "error",
      1,
    ],
    "new-cap": [
      "error",
      {
        "capIsNew": false,
        "capIsNewExceptions": [
          "Immutable.Map",
          "Immutable.Set",
          "Immutable.List",
        ],
        "newIsCap": true,
        "newIsCapExceptions": [],
      },
    ],
    "no-alert": "off",
    "no-array-constructor": "off",
    "no-async-promise-executor": "off",
    "no-await-in-loop": "error",
    "no-bitwise": "off",
    "no-caller": "error",
    "no-case-declarations": "off",
    "no-class-assign": "off",
    "no-compare-neg-zero": "off",
    "no-cond-assign": "off",
    "no-console": "off",
    "no-const-assign": "off",
    "no-constant-binary-expression": "error",
    "no-constant-condition": "off",
    "no-constructor-return": "off",
    "no-continue": "error",
    "no-control-regex": "off",
    "no-debugger": "off",
    "no-delete-var": "error",
    "no-dupe-args": "off",
    "no-dupe-class-members": "off",
    "no-dupe-else-if": "off",
    "no-dupe-keys": "off",
    "no-duplicate-case": "off",
    "no-else-return": "off",
    "no-empty": "off",
    "no-empty-character-class": "off",
    "no-empty-function": "off",
    "no-empty-pattern": "off",
    "no-empty-static-block": "off",
    "no-eval": "off",
    "no-ex-assign": "off",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "off",
    "no-extra-label": "off",
    "no-fallthrough": "off",
    "no-func-assign": "off",
    "no-global-assign": "off",
    "no-implicit-coercion": "off",
    "no-implied-eval": "off",
    "no-import-assign": "off",
    "no-inner-declarations": "off",
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "off",
    "no-iterator": "error",
    "no-label-var": "off",
    "no-labels": "off",
    "no-lone-blocks": "off",
    "no-lonely-if": "off",
    "no-loop-func": "off",
    "no-loss-of-precision": "off",
    "no-misleading-character-class": "off",
    "no-multi-assign": "error",
    "no-multi-str": "error",
    "no-negated-condition": "off",
    "no-nested-ternary": "off",
    "no-new": "error",
    "no-new-func": "off",
    "no-new-native-nonconstructor": "off",
    "no-new-object": "error",
    "no-new-symbol": "off",
    "no-new-wrappers": "off",
    "no-nonoctal-decimal-escape": "off",
    "no-obj-calls": "off",
    "no-object-constructor": "error",
    "no-octal": "error",
    "no-octal-escape": "off",
    "no-param-reassign": "off",
    "no-plusplus": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "off",
    "no-redeclare": "off",
    "no-regex-spaces": "off",
    "no-restricted-exports": [
      "error",
      {
        "restrictedNamedExports": [
          "default",
          "then",
        ],
      },
    ],
    "no-restricted-globals": "off",
    "no-restricted-imports": "off",
    "no-restricted-properties": [
      "error",
      {
        "message": "Please use \`Object.defineProperty\` instead.",
        "property": "__defineGetter__",
      },
      {
        "message": "Please use \`Object.defineProperty\` instead.",
        "property": "__defineSetter__",
      },
    ],
    "no-restricted-syntax": [
      "error",
      {
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
        "selector": "ForInStatement",
      },
      {
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
        "selector": "LabeledStatement",
      },
      {
        "message": "\`with\` is disallowed in strict mode because it makes code impossible to predict and optimize.",
        "selector": "WithStatement",
      },
    ],
    "no-return-assign": [
      "error",
      "always",
    ],
    "no-script-url": "error",
    "no-self-assign": "off",
    "no-self-compare": "off",
    "no-sequences": "off",
    "no-setter-return": "off",
    "no-shadow": "off",
    "no-shadow-restricted-names": "off",
    "no-sparse-array": "off",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "off",
    "no-this-before-super": "off",
    "no-throw-literal": "off",
    "no-undef": "off",
    "no-undef-init": "off",
    "no-underscore-dangle": [
      "error",
      {
        "allow": [],
        "allowAfterSuper": false,
        "allowAfterThis": false,
        "enforceInMethodNames": true,
      },
    ],
    "no-unexpected-multiline": "error",
    "no-unneeded-ternary": "off",
    "no-unreachable": "off",
    "no-unreachable-loop": [
      "error",
      {
        "ignore": [],
      },
    ],
    "no-unsafe-finally": "off",
    "no-unsafe-negation": "off",
    "no-unsafe-optional-chaining": "off",
    "no-unused-expressions": "off",
    "no-unused-labels": "off",
    "no-unused-private-class-members": "off",
    "no-unused-vars": "off",
    "no-use-before-define": "off",
    "no-useless-backreference": "off",
    "no-useless-catch": "off",
    "no-useless-computed-key": "off",
    "no-useless-concat": "off",
    "no-useless-constructor": "off",
    "no-useless-escape": "off",
    "no-useless-rename": "off",
    "no-useless-return": "error",
    "no-var": "error",
    "no-void": "off",
    "no-with": "off",
    "object-shorthand": "off",
    "one-var": "off",
    "operator-assignment": "off",
    "prefer-arrow-callback": "off",
    "prefer-const": "error",
    "prefer-destructuring": [
      "error",
      {
        "AssignmentExpression": {
          "array": true,
          "object": false,
        },
        "VariableDeclarator": {
          "array": false,
          "object": true,
        },
      },
      {
        "enforceForRenamedProperties": false,
      },
    ],
    "prefer-exponentiation-operator": "off",
    "prefer-named-capture-group": "warn",
    "prefer-numeric-literals": "off",
    "prefer-object-has-own": "off",
    "prefer-object-spread": "off",
    "prefer-promise-reject-errors": "off",
    "prefer-regex-literals": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "off",
    "radix": "error",
    "require-await": "off",
    "require-yield": "off",
    "strict": [
      "error",
      "never",
    ],
    "symbol-description": "off",
    "unicode-bom": [
      "error",
      "never",
    ],
    "use-isnan": "off",
    "valid-typeof": "off",
    "vars-on-top": "error",
    "yoda": "off",
  },
  "settings": {
    "import-x/extensions": [
      ".js",
      ".jsx",
      ".cjs",
      ".mjs",
      ".ts",
      ".tsx",
      ".cts",
      ".mts",
    ],
    "import-x/external-module-folders": [
      "node_modules",
      "node_modules/@types",
    ],
    "import-x/ignore": [
      "node_modules",
      "\\.(coffee|scss|css|less|hbs|svg|json)$",
    ],
    "import-x/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx",
        ".cts",
        ".mts",
      ],
    },
    "import-x/resolver-next": [
      {
        "interfaceVersion": 3,
        "name": "eslint-import-resolver-oxc",
        "resolve": [Function],
      },
    ],
  },
}
`;
